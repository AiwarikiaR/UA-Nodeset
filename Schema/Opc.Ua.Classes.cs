/* ========================================================================
 * Copyright (c) 2005-2019 The OPC Foundation, Inc. All rights reserved.
 *
 * OPC Foundation MIT License 1.00
 * 
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 * 
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * The complete license agreement can be found here:
 * http://opcfoundation.org/License/MIT/1.00/
 * ======================================================================*/

using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Runtime.Serialization;

namespace Opc.Ua
{
    #region ServerObjectState Class
    #if (!OPCUA_EXCLUDE_ServerObjectState)
    /// <summary>
    /// Stores an instance of the ServerType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerObjectState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerObjectState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (EstimatedReturnTime != null)
            {
                EstimatedReturnTime.Initialize(context, EstimatedReturnTime_InitializationString);
            }

            if (Namespaces != null)
            {
                Namespaces.Initialize(context, Namespaces_InitializationString);
            }

            if (GetMonitoredItems != null)
            {
                GetMonitoredItems.Initialize(context, GetMonitoredItems_InitializationString);
            }

            if (ResendData != null)
            {
                ResendData.Initialize(context, ResendData_InitializationString);
            }

            if (SetSubscriptionDurable != null)
            {
                SetSubscriptionDurable.Initialize(context, SetSubscriptionDurable_InitializationString);
            }

            if (RequestServerStateChange != null)
            {
                RequestServerStateChange.Initialize(context, RequestServerStateChange_InitializationString);
            }
        }

        #region Initialization String
        private const string EstimatedReturnTime_InitializationString =
           "//////////8VcIkKAgAAAAAAEwAAAEVzdGltYXRlZFJldHVyblRpbWUBAFIyAC4ARFIyAAAADf////8B" +
           "AQAAAAAAQI9A/////wAAAAA=";

        private const string Namespaces_InitializationString =
           "//////////8EYIAKAQAAAAAACgAAAE5hbWVzcGFjZXMBAActAC8BAH0tBy0AAP////8AAAAA";

        private const string GetMonitoredItems_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAEdldE1vbml0b3JlZEl0ZW1zAQDhLAAvAQDhLOEsAAABAf////8C" +
           "AAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4iwALgBE4iwAAJYBAAAAAQAqAQEdAAAADgAA" +
           "AFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91" +
           "dHB1dEFyZ3VtZW50cwEA4ywALgBE4ywAAJYCAAAAAQAqAQEcAAAADQAAAFNlcnZlckhhbmRsZXMABwEA" +
           "AAAAAAAAAAEAKgEBHAAAAA0AAABDbGllbnRIYW5kbGVzAAcBAAAAAAAAAAABACgBAQAAAAEB/////wAA" +
           "AAA=";

        private const string ResendData_InitializationString =
           "//////////8EYYIKBAAAAAAACgAAAFJlc2VuZERhdGEBAEcyAC8BAEcyRzIAAAEB/////wEAAAAVYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBIMgAuAERIMgAAlgEAAAABACoBAR0AAAAOAAAAU3Vic2Ny" +
           "aXB0aW9uSWQAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";

        private const string SetSubscriptionDurable_InitializationString =
           "//////////8EYYIKBAAAAAAAFgAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGUBAMoxAC8BAMoxyjEAAAEB" +
           "/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDLMQAuAETLMQAAlgIAAAABACoBAR0A" +
           "AAAOAAAAU3Vic2NyaXB0aW9uSWQAB/////8AAAAAAAEAKgEBHgAAAA8AAABMaWZldGltZUluSG91cnMA" +
           "B/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQDM" +
           "MQAuAETMMQAAlgEAAAABACoBASUAAAAWAAAAUmV2aXNlZExpZmV0aW1lSW5Ib3VycwAH/////wAAAAAA" +
           "AQAoAQEAAAABAf////8AAAAA";

        private const string RequestServerStateChange_InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAFJlcXVlc3RTZXJ2ZXJTdGF0ZUNoYW5nZQEAUzIALwEAUzJTMgAA" +
           "AQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFQyAC4ARFQyAACWBQAAAAEAKgEB" +
           "FgAAAAUAAABTdGF0ZQEAVAP/////AAAAAAABACoBASIAAAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQAN" +
           "/////wAAAAAAAQAqAQEiAAAAEwAAAFNlY29uZHNUaWxsU2h1dGRvd24AB/////8AAAAAAAEAKgEBFQAA" +
           "AAYAAABSZWFzb24AFf////8AAAAAAAEAKgEBFgAAAAcAAABSZXN0YXJ0AAH/////AAAAAAABACgBAQAA" +
           "AAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAEgAAAFNlcnZlclR5cGVJbnN0YW5jZQEA1AcBANQH/////w8AAAAVcIkK" +
           "AgAAAAAACwAAAFNlcnZlckFycmF5AQDVBwAuAETVBwAAAAwBAAAAAQEAAAAAAECPQP////8AAAAAFXCJ" +
           "CgIAAAAAAA4AAABOYW1lc3BhY2VBcnJheQEA1gcALgBE1gcAAAAMAQAAAAEBAAAAAABAj0D/////AAAA" +
           "ABVwiQoCAAAAAAAMAAAAU2VydmVyU3RhdHVzAQDXBwAvAQBaCNcHAAABAF4D/////wEBAAAAAABAj0D/" +
           "////BgAAABVgiQoCAAAAAAAJAAAAU3RhcnRUaW1lAQACDAAvAD8CDAAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAsAAABDdXJyZW50VGltZQEAAwwALwA/AwwAAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAFAAAAU3RhdGUBAAQMAC8APwQMAAABAFQD/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEJ1" +
           "aWxkSW5mbwEABQwALwEA6wsFDAAAAQBSAf////8BAf////8GAAAAFXCJCgIAAAAAAAoAAABQcm9kdWN0" +
           "VXJpAQAGDAAvAD8GDAAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAABAAAABNYW51ZmFj" +
           "dHVyZXJOYW1lAQAHDAAvAD8HDAAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAAAsAAABQ" +
           "cm9kdWN0TmFtZQEACAwALwA/CAwAAAAM/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAAPAAAA" +
           "U29mdHdhcmVWZXJzaW9uAQAJDAAvAD8JDAAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAA" +
           "AAsAAABCdWlsZE51bWJlcgEACgwALwA/CgwAAAAM/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAA" +
           "AAAJAAAAQnVpbGREYXRlAQALDAAvAD8LDAAAAQAmAf////8BAQAAAAAAQI9A/////wAAAAAVYIkKAgAA" +
           "AAAAEwAAAFNlY29uZHNUaWxsU2h1dGRvd24BAAwMAC8APwwMAAAAB/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABTaHV0ZG93blJlYXNvbgEADQwALwA/DQwAAAAV/////wEB/////wAAAAAVcIkKAgAAAAAA" +
           "DAAAAFNlcnZpY2VMZXZlbAEA2AcALgBE2AcAAAAD/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAA" +
           "AAAIAAAAQXVkaXRpbmcBALYKAC4ARLYKAAAAAf////8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAA" +
           "EwAAAEVzdGltYXRlZFJldHVyblRpbWUBAFIyAC4ARFIyAAAADf////8BAQAAAAAAQI9A/////wAAAAAE" +
           "YIAKAQAAAAAAEgAAAFNlcnZlckNhcGFiaWxpdGllcwEA2QcALwEA3QfZBwAA/////wkAAAAVYIkKAgAA" +
           "AAAAEgAAAFNlcnZlclByb2ZpbGVBcnJheQEADgwALgBEDgwAAAAMAQAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAExvY2FsZUlkQXJyYXkBAA8MAC4ARA8MAAABACcBAQAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "FgAAAE1pblN1cHBvcnRlZFNhbXBsZVJhdGUBABAMAC4ARBAMAAABACIB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAGwAAAE1heEJyb3dzZUNvbnRpbnVhdGlvblBvaW50cwEAEQwALgBEEQwAAAAF/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAGgAAAE1heFF1ZXJ5Q29udGludWF0aW9uUG9pbnRzAQASDAAuAEQSDAAAAAX/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAcAAAATWF4SGlzdG9yeUNvbnRpbnVhdGlvblBvaW50cwEAEwwA" +
           "LgBEEwwAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFNvZnR3YXJlQ2VydGlmaWNhdGVzAQAU" +
           "DAAuAEQUDAAAAQBYAQEAAAABAf////8AAAAABGCACgEAAAAAAA4AAABNb2RlbGxpbmdSdWxlcwEAFQwA" +
           "LwA9FQwAAP////8AAAAABGCACgEAAAAAABIAAABBZ2dyZWdhdGVGdW5jdGlvbnMBABYMAC8APRYMAAD/" +
           "////AAAAAARggAoBAAAAAAARAAAAU2VydmVyRGlhZ25vc3RpY3MBANoHAC8BAOQH2gcAAP////8EAAAA" +
           "FWCJCgIAAAAAABgAAABTZXJ2ZXJEaWFnbm9zdGljc1N1bW1hcnkBABcMAC8BAGYIFwwAAAEAWwP/////" +
           "AQH/////DAAAABVgiQoCAAAAAAAPAAAAU2VydmVyVmlld0NvdW50AQAYDAAvAD8YDAAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAATAAAAQ3VycmVudFNlc3Npb25Db3VudAEAGQwALwA/GQwAAAAH/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAFQAAAEN1bXVsYXRlZFNlc3Npb25Db3VudAEAGgwALwA/GgwAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAHAAAAFNlY3VyaXR5UmVqZWN0ZWRTZXNzaW9uQ291bnQBABsMAC8A" +
           "PxsMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABSZWplY3RlZFNlc3Npb25Db3VudAEAHAwA" +
           "LwA/HAwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFNlc3Npb25UaW1lb3V0Q291bnQBAB0M" +
           "AC8APx0MAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABEAAABTZXNzaW9uQWJvcnRDb3VudAEAHgwA" +
           "LwA/HgwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAFB1Ymxpc2hpbmdJbnRlcnZhbENvdW50" +
           "AQAgDAAvAD8gDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAYAAAAQ3VycmVudFN1YnNjcmlwdGlv" +
           "bkNvdW50AQAhDAAvAD8hDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAQ3VtdWxhdGVkU3Vi" +
           "c2NyaXB0aW9uQ291bnQBACIMAC8APyIMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABTZWN1" +
           "cml0eVJlamVjdGVkUmVxdWVzdHNDb3VudAEAIwwALwA/IwwAAAAH/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFQAAAFJlamVjdGVkUmVxdWVzdHNDb3VudAEAJAwALwA/JAwAAAAH/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAHAAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXkBACYMAC8BAHsIJgwAAAEAagMBAAAA" +
           "AQH/////AAAAAARggAoBAAAAAAAaAAAAU2Vzc2lvbnNEaWFnbm9zdGljc1N1bW1hcnkBACcMAC8BAOoH" +
           "JwwAAP////8CAAAAFWCJCgIAAAAAABcAAABTZXNzaW9uRGlhZ25vc3RpY3NBcnJheQEAKAwALwEAlAgo" +
           "DAAAAQBhAwEAAAABAf////8AAAAAFWCJCgIAAAAAAB8AAABTZXNzaW9uU2VjdXJpdHlEaWFnbm9zdGlj" +
           "c0FycmF5AQApDAAvAQDDCCkMAAABAGQDAQAAAAEB/////wAAAAAVYIkKAgAAAAAACwAAAEVuYWJsZWRG" +
           "bGFnAQAqDAAuAEQqDAAAAAH/////AwP/////AAAAAARggAoBAAAAAAAQAAAAVmVuZG9yU2VydmVySW5m" +
           "bwEA2wcALwEA8QfbBwAA/////wAAAAAEYIAKAQAAAAAAEAAAAFNlcnZlclJlZHVuZGFuY3kBANwHAC8B" +
           "APIH3AcAAP////8BAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAEAKwwALgBEKwwAAAEA" +
           "UwP/////AQH/////AAAAAARggAoBAAAAAAAKAAAATmFtZXNwYWNlcwEABy0ALwEAfS0HLQAA/////wAA" +
           "AAAEYYIKBAAAAAAAEQAAAEdldE1vbml0b3JlZEl0ZW1zAQDhLAAvAQDhLOEsAAABAf////8CAAAAFWCp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4iwALgBE4iwAAJYBAAAAAQAqAQEdAAAADgAAAFN1YnNj" +
           "cmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEA4ywALgBE4ywAAJYCAAAAAQAqAQEcAAAADQAAAFNlcnZlckhhbmRsZXMABwEAAAAAAAAA" +
           "AAEAKgEBHAAAAA0AAABDbGllbnRIYW5kbGVzAAcBAAAAAAAAAAABACgBAQAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAACgAAAFJlc2VuZERhdGEBAEcyAC8BAEcyRzIAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAQBIMgAuAERIMgAAlgEAAAABACoBAR0AAAAOAAAAU3Vic2NyaXB0aW9uSWQAB///" +
           "//8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAWAAAAU2V0U3Vic2NyaXB0aW9uRHVyYWJs" +
           "ZQEAyjEALwEAyjHKMQAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMsxAC4A" +
           "RMsxAACWAgAAAAEAKgEBHQAAAA4AAABTdWJzY3JpcHRpb25JZAAH/////wAAAAAAAQAqAQEeAAAADwAA" +
           "AExpZmV0aW1lSW5Ib3VycwAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABP" +
           "dXRwdXRBcmd1bWVudHMBAMwxAC4ARMwxAACWAQAAAAEAKgEBJQAAABYAAABSZXZpc2VkTGlmZXRpbWVJ" +
           "bkhvdXJzAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAAGAAAAFJlcXVlc3RTZXJ2" +
           "ZXJTdGF0ZUNoYW5nZQEAUzIALwEAUzJTMgAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1" +
           "bWVudHMBAFQyAC4ARFQyAACWBQAAAAEAKgEBFgAAAAUAAABTdGF0ZQEAVAP/////AAAAAAABACoBASIA" +
           "AAATAAAARXN0aW1hdGVkUmV0dXJuVGltZQAN/////wAAAAAAAQAqAQEiAAAAEwAAAFNlY29uZHNUaWxs" +
           "U2h1dGRvd24AB/////8AAAAAAAEAKgEBFQAAAAYAAABSZWFzb24AFf////8AAAAAAAEAKgEBFgAAAAcA" +
           "AABSZXN0YXJ0AAH/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerArray
        {
            get
            {
                return m_serverArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverArray = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> NamespaceArray
        {
            get
            {
                return m_namespaceArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceArray = value;
            }
        }

        /// <remarks />
        public ServerStatusState ServerStatus
        {
            get
            {
                return m_serverStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverStatus = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> ServiceLevel
        {
            get
            {
                return m_serviceLevel;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serviceLevel, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serviceLevel = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Auditing
        {
            get
            {
                return m_auditing;
            }

            set
            {
                if (!Object.ReferenceEquals(m_auditing, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_auditing = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EstimatedReturnTime
        {
            get
            {
                return m_estimatedReturnTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_estimatedReturnTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_estimatedReturnTime = value;
            }
        }

        /// <remarks />
        public ServerCapabilitiesState ServerCapabilities
        {
            get
            {
                return m_serverCapabilities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverCapabilities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverCapabilities = value;
            }
        }

        /// <remarks />
        public ServerDiagnosticsState ServerDiagnostics
        {
            get
            {
                return m_serverDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverDiagnostics = value;
            }
        }

        /// <remarks />
        public VendorServerInfoState VendorServerInfo
        {
            get
            {
                return m_vendorServerInfo;
            }

            set
            {
                if (!Object.ReferenceEquals(m_vendorServerInfo, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_vendorServerInfo = value;
            }
        }

        /// <remarks />
        public ServerRedundancyState ServerRedundancy
        {
            get
            {
                return m_serverRedundancy;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverRedundancy, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverRedundancy = value;
            }
        }

        /// <remarks />
        public NamespacesState Namespaces
        {
            get
            {
                return m_namespaces;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaces, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaces = value;
            }
        }

        /// <remarks />
        public GetMonitoredItemsMethodState GetMonitoredItems
        {
            get
            {
                return m_getMonitoredItemsMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getMonitoredItemsMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getMonitoredItemsMethod = value;
            }
        }

        /// <remarks />
        public ResendDataMethodState ResendData
        {
            get
            {
                return m_resendDataMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resendDataMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resendDataMethod = value;
            }
        }

        /// <remarks />
        public SetSubscriptionDurableMethodState SetSubscriptionDurable
        {
            get
            {
                return m_setSubscriptionDurableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setSubscriptionDurableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setSubscriptionDurableMethod = value;
            }
        }

        /// <remarks />
        public RequestServerStateChangeMethodState RequestServerStateChange
        {
            get
            {
                return m_requestServerStateChangeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestServerStateChangeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestServerStateChangeMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverArray != null)
            {
                children.Add(m_serverArray);
            }

            if (m_namespaceArray != null)
            {
                children.Add(m_namespaceArray);
            }

            if (m_serverStatus != null)
            {
                children.Add(m_serverStatus);
            }

            if (m_serviceLevel != null)
            {
                children.Add(m_serviceLevel);
            }

            if (m_auditing != null)
            {
                children.Add(m_auditing);
            }

            if (m_estimatedReturnTime != null)
            {
                children.Add(m_estimatedReturnTime);
            }

            if (m_serverCapabilities != null)
            {
                children.Add(m_serverCapabilities);
            }

            if (m_serverDiagnostics != null)
            {
                children.Add(m_serverDiagnostics);
            }

            if (m_vendorServerInfo != null)
            {
                children.Add(m_vendorServerInfo);
            }

            if (m_serverRedundancy != null)
            {
                children.Add(m_serverRedundancy);
            }

            if (m_namespaces != null)
            {
                children.Add(m_namespaces);
            }

            if (m_getMonitoredItemsMethod != null)
            {
                children.Add(m_getMonitoredItemsMethod);
            }

            if (m_resendDataMethod != null)
            {
                children.Add(m_resendDataMethod);
            }

            if (m_setSubscriptionDurableMethod != null)
            {
                children.Add(m_setSubscriptionDurableMethod);
            }

            if (m_requestServerStateChangeMethod != null)
            {
                children.Add(m_requestServerStateChangeMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerArray;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceArray:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceArray == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                NamespaceArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = NamespaceArray;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerStatus:
                {
                    if (createOrReplace)
                    {
                        if (ServerStatus == null)
                        {
                            if (replacement == null)
                            {
                                ServerStatus = new ServerStatusState(this);
                            }
                            else
                            {
                                ServerStatus = (ServerStatusState)replacement;
                            }
                        }
                    }

                    instance = ServerStatus;
                    break;
                }

                case Opc.Ua.BrowseNames.ServiceLevel:
                {
                    if (createOrReplace)
                    {
                        if (ServiceLevel == null)
                        {
                            if (replacement == null)
                            {
                                ServiceLevel = new PropertyState<byte>(this);
                            }
                            else
                            {
                                ServiceLevel = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = ServiceLevel;
                    break;
                }

                case Opc.Ua.BrowseNames.Auditing:
                {
                    if (createOrReplace)
                    {
                        if (Auditing == null)
                        {
                            if (replacement == null)
                            {
                                Auditing = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Auditing = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Auditing;
                    break;
                }

                case Opc.Ua.BrowseNames.EstimatedReturnTime:
                {
                    if (createOrReplace)
                    {
                        if (EstimatedReturnTime == null)
                        {
                            if (replacement == null)
                            {
                                EstimatedReturnTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EstimatedReturnTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EstimatedReturnTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerCapabilities:
                {
                    if (createOrReplace)
                    {
                        if (ServerCapabilities == null)
                        {
                            if (replacement == null)
                            {
                                ServerCapabilities = new ServerCapabilitiesState(this);
                            }
                            else
                            {
                                ServerCapabilities = (ServerCapabilitiesState)replacement;
                            }
                        }
                    }

                    instance = ServerCapabilities;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (ServerDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                ServerDiagnostics = new ServerDiagnosticsState(this);
                            }
                            else
                            {
                                ServerDiagnostics = (ServerDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = ServerDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.VendorServerInfo:
                {
                    if (createOrReplace)
                    {
                        if (VendorServerInfo == null)
                        {
                            if (replacement == null)
                            {
                                VendorServerInfo = new VendorServerInfoState(this);
                            }
                            else
                            {
                                VendorServerInfo = (VendorServerInfoState)replacement;
                            }
                        }
                    }

                    instance = VendorServerInfo;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerRedundancy:
                {
                    if (createOrReplace)
                    {
                        if (ServerRedundancy == null)
                        {
                            if (replacement == null)
                            {
                                ServerRedundancy = new ServerRedundancyState(this);
                            }
                            else
                            {
                                ServerRedundancy = (ServerRedundancyState)replacement;
                            }
                        }
                    }

                    instance = ServerRedundancy;
                    break;
                }

                case Opc.Ua.BrowseNames.Namespaces:
                {
                    if (createOrReplace)
                    {
                        if (Namespaces == null)
                        {
                            if (replacement == null)
                            {
                                Namespaces = new NamespacesState(this);
                            }
                            else
                            {
                                Namespaces = (NamespacesState)replacement;
                            }
                        }
                    }

                    instance = Namespaces;
                    break;
                }

                case Opc.Ua.BrowseNames.GetMonitoredItems:
                {
                    if (createOrReplace)
                    {
                        if (GetMonitoredItems == null)
                        {
                            if (replacement == null)
                            {
                                GetMonitoredItems = new GetMonitoredItemsMethodState(this);
                            }
                            else
                            {
                                GetMonitoredItems = (GetMonitoredItemsMethodState)replacement;
                            }
                        }
                    }

                    instance = GetMonitoredItems;
                    break;
                }

                case Opc.Ua.BrowseNames.ResendData:
                {
                    if (createOrReplace)
                    {
                        if (ResendData == null)
                        {
                            if (replacement == null)
                            {
                                ResendData = new ResendDataMethodState(this);
                            }
                            else
                            {
                                ResendData = (ResendDataMethodState)replacement;
                            }
                        }
                    }

                    instance = ResendData;
                    break;
                }

                case Opc.Ua.BrowseNames.SetSubscriptionDurable:
                {
                    if (createOrReplace)
                    {
                        if (SetSubscriptionDurable == null)
                        {
                            if (replacement == null)
                            {
                                SetSubscriptionDurable = new SetSubscriptionDurableMethodState(this);
                            }
                            else
                            {
                                SetSubscriptionDurable = (SetSubscriptionDurableMethodState)replacement;
                            }
                        }
                    }

                    instance = SetSubscriptionDurable;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestServerStateChange:
                {
                    if (createOrReplace)
                    {
                        if (RequestServerStateChange == null)
                        {
                            if (replacement == null)
                            {
                                RequestServerStateChange = new RequestServerStateChangeMethodState(this);
                            }
                            else
                            {
                                RequestServerStateChange = (RequestServerStateChangeMethodState)replacement;
                            }
                        }
                    }

                    instance = RequestServerStateChange;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverArray;
        private PropertyState<string[]> m_namespaceArray;
        private ServerStatusState m_serverStatus;
        private PropertyState<byte> m_serviceLevel;
        private PropertyState<bool> m_auditing;
        private PropertyState<DateTime> m_estimatedReturnTime;
        private ServerCapabilitiesState m_serverCapabilities;
        private ServerDiagnosticsState m_serverDiagnostics;
        private VendorServerInfoState m_vendorServerInfo;
        private ServerRedundancyState m_serverRedundancy;
        private NamespacesState m_namespaces;
        private GetMonitoredItemsMethodState m_getMonitoredItemsMethod;
        private ResendDataMethodState m_resendDataMethod;
        private SetSubscriptionDurableMethodState m_setSubscriptionDurableMethod;
        private RequestServerStateChangeMethodState m_requestServerStateChangeMethod;
        #endregion
    }
    #endif
    #endregion

    #region ServerCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_ServerCapabilitiesState)
    /// <summary>
    /// Stores an instance of the ServerCapabilitiesType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxArrayLength != null)
            {
                MaxArrayLength.Initialize(context, MaxArrayLength_InitializationString);
            }

            if (MaxStringLength != null)
            {
                MaxStringLength.Initialize(context, MaxStringLength_InitializationString);
            }

            if (MaxByteStringLength != null)
            {
                MaxByteStringLength.Initialize(context, MaxByteStringLength_InitializationString);
            }

            if (OperationLimits != null)
            {
                OperationLimits.Initialize(context, OperationLimits_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxArrayLength_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heEFycmF5TGVuZ3RoAQAdLQAuAEQdLQAAAAf/////AQH/////" +
           "AAAAAA==";

        private const string MaxStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heFN0cmluZ0xlbmd0aAEAHi0ALgBEHi0AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string MaxByteStringLength_InitializationString =
           "//////////8VYIkKAgAAAAAAEwAAAE1heEJ5dGVTdHJpbmdMZW5ndGgBAG4yAC4ARG4yAAAAB/////8B" +
           "Af////8AAAAA";

        private const string OperationLimits_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAE9wZXJhdGlvbkxpbWl0cwEAHy0ALwEALC0fLQAA/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHgAAAFNlcnZlckNhcGFiaWxpdGllc1R5cGVJbnN0YW5jZQEA3QcBAN0H" +
           "/////w0AAAAVYIkKAgAAAAAAEgAAAFNlcnZlclByb2ZpbGVBcnJheQEA3gcALgBE3gcAAAAMAQAAAAEB" +
           "/////wAAAAAVYIkKAgAAAAAADQAAAExvY2FsZUlkQXJyYXkBAOAHAC4AROAHAAABACcBAQAAAAEB////" +
           "/wAAAAAVYIkKAgAAAAAAFgAAAE1pblN1cHBvcnRlZFNhbXBsZVJhdGUBAOEHAC4AROEHAAABACIB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAGwAAAE1heEJyb3dzZUNvbnRpbnVhdGlvblBvaW50cwEArAoALgBE" +
           "rAoAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAGgAAAE1heFF1ZXJ5Q29udGludWF0aW9uUG9pbnRz" +
           "AQCtCgAuAEStCgAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAcAAAATWF4SGlzdG9yeUNvbnRpbnVh" +
           "dGlvblBvaW50cwEArgoALgBErgoAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFNvZnR3YXJl" +
           "Q2VydGlmaWNhdGVzAQDpCwAuAETpCwAAAQBYAQEAAAABAf////8AAAAAFWCJCgIAAAAAAA4AAABNYXhB" +
           "cnJheUxlbmd0aAEAHS0ALgBEHS0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAE1heFN0cmlu" +
           "Z0xlbmd0aAEAHi0ALgBEHi0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAE1heEJ5dGVTdHJp" +
           "bmdMZW5ndGgBAG4yAC4ARG4yAAAAB/////8BAf////8AAAAABGCACgEAAAAAAA8AAABPcGVyYXRpb25M" +
           "aW1pdHMBAB8tAC8BACwtHy0AAP////8AAAAABGCACgEAAAAAAA4AAABNb2RlbGxpbmdSdWxlcwEA4wcA" +
           "LwA94wcAAP////8AAAAABGCACgEAAAAAABIAAABBZ2dyZWdhdGVGdW5jdGlvbnMBAMIKAC8APcIKAAD/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerProfileArray
        {
            get
            {
                return m_serverProfileArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverProfileArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverProfileArray = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> LocaleIdArray
        {
            get
            {
                return m_localeIdArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIdArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIdArray = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MinSupportedSampleRate
        {
            get
            {
                return m_minSupportedSampleRate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_minSupportedSampleRate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_minSupportedSampleRate = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxBrowseContinuationPoints
        {
            get
            {
                return m_maxBrowseContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxBrowseContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxBrowseContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxQueryContinuationPoints
        {
            get
            {
                return m_maxQueryContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxQueryContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxQueryContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> MaxHistoryContinuationPoints
        {
            get
            {
                return m_maxHistoryContinuationPoints;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxHistoryContinuationPoints, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxHistoryContinuationPoints = value;
            }
        }

        /// <remarks />
        public PropertyState<SignedSoftwareCertificate[]> SoftwareCertificates
        {
            get
            {
                return m_softwareCertificates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_softwareCertificates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_softwareCertificates = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxArrayLength
        {
            get
            {
                return m_maxArrayLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxArrayLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxArrayLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxStringLength
        {
            get
            {
                return m_maxStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxStringLength = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxByteStringLength
        {
            get
            {
                return m_maxByteStringLength;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxByteStringLength, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxByteStringLength = value;
            }
        }

        /// <remarks />
        public OperationLimitsState OperationLimits
        {
            get
            {
                return m_operationLimits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_operationLimits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_operationLimits = value;
            }
        }

        /// <remarks />
        public FolderState ModellingRules
        {
            get
            {
                return m_modellingRules;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modellingRules, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modellingRules = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverProfileArray != null)
            {
                children.Add(m_serverProfileArray);
            }

            if (m_localeIdArray != null)
            {
                children.Add(m_localeIdArray);
            }

            if (m_minSupportedSampleRate != null)
            {
                children.Add(m_minSupportedSampleRate);
            }

            if (m_maxBrowseContinuationPoints != null)
            {
                children.Add(m_maxBrowseContinuationPoints);
            }

            if (m_maxQueryContinuationPoints != null)
            {
                children.Add(m_maxQueryContinuationPoints);
            }

            if (m_maxHistoryContinuationPoints != null)
            {
                children.Add(m_maxHistoryContinuationPoints);
            }

            if (m_softwareCertificates != null)
            {
                children.Add(m_softwareCertificates);
            }

            if (m_maxArrayLength != null)
            {
                children.Add(m_maxArrayLength);
            }

            if (m_maxStringLength != null)
            {
                children.Add(m_maxStringLength);
            }

            if (m_maxByteStringLength != null)
            {
                children.Add(m_maxByteStringLength);
            }

            if (m_operationLimits != null)
            {
                children.Add(m_operationLimits);
            }

            if (m_modellingRules != null)
            {
                children.Add(m_modellingRules);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerProfileArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerProfileArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerProfileArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerProfileArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerProfileArray;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIdArray:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIdArray == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIdArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                LocaleIdArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIdArray;
                    break;
                }

                case Opc.Ua.BrowseNames.MinSupportedSampleRate:
                {
                    if (createOrReplace)
                    {
                        if (MinSupportedSampleRate == null)
                        {
                            if (replacement == null)
                            {
                                MinSupportedSampleRate = new PropertyState<double>(this);
                            }
                            else
                            {
                                MinSupportedSampleRate = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MinSupportedSampleRate;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxBrowseContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxBrowseContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxBrowseContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxBrowseContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxBrowseContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxQueryContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxQueryContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxQueryContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxQueryContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxQueryContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxHistoryContinuationPoints:
                {
                    if (createOrReplace)
                    {
                        if (MaxHistoryContinuationPoints == null)
                        {
                            if (replacement == null)
                            {
                                MaxHistoryContinuationPoints = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                MaxHistoryContinuationPoints = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = MaxHistoryContinuationPoints;
                    break;
                }

                case Opc.Ua.BrowseNames.SoftwareCertificates:
                {
                    if (createOrReplace)
                    {
                        if (SoftwareCertificates == null)
                        {
                            if (replacement == null)
                            {
                                SoftwareCertificates = new PropertyState<SignedSoftwareCertificate[]>(this);
                            }
                            else
                            {
                                SoftwareCertificates = (PropertyState<SignedSoftwareCertificate[]>)replacement;
                            }
                        }
                    }

                    instance = SoftwareCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxArrayLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxArrayLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxArrayLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxArrayLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxArrayLength;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxByteStringLength:
                {
                    if (createOrReplace)
                    {
                        if (MaxByteStringLength == null)
                        {
                            if (replacement == null)
                            {
                                MaxByteStringLength = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxByteStringLength = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxByteStringLength;
                    break;
                }

                case Opc.Ua.BrowseNames.OperationLimits:
                {
                    if (createOrReplace)
                    {
                        if (OperationLimits == null)
                        {
                            if (replacement == null)
                            {
                                OperationLimits = new OperationLimitsState(this);
                            }
                            else
                            {
                                OperationLimits = (OperationLimitsState)replacement;
                            }
                        }
                    }

                    instance = OperationLimits;
                    break;
                }

                case Opc.Ua.BrowseNames.ModellingRules:
                {
                    if (createOrReplace)
                    {
                        if (ModellingRules == null)
                        {
                            if (replacement == null)
                            {
                                ModellingRules = new FolderState(this);
                            }
                            else
                            {
                                ModellingRules = (FolderState)replacement;
                            }
                        }
                    }

                    instance = ModellingRules;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverProfileArray;
        private PropertyState<string[]> m_localeIdArray;
        private PropertyState<double> m_minSupportedSampleRate;
        private PropertyState<ushort> m_maxBrowseContinuationPoints;
        private PropertyState<ushort> m_maxQueryContinuationPoints;
        private PropertyState<ushort> m_maxHistoryContinuationPoints;
        private PropertyState<SignedSoftwareCertificate[]> m_softwareCertificates;
        private PropertyState<uint> m_maxArrayLength;
        private PropertyState<uint> m_maxStringLength;
        private PropertyState<uint> m_maxByteStringLength;
        private OperationLimitsState m_operationLimits;
        private FolderState m_modellingRules;
        private FolderState m_aggregateFunctions;
        #endregion
    }
    #endif
    #endregion

    #region ServerDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsState)
    /// <summary>
    /// Stores an instance of the ServerDiagnosticsType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerDiagnosticsState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SamplingIntervalDiagnosticsArray != null)
            {
                SamplingIntervalDiagnosticsArray.Initialize(context, SamplingIntervalDiagnosticsArray_InitializationString);
            }
        }

        #region Initialization String
        private const string SamplingIntervalDiagnosticsArray_InitializationString =
           "//////////8VYIkKAgAAAAAAIAAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0FycmF5AQDmBwAv" +
           "AQB0COYHAAABAFgDAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHQAAAFNlcnZlckRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQDkBwEA5Af/" +
           "////BQAAABVgiQoCAAAAAAAYAAAAU2VydmVyRGlhZ25vc3RpY3NTdW1tYXJ5AQDlBwAvAQBmCOUHAAAB" +
           "AFsD/////wEB/////wwAAAAVYIkKAgAAAAAADwAAAFNlcnZlclZpZXdDb3VudAEALAwALwA/LAwAAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAEN1cnJlbnRTZXNzaW9uQ291bnQBAC0MAC8APy0MAAAA" +
           "B/////8BAf////8AAAAAFWCJCgIAAAAAABUAAABDdW11bGF0ZWRTZXNzaW9uQ291bnQBAC4MAC8APy4M" +
           "AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABwAAABTZWN1cml0eVJlamVjdGVkU2Vzc2lvbkNvdW50" +
           "AQAvDAAvAD8vDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAUAAAAUmVqZWN0ZWRTZXNzaW9uQ291" +
           "bnQBADAMAC8APzAMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTZXNzaW9uVGltZW91dENv" +
           "dW50AQAxDAAvAD8xDAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAARAAAAU2Vzc2lvbkFib3J0Q291" +
           "bnQBADIMAC8APzIMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABcAAABQdWJsaXNoaW5nSW50ZXJ2" +
           "YWxDb3VudAEANAwALwA/NAwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAEN1cnJlbnRTdWJz" +
           "Y3JpcHRpb25Db3VudAEANQwALwA/NQwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAGgAAAEN1bXVs" +
           "YXRlZFN1YnNjcmlwdGlvbkNvdW50AQA2DAAvAD82DAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAd" +
           "AAAAU2VjdXJpdHlSZWplY3RlZFJlcXVlc3RzQ291bnQBADcMAC8APzcMAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABUAAABSZWplY3RlZFJlcXVlc3RzQ291bnQBADgMAC8APzgMAAAAB/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAACAAAABTYW1wbGluZ0ludGVydmFsRGlhZ25vc3RpY3NBcnJheQEA5gcALwEAdAjm" +
           "BwAAAQBYAwEAAAABAf////8AAAAAFWCJCgIAAAAAABwAAABTdWJzY3JpcHRpb25EaWFnbm9zdGljc0Fy" +
           "cmF5AQDnBwAvAQB7COcHAAABAGoDAQAAAAEB/////wAAAAAEYIAKAQAAAAAAGgAAAFNlc3Npb25zRGlh" +
           "Z25vc3RpY3NTdW1tYXJ5AQC4CgAvAQDqB7gKAAD/////AgAAABVgiQoCAAAAAAAXAAAAU2Vzc2lvbkRp" +
           "YWdub3N0aWNzQXJyYXkBADkMAC8BAJQIOQwAAAEAYQMBAAAAAQH/////AAAAABVgiQoCAAAAAAAfAAAA" +
           "U2Vzc2lvblNlY3VyaXR5RGlhZ25vc3RpY3NBcnJheQEAOgwALwEAwwg6DAAAAQBkAwEAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABFbmFibGVkRmxhZwEA6QcALgBE6QcAAAAB/////wMD/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public ServerDiagnosticsSummaryState ServerDiagnosticsSummary
        {
            get
            {
                return m_serverDiagnosticsSummary;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverDiagnosticsSummary, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverDiagnosticsSummary = value;
            }
        }

        /// <remarks />
        public SamplingIntervalDiagnosticsArrayState SamplingIntervalDiagnosticsArray
        {
            get
            {
                return m_samplingIntervalDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingIntervalDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingIntervalDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SubscriptionDiagnosticsArrayState SubscriptionDiagnosticsArray
        {
            get
            {
                return m_subscriptionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SessionsDiagnosticsSummaryState SessionsDiagnosticsSummary
        {
            get
            {
                return m_sessionsDiagnosticsSummary;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionsDiagnosticsSummary, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionsDiagnosticsSummary = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> EnabledFlag
        {
            get
            {
                return m_enabledFlag;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabledFlag, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabledFlag = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverDiagnosticsSummary != null)
            {
                children.Add(m_serverDiagnosticsSummary);
            }

            if (m_samplingIntervalDiagnosticsArray != null)
            {
                children.Add(m_samplingIntervalDiagnosticsArray);
            }

            if (m_subscriptionDiagnosticsArray != null)
            {
                children.Add(m_subscriptionDiagnosticsArray);
            }

            if (m_sessionsDiagnosticsSummary != null)
            {
                children.Add(m_sessionsDiagnosticsSummary);
            }

            if (m_enabledFlag != null)
            {
                children.Add(m_enabledFlag);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerDiagnosticsSummary:
                {
                    if (createOrReplace)
                    {
                        if (ServerDiagnosticsSummary == null)
                        {
                            if (replacement == null)
                            {
                                ServerDiagnosticsSummary = new ServerDiagnosticsSummaryState(this);
                            }
                            else
                            {
                                ServerDiagnosticsSummary = (ServerDiagnosticsSummaryState)replacement;
                            }
                        }
                    }

                    instance = ServerDiagnosticsSummary;
                    break;
                }

                case Opc.Ua.BrowseNames.SamplingIntervalDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SamplingIntervalDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SamplingIntervalDiagnosticsArray = new SamplingIntervalDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SamplingIntervalDiagnosticsArray = (SamplingIntervalDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SamplingIntervalDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionDiagnosticsArray = new SubscriptionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SubscriptionDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionsDiagnosticsSummary:
                {
                    if (createOrReplace)
                    {
                        if (SessionsDiagnosticsSummary == null)
                        {
                            if (replacement == null)
                            {
                                SessionsDiagnosticsSummary = new SessionsDiagnosticsSummaryState(this);
                            }
                            else
                            {
                                SessionsDiagnosticsSummary = (SessionsDiagnosticsSummaryState)replacement;
                            }
                        }
                    }

                    instance = SessionsDiagnosticsSummary;
                    break;
                }

                case Opc.Ua.BrowseNames.EnabledFlag:
                {
                    if (createOrReplace)
                    {
                        if (EnabledFlag == null)
                        {
                            if (replacement == null)
                            {
                                EnabledFlag = new PropertyState<bool>(this);
                            }
                            else
                            {
                                EnabledFlag = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = EnabledFlag;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryState m_serverDiagnosticsSummary;
        private SamplingIntervalDiagnosticsArrayState m_samplingIntervalDiagnosticsArray;
        private SubscriptionDiagnosticsArrayState m_subscriptionDiagnosticsArray;
        private SessionsDiagnosticsSummaryState m_sessionsDiagnosticsSummary;
        private PropertyState<bool> m_enabledFlag;
        #endregion
    }
    #endif
    #endregion

    #region SessionsDiagnosticsSummaryState Class
    #if (!OPCUA_EXCLUDE_SessionsDiagnosticsSummaryState)
    /// <summary>
    /// Stores an instance of the SessionsDiagnosticsSummaryType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionsDiagnosticsSummaryState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionsDiagnosticsSummaryState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SessionsDiagnosticsSummaryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAFNlc3Npb25zRGlhZ25vc3RpY3NTdW1tYXJ5VHlwZUluc3RhbmNl" +
           "AQDqBwEA6gf/////AgAAABVgiQoCAAAAAAAXAAAAU2Vzc2lvbkRpYWdub3N0aWNzQXJyYXkBAOsHAC8B" +
           "AJQI6wcAAAEAYQMBAAAAAQH/////AAAAABVgiQoCAAAAAAAfAAAAU2Vzc2lvblNlY3VyaXR5RGlhZ25v" +
           "c3RpY3NBcnJheQEA7AcALwEAwwjsBwAAAQBkAwEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SessionDiagnosticsArrayState SessionDiagnosticsArray
        {
            get
            {
                return m_sessionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionDiagnosticsArray = value;
            }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsArrayState SessionSecurityDiagnosticsArray
        {
            get
            {
                return m_sessionSecurityDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionSecurityDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionSecurityDiagnosticsArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionDiagnosticsArray != null)
            {
                children.Add(m_sessionDiagnosticsArray);
            }

            if (m_sessionSecurityDiagnosticsArray != null)
            {
                children.Add(m_sessionSecurityDiagnosticsArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SessionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SessionDiagnosticsArray = new SessionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SessionDiagnosticsArray = (SessionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SessionDiagnosticsArray;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionSecurityDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SessionSecurityDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SessionSecurityDiagnosticsArray = new SessionSecurityDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SessionSecurityDiagnosticsArray = (SessionSecurityDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SessionSecurityDiagnosticsArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsArrayState m_sessionDiagnosticsArray;
        private SessionSecurityDiagnosticsArrayState m_sessionSecurityDiagnosticsArray;
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsObjectState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsObjectState)
    /// <summary>
    /// Stores an instance of the SessionDiagnosticsObjectType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsObjectState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionDiagnosticsObjectState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SessionDiagnosticsObjectType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJAAAAFNlc3Npb25EaWFnbm9zdGljc09iamVjdFR5cGVJbnN0YW5jZQEA" +
           "7QcBAO0H/////wMAAAAVYIkKAgAAAAAAEgAAAFNlc3Npb25EaWFnbm9zdGljcwEA7gcALwEAlQjuBwAA" +
           "AQBhA/////8BAf////8rAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBADsMAC8APzsMAAAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAsAAABTZXNzaW9uTmFtZQEAPAwALwA/PAwAAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAEQAAAENsaWVudERlc2NyaXB0aW9uAQA9DAAvAD89DAAAAQA0Af////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABTZXJ2ZXJVcmkBAD4MAC8APz4MAAAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAsAAABFbmRwb2ludFVybAEAPwwALwA/PwwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACQAA" +
           "AExvY2FsZUlkcwEAQAwALwA/QAwAAAEAJwEBAAAAAQH/////AAAAABVgiQoCAAAAAAAUAAAAQWN0dWFs" +
           "U2Vzc2lvblRpbWVvdXQBAEEMAC8AP0EMAAABACIB/////wEB/////wAAAAAVYIkKAgAAAAAAFgAAAE1h" +
           "eFJlc3BvbnNlTWVzc2FnZVNpemUBAEIMAC8AP0IMAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQA" +
           "AABDbGllbnRDb25uZWN0aW9uVGltZQEAQwwALwA/QwwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAVAAAAQ2xpZW50TGFzdENvbnRhY3RUaW1lAQBEDAAvAD9EDAAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABkAAABDdXJyZW50U3Vic2NyaXB0aW9uc0NvdW50AQBFDAAvAD9FDAAAAAf/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAaAAAAQ3VycmVudE1vbml0b3JlZEl0ZW1zQ291bnQBAEYMAC8AP0YMAAAAB///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAB0AAABDdXJyZW50UHVibGlzaFJlcXVlc3RzSW5RdWV1ZQEARwwA" +
           "LwA/RwwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFRvdGFsUmVxdWVzdENvdW50AQDCIgAv" +
           "AD/CIgAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABVbmF1dGhvcml6ZWRSZXF1ZXN0Q291" +
           "bnQBAHMuAC8AP3MuAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABSZWFkQ291bnQBAE8MAC8A" +
           "P08MAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAEhpc3RvcnlSZWFkQ291bnQBAFAMAC8A" +
           "P1AMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFdyaXRlQ291bnQBAFEMAC8AP1EMAAAB" +
           "AGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAEhpc3RvcnlVcGRhdGVDb3VudAEAUgwALwA/UgwA" +
           "AAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAQ2FsbENvdW50AQBTDAAvAD9TDAAAAQBnA///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABkAAABDcmVhdGVNb25pdG9yZWRJdGVtc0NvdW50AQBUDAAvAD9U" +
           "DAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABkAAABNb2RpZnlNb25pdG9yZWRJdGVtc0NvdW50" +
           "AQBVDAAvAD9VDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABYAAABTZXRNb25pdG9yaW5nTW9k" +
           "ZUNvdW50AQBWDAAvAD9WDAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABIAAABTZXRUcmlnZ2Vy" +
           "aW5nQ291bnQBAFcMAC8AP1cMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAERlbGV0ZU1v" +
           "bml0b3JlZEl0ZW1zQ291bnQBAFgMAC8AP1gMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAFwAA" +
           "AENyZWF0ZVN1YnNjcmlwdGlvbkNvdW50AQBZDAAvAD9ZDAAAAQBnA/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABcAAABNb2RpZnlTdWJzY3JpcHRpb25Db3VudAEAWgwALwA/WgwAAAEAZwP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAWAAAAU2V0UHVibGlzaGluZ01vZGVDb3VudAEAWwwALwA/WwwAAAEAZwP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAMAAAAUHVibGlzaENvdW50AQBcDAAvAD9cDAAAAQBnA/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAA4AAABSZXB1Ymxpc2hDb3VudAEAXQwALwA/XQwAAAEAZwP/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAaAAAAVHJhbnNmZXJTdWJzY3JpcHRpb25zQ291bnQBAF4MAC8AP14MAAABAGcD////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAGAAAAERlbGV0ZVN1YnNjcmlwdGlvbnNDb3VudAEAXwwALwA/XwwA" +
           "AAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQWRkTm9kZXNDb3VudAEAYAwALwA/YAwAAAEA" +
           "ZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQWRkUmVmZXJlbmNlc0NvdW50AQBhDAAvAD9hDAAA" +
           "AQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABAAAABEZWxldGVOb2Rlc0NvdW50AQBiDAAvAD9iDAAA" +
           "AQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABUAAABEZWxldGVSZWZlcmVuY2VzQ291bnQBAGMMAC8A" +
           "P2MMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAEJyb3dzZUNvdW50AQBkDAAvAD9kDAAA" +
           "AQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABCcm93c2VOZXh0Q291bnQBAGUMAC8AP2UMAAAB" +
           "AGcD/////wEB/////wAAAAAVYIkKAgAAAAAAIgAAAFRyYW5zbGF0ZUJyb3dzZVBhdGhzVG9Ob2RlSWRz" +
           "Q291bnQBAGYMAC8AP2YMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFF1ZXJ5Rmlyc3RD" +
           "b3VudAEAZwwALwA/ZwwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAUXVlcnlOZXh0Q291" +
           "bnQBAGgMAC8AP2gMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAFJlZ2lzdGVyTm9kZXND" +
           "b3VudAEAaQwALwA/aQwAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAUAAAAVW5yZWdpc3Rlck5v" +
           "ZGVzQ291bnQBAGoMAC8AP2oMAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGgAAAFNlc3Npb25T" +
           "ZWN1cml0eURpYWdub3N0aWNzAQDvBwAvAQDECO8HAAABAGQD/////wEB/////wkAAAAVYIkKAgAAAAAA" +
           "CQAAAFNlc3Npb25JZAEAawwALwA/awwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAENsaWVu" +
           "dFVzZXJJZE9mU2Vzc2lvbgEAbAwALwA/bAwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAENs" +
           "aWVudFVzZXJJZEhpc3RvcnkBAG0MAC8AP20MAAAADAEAAAABAf////8AAAAAFWCJCgIAAAAAABcAAABB" +
           "dXRoZW50aWNhdGlvbk1lY2hhbmlzbQEAbgwALwA/bgwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CAAAAEVuY29kaW5nAQBvDAAvAD9vDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVHJhbnNw" +
           "b3J0UHJvdG9jb2wBAHAMAC8AP3AMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZWN1cml0" +
           "eU1vZGUBAHEMAC8AP3EMAAABAC4B/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9s" +
           "aWN5VXJpAQByDAAvAD9yDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlm" +
           "aWNhdGUBAHMMAC8AP3MMAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAABwAAABTdWJzY3JpcHRpb25E" +
           "aWFnbm9zdGljc0FycmF5AQDwBwAvAQB7CPAHAAABAGoDAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public SessionDiagnosticsVariableState SessionDiagnostics
        {
            get
            {
                return m_sessionDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionDiagnostics = value;
            }
        }

        /// <remarks />
        public SessionSecurityDiagnosticsState SessionSecurityDiagnostics
        {
            get
            {
                return m_sessionSecurityDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionSecurityDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionSecurityDiagnostics = value;
            }
        }

        /// <remarks />
        public SubscriptionDiagnosticsArrayState SubscriptionDiagnosticsArray
        {
            get
            {
                return m_subscriptionDiagnosticsArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionDiagnosticsArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionDiagnosticsArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionDiagnostics != null)
            {
                children.Add(m_sessionDiagnostics);
            }

            if (m_sessionSecurityDiagnostics != null)
            {
                children.Add(m_sessionSecurityDiagnostics);
            }

            if (m_subscriptionDiagnosticsArray != null)
            {
                children.Add(m_subscriptionDiagnosticsArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (SessionDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                SessionDiagnostics = new SessionDiagnosticsVariableState(this);
                            }
                            else
                            {
                                SessionDiagnostics = (SessionDiagnosticsVariableState)replacement;
                            }
                        }
                    }

                    instance = SessionDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionSecurityDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (SessionSecurityDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                SessionSecurityDiagnostics = new SessionSecurityDiagnosticsState(this);
                            }
                            else
                            {
                                SessionSecurityDiagnostics = (SessionSecurityDiagnosticsState)replacement;
                            }
                        }
                    }

                    instance = SessionSecurityDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionDiagnosticsArray:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionDiagnosticsArray == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionDiagnosticsArray = new SubscriptionDiagnosticsArrayState(this);
                            }
                            else
                            {
                                SubscriptionDiagnosticsArray = (SubscriptionDiagnosticsArrayState)replacement;
                            }
                        }
                    }

                    instance = SubscriptionDiagnosticsArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private SessionDiagnosticsVariableState m_sessionDiagnostics;
        private SessionSecurityDiagnosticsState m_sessionSecurityDiagnostics;
        private SubscriptionDiagnosticsArrayState m_subscriptionDiagnosticsArray;
        #endregion
    }
    #endif
    #endregion

    #region VendorServerInfoState Class
    #if (!OPCUA_EXCLUDE_VendorServerInfoState)
    /// <summary>
    /// Stores an instance of the VendorServerInfoType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class VendorServerInfoState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public VendorServerInfoState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.VendorServerInfoType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAFZlbmRvclNlcnZlckluZm9UeXBlSW5zdGFuY2UBAPEHAQDxB///" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ServerRedundancyState Class
    #if (!OPCUA_EXCLUDE_ServerRedundancyState)
    /// <summary>
    /// Stores an instance of the ServerRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerRedundancyState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAFNlcnZlclJlZHVuZGFuY3lUeXBlSW5zdGFuY2UBAPIHAQDyB///" +
           "//8BAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAEA8wcALgBE8wcAAAEAUwP/////AQH/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<RedundancySupport> RedundancySupport
        {
            get
            {
                return m_redundancySupport;
            }

            set
            {
                if (!Object.ReferenceEquals(m_redundancySupport, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_redundancySupport = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_redundancySupport != null)
            {
                children.Add(m_redundancySupport);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.RedundancySupport:
                {
                    if (createOrReplace)
                    {
                        if (RedundancySupport == null)
                        {
                            if (replacement == null)
                            {
                                RedundancySupport = new PropertyState<RedundancySupport>(this);
                            }
                            else
                            {
                                RedundancySupport = (PropertyState<RedundancySupport>)replacement;
                            }
                        }
                    }

                    instance = RedundancySupport;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<RedundancySupport> m_redundancySupport;
        #endregion
    }
    #endif
    #endregion

    #region TransparentRedundancyState Class
    #if (!OPCUA_EXCLUDE_TransparentRedundancyState)
    /// <summary>
    /// Stores an instance of the TransparentRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransparentRedundancyState : ServerRedundancyState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TransparentRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransparentRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAFRyYW5zcGFyZW50UmVkdW5kYW5jeVR5cGVJbnN0YW5jZQEA9AcB" +
           "APQH/////wMAAAAVYIkKAgAAAAAAEQAAAFJlZHVuZGFuY3lTdXBwb3J0AQB0DAAuAER0DAAAAQBTA///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABDdXJyZW50U2VydmVySWQBAPUHAC4ARPUHAAAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABQAAABSZWR1bmRhbnRTZXJ2ZXJBcnJheQEA9gcALgBE9gcAAAEAVQMB" +
           "AAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> CurrentServerId
        {
            get
            {
                return m_currentServerId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentServerId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentServerId = value;
            }
        }

        /// <remarks />
        public PropertyState<RedundantServerDataType[]> RedundantServerArray
        {
            get
            {
                return m_redundantServerArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_redundantServerArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_redundantServerArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_currentServerId != null)
            {
                children.Add(m_currentServerId);
            }

            if (m_redundantServerArray != null)
            {
                children.Add(m_redundantServerArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentServerId:
                {
                    if (createOrReplace)
                    {
                        if (CurrentServerId == null)
                        {
                            if (replacement == null)
                            {
                                CurrentServerId = new PropertyState<string>(this);
                            }
                            else
                            {
                                CurrentServerId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CurrentServerId;
                    break;
                }

                case Opc.Ua.BrowseNames.RedundantServerArray:
                {
                    if (createOrReplace)
                    {
                        if (RedundantServerArray == null)
                        {
                            if (replacement == null)
                            {
                                RedundantServerArray = new PropertyState<RedundantServerDataType[]>(this);
                            }
                            else
                            {
                                RedundantServerArray = (PropertyState<RedundantServerDataType[]>)replacement;
                            }
                        }
                    }

                    instance = RedundantServerArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_currentServerId;
        private PropertyState<RedundantServerDataType[]> m_redundantServerArray;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentRedundancyState)
    /// <summary>
    /// Stores an instance of the NonTransparentRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentRedundancyState : ServerRedundancyState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonTransparentRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJAAAAE5vblRyYW5zcGFyZW50UmVkdW5kYW5jeVR5cGVJbnN0YW5jZQEA" +
           "9wcBAPcH/////wIAAAAVYIkKAgAAAAAAEQAAAFJlZHVuZGFuY3lTdXBwb3J0AQB1DAAuAER1DAAAAQBT" +
           "A/////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABTZXJ2ZXJVcmlBcnJheQEA+AcALgBE+AcAAAAMAQAA" +
           "AAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string[]> ServerUriArray
        {
            get
            {
                return m_serverUriArray;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUriArray, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUriArray = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverUriArray != null)
            {
                children.Add(m_serverUriArray);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerUriArray:
                {
                    if (createOrReplace)
                    {
                        if (ServerUriArray == null)
                        {
                            if (replacement == null)
                            {
                                ServerUriArray = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerUriArray = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerUriArray;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string[]> m_serverUriArray;
        #endregion
    }
    #endif
    #endregion

    #region NonTransparentNetworkRedundancyState Class
    #if (!OPCUA_EXCLUDE_NonTransparentNetworkRedundancyState)
    /// <summary>
    /// Stores an instance of the NonTransparentNetworkRedundancyType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonTransparentNetworkRedundancyState : NonTransparentRedundancyState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonTransparentNetworkRedundancyState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonTransparentNetworkRedundancyType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKwAAAE5vblRyYW5zcGFyZW50TmV0d29ya1JlZHVuZGFuY3lUeXBlSW5z" +
           "dGFuY2UBAKkuAQCpLv////8DAAAAFWCJCgIAAAAAABEAAABSZWR1bmRhbmN5U3VwcG9ydAEAqi4ALgBE" +
           "qi4AAAEAUwP/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAU2VydmVyVXJpQXJyYXkBAKsuAC4ARKsu" +
           "AAAADAEAAAABAf////8AAAAAFWCJCgIAAAAAABMAAABTZXJ2ZXJOZXR3b3JrR3JvdXBzAQCsLgAuAESs" +
           "LgAAAQCoLgEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NetworkGroupDataType[]> ServerNetworkGroups
        {
            get
            {
                return m_serverNetworkGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverNetworkGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverNetworkGroups = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverNetworkGroups != null)
            {
                children.Add(m_serverNetworkGroups);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerNetworkGroups:
                {
                    if (createOrReplace)
                    {
                        if (ServerNetworkGroups == null)
                        {
                            if (replacement == null)
                            {
                                ServerNetworkGroups = new PropertyState<NetworkGroupDataType[]>(this);
                            }
                            else
                            {
                                ServerNetworkGroups = (PropertyState<NetworkGroupDataType[]>)replacement;
                            }
                        }
                    }

                    instance = ServerNetworkGroups;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NetworkGroupDataType[]> m_serverNetworkGroups;
        #endregion
    }
    #endif
    #endregion

    #region OperationLimitsState Class
    #if (!OPCUA_EXCLUDE_OperationLimitsState)
    /// <summary>
    /// Stores an instance of the OperationLimitsType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OperationLimitsState : FolderState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OperationLimitsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OperationLimitsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MaxNodesPerRead != null)
            {
                MaxNodesPerRead.Initialize(context, MaxNodesPerRead_InitializationString);
            }

            if (MaxNodesPerHistoryReadData != null)
            {
                MaxNodesPerHistoryReadData.Initialize(context, MaxNodesPerHistoryReadData_InitializationString);
            }

            if (MaxNodesPerHistoryReadEvents != null)
            {
                MaxNodesPerHistoryReadEvents.Initialize(context, MaxNodesPerHistoryReadEvents_InitializationString);
            }

            if (MaxNodesPerWrite != null)
            {
                MaxNodesPerWrite.Initialize(context, MaxNodesPerWrite_InitializationString);
            }

            if (MaxNodesPerHistoryUpdateData != null)
            {
                MaxNodesPerHistoryUpdateData.Initialize(context, MaxNodesPerHistoryUpdateData_InitializationString);
            }

            if (MaxNodesPerHistoryUpdateEvents != null)
            {
                MaxNodesPerHistoryUpdateEvents.Initialize(context, MaxNodesPerHistoryUpdateEvents_InitializationString);
            }

            if (MaxNodesPerMethodCall != null)
            {
                MaxNodesPerMethodCall.Initialize(context, MaxNodesPerMethodCall_InitializationString);
            }

            if (MaxNodesPerBrowse != null)
            {
                MaxNodesPerBrowse.Initialize(context, MaxNodesPerBrowse_InitializationString);
            }

            if (MaxNodesPerRegisterNodes != null)
            {
                MaxNodesPerRegisterNodes.Initialize(context, MaxNodesPerRegisterNodes_InitializationString);
            }

            if (MaxNodesPerTranslateBrowsePathsToNodeIds != null)
            {
                MaxNodesPerTranslateBrowsePathsToNodeIds.Initialize(context, MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString);
            }

            if (MaxNodesPerNodeManagement != null)
            {
                MaxNodesPerNodeManagement.Initialize(context, MaxNodesPerNodeManagement_InitializationString);
            }

            if (MaxMonitoredItemsPerCall != null)
            {
                MaxMonitoredItemsPerCall.Initialize(context, MaxMonitoredItemsPerCall_InitializationString);
            }
        }

        #region Initialization String
        private const string MaxNodesPerRead_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heE5vZGVzUGVyUmVhZAEALS0ALgBELS0AAAAH/////wEB////" +
           "/wAAAAA=";

        private const string MaxNodesPerHistoryReadData_InitializationString =
           "//////////8VYIkKAgAAAAAAGgAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWREYXRhAQCBLwAuAESBLwAA" +
           "AAf/////AQH/////AAAAAA==";

        private const string MaxNodesPerHistoryReadEvents_InitializationString =
           "//////////8VYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWRFdmVudHMBAIIvAC4ARIIv" +
           "AAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerWrite_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAE1heE5vZGVzUGVyV3JpdGUBAC8tAC4ARC8tAAAAB/////8BAf//" +
           "//8AAAAA";

        private const string MaxNodesPerHistoryUpdateData_InitializationString =
           "//////////8VYIkKAgAAAAAAHAAAAE1heE5vZGVzUGVySGlzdG9yeVVwZGF0ZURhdGEBAIMvAC4ARIMv" +
           "AAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerHistoryUpdateEvents_InitializationString =
           "//////////8VYIkKAgAAAAAAHgAAAE1heE5vZGVzUGVySGlzdG9yeVVwZGF0ZUV2ZW50cwEAhC8ALgBE" +
           "hC8AAAAH/////wEB/////wAAAAA=";

        private const string MaxNodesPerMethodCall_InitializationString =
           "//////////8VYIkKAgAAAAAAFQAAAE1heE5vZGVzUGVyTWV0aG9kQ2FsbAEAMS0ALgBEMS0AAAAH////" +
           "/wEB/////wAAAAA=";

        private const string MaxNodesPerBrowse_InitializationString =
           "//////////8VYIkKAgAAAAAAEQAAAE1heE5vZGVzUGVyQnJvd3NlAQAyLQAuAEQyLQAAAAf/////AQH/" +
           "////AAAAAA==";

        private const string MaxNodesPerRegisterNodes_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heE5vZGVzUGVyUmVnaXN0ZXJOb2RlcwEAMy0ALgBEMy0AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string MaxNodesPerTranslateBrowsePathsToNodeIds_InitializationString =
           "//////////8VYIkKAgAAAAAAKAAAAE1heE5vZGVzUGVyVHJhbnNsYXRlQnJvd3NlUGF0aHNUb05vZGVJ" +
           "ZHMBADQtAC4ARDQtAAAAB/////8BAf////8AAAAA";

        private const string MaxNodesPerNodeManagement_InitializationString =
           "//////////8VYIkKAgAAAAAAGQAAAE1heE5vZGVzUGVyTm9kZU1hbmFnZW1lbnQBADUtAC4ARDUtAAAA" +
           "B/////8BAf////8AAAAA";

        private const string MaxMonitoredItemsPerCall_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAE1heE1vbml0b3JlZEl0ZW1zUGVyQ2FsbAEANi0ALgBENi0AAAAH" +
           "/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGwAAAE9wZXJhdGlvbkxpbWl0c1R5cGVJbnN0YW5jZQEALC0BACwt////" +
           "/wwAAAAVYIkKAgAAAAAADwAAAE1heE5vZGVzUGVyUmVhZAEALS0ALgBELS0AAAAH/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAGgAAAE1heE5vZGVzUGVySGlzdG9yeVJlYWREYXRhAQCBLwAuAESBLwAAAAf/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAcAAAATWF4Tm9kZXNQZXJIaXN0b3J5UmVhZEV2ZW50cwEAgi8ALgBE" +
           "gi8AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAE1heE5vZGVzUGVyV3JpdGUBAC8tAC4ARC8t" +
           "AAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABwAAABNYXhOb2Rlc1Blckhpc3RvcnlVcGRhdGVEYXRh" +
           "AQCDLwAuAESDLwAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAeAAAATWF4Tm9kZXNQZXJIaXN0b3J5" +
           "VXBkYXRlRXZlbnRzAQCELwAuAESELwAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAVAAAATWF4Tm9k" +
           "ZXNQZXJNZXRob2RDYWxsAQAxLQAuAEQxLQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAARAAAATWF4" +
           "Tm9kZXNQZXJCcm93c2UBADItAC4ARDItAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABNYXhO" +
           "b2Rlc1BlclJlZ2lzdGVyTm9kZXMBADMtAC4ARDMtAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAACgA" +
           "AABNYXhOb2Rlc1BlclRyYW5zbGF0ZUJyb3dzZVBhdGhzVG9Ob2RlSWRzAQA0LQAuAEQ0LQAAAAf/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAZAAAATWF4Tm9kZXNQZXJOb2RlTWFuYWdlbWVudAEANS0ALgBENS0A" +
           "AAAH/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAE1heE1vbml0b3JlZEl0ZW1zUGVyQ2FsbAEANi0A" +
           "LgBENi0AAAAH/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> MaxNodesPerRead
        {
            get
            {
                return m_maxNodesPerRead;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerRead, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerRead = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryReadData
        {
            get
            {
                return m_maxNodesPerHistoryReadData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryReadData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryReadData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryReadEvents
        {
            get
            {
                return m_maxNodesPerHistoryReadEvents;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryReadEvents, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryReadEvents = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerWrite
        {
            get
            {
                return m_maxNodesPerWrite;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerWrite, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerWrite = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryUpdateData
        {
            get
            {
                return m_maxNodesPerHistoryUpdateData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryUpdateData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryUpdateData = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerHistoryUpdateEvents
        {
            get
            {
                return m_maxNodesPerHistoryUpdateEvents;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerHistoryUpdateEvents, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerHistoryUpdateEvents = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerMethodCall
        {
            get
            {
                return m_maxNodesPerMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerMethodCall = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerBrowse
        {
            get
            {
                return m_maxNodesPerBrowse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerBrowse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerBrowse = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerRegisterNodes
        {
            get
            {
                return m_maxNodesPerRegisterNodes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerRegisterNodes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerRegisterNodes = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerTranslateBrowsePathsToNodeIds
        {
            get
            {
                return m_maxNodesPerTranslateBrowsePathsToNodeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerTranslateBrowsePathsToNodeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerTranslateBrowsePathsToNodeIds = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxNodesPerNodeManagement
        {
            get
            {
                return m_maxNodesPerNodeManagement;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNodesPerNodeManagement, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNodesPerNodeManagement = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxMonitoredItemsPerCall
        {
            get
            {
                return m_maxMonitoredItemsPerCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxMonitoredItemsPerCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxMonitoredItemsPerCall = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_maxNodesPerRead != null)
            {
                children.Add(m_maxNodesPerRead);
            }

            if (m_maxNodesPerHistoryReadData != null)
            {
                children.Add(m_maxNodesPerHistoryReadData);
            }

            if (m_maxNodesPerHistoryReadEvents != null)
            {
                children.Add(m_maxNodesPerHistoryReadEvents);
            }

            if (m_maxNodesPerWrite != null)
            {
                children.Add(m_maxNodesPerWrite);
            }

            if (m_maxNodesPerHistoryUpdateData != null)
            {
                children.Add(m_maxNodesPerHistoryUpdateData);
            }

            if (m_maxNodesPerHistoryUpdateEvents != null)
            {
                children.Add(m_maxNodesPerHistoryUpdateEvents);
            }

            if (m_maxNodesPerMethodCall != null)
            {
                children.Add(m_maxNodesPerMethodCall);
            }

            if (m_maxNodesPerBrowse != null)
            {
                children.Add(m_maxNodesPerBrowse);
            }

            if (m_maxNodesPerRegisterNodes != null)
            {
                children.Add(m_maxNodesPerRegisterNodes);
            }

            if (m_maxNodesPerTranslateBrowsePathsToNodeIds != null)
            {
                children.Add(m_maxNodesPerTranslateBrowsePathsToNodeIds);
            }

            if (m_maxNodesPerNodeManagement != null)
            {
                children.Add(m_maxNodesPerNodeManagement);
            }

            if (m_maxMonitoredItemsPerCall != null)
            {
                children.Add(m_maxMonitoredItemsPerCall);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MaxNodesPerRead:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerRead == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerRead = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerRead = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerRead;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryReadData:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryReadData == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryReadData = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryReadData = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryReadData;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryReadEvents:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryReadEvents == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryReadEvents = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryReadEvents = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryReadEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerWrite:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerWrite == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerWrite = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerWrite = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerWrite;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryUpdateData:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryUpdateData == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryUpdateData = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryUpdateData = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryUpdateData;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerHistoryUpdateEvents:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerHistoryUpdateEvents == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerHistoryUpdateEvents = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerHistoryUpdateEvents = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerHistoryUpdateEvents;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerMethodCall = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerMethodCall = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerBrowse:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerBrowse == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerBrowse = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerBrowse = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerBrowse;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerRegisterNodes:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerRegisterNodes == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerRegisterNodes = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerRegisterNodes = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerRegisterNodes;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerTranslateBrowsePathsToNodeIds:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerTranslateBrowsePathsToNodeIds == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerTranslateBrowsePathsToNodeIds = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerTranslateBrowsePathsToNodeIds = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerTranslateBrowsePathsToNodeIds;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNodesPerNodeManagement:
                {
                    if (createOrReplace)
                    {
                        if (MaxNodesPerNodeManagement == null)
                        {
                            if (replacement == null)
                            {
                                MaxNodesPerNodeManagement = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxNodesPerNodeManagement = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNodesPerNodeManagement;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxMonitoredItemsPerCall:
                {
                    if (createOrReplace)
                    {
                        if (MaxMonitoredItemsPerCall == null)
                        {
                            if (replacement == null)
                            {
                                MaxMonitoredItemsPerCall = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxMonitoredItemsPerCall = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxMonitoredItemsPerCall;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_maxNodesPerRead;
        private PropertyState<uint> m_maxNodesPerHistoryReadData;
        private PropertyState<uint> m_maxNodesPerHistoryReadEvents;
        private PropertyState<uint> m_maxNodesPerWrite;
        private PropertyState<uint> m_maxNodesPerHistoryUpdateData;
        private PropertyState<uint> m_maxNodesPerHistoryUpdateEvents;
        private PropertyState<uint> m_maxNodesPerMethodCall;
        private PropertyState<uint> m_maxNodesPerBrowse;
        private PropertyState<uint> m_maxNodesPerRegisterNodes;
        private PropertyState<uint> m_maxNodesPerTranslateBrowsePathsToNodeIds;
        private PropertyState<uint> m_maxNodesPerNodeManagement;
        private PropertyState<uint> m_maxMonitoredItemsPerCall;
        #endregion
    }
    #endif
    #endregion

    #region FileState Class
    #if (!OPCUA_EXCLUDE_FileState)
    /// <summary>
    /// Stores an instance of the FileType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FileState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (MimeType != null)
            {
                MimeType.Initialize(context, MimeType_InitializationString);
            }
        }

        #region Initialization String
        private const string MimeType_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAE1pbWVUeXBlAQAdNAAuAEQdNAAAAAz/////AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAEAAAAEZpbGVUeXBlSW5zdGFuY2UBADctAQA3Lf////8LAAAAFWCJCgIA" +
           "AAAAAAQAAABTaXplAQA4LQAuAEQ4LQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAV3JpdGFi" +
           "bGUBAI4xAC4ARI4xAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFibGUBAI8x" +
           "AC4ARI8xAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBADstAC4ARDstAAAA" +
           "Bf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNaW1lVHlwZQEAHTQALgBEHTQAAAAM/////wEB////" +
           "/wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BADwtAC8BADwtPC0AAAEB/////wIAAAAVYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQA9LQAuAEQ9LQAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD/////wAAAAAA" +
           "AQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAD4tAC4ARD4tAACW" +
           "AQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAABQAAAENsb3NlAQA/LQAvAQA/LT8tAAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEAQC0ALgBEQC0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEA" +
           "KAEBAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEAQS0ALwEAQS1BLQAAAQH/////AgAAABVg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEItAC4AREItAACWAgAAAAEAKgEBGQAAAAoAAABGaWxl" +
           "SGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEB////" +
           "/wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAQy0ALgBEQy0AAJYBAAAAAQAqAQETAAAA" +
           "BAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBAEQt" +
           "AC8BAEQtRC0AAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBFLQAuAERFLQAA" +
           "lgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD///" +
           "//8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEYtAC8BAEYt" +
           "Ri0AAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBHLQAuAERHLQAAlgEAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBAEgtAC4AREgtAACWAQAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ" +
           "/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3NpdGlvbgEASS0ALwEA" +
           "SS1JLQAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEotAC4AREotAACWAgAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf//" +
           "//8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ulong> Size
        {
            get
            {
                return m_size;
            }

            set
            {
                if (!Object.ReferenceEquals(m_size, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_size = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Writable
        {
            get
            {
                return m_writable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writable = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UserWritable
        {
            get
            {
                return m_userWritable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userWritable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userWritable = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> OpenCount
        {
            get
            {
                return m_openCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openCount = value;
            }
        }

        /// <remarks />
        public PropertyState<string> MimeType
        {
            get
            {
                return m_mimeType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_mimeType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_mimeType = value;
            }
        }

        /// <remarks />
        public OpenMethodState Open
        {
            get
            {
                return m_openMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openMethod = value;
            }
        }

        /// <remarks />
        public CloseMethodState Close
        {
            get
            {
                return m_closeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeMethod = value;
            }
        }

        /// <remarks />
        public ReadMethodState Read
        {
            get
            {
                return m_readMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_readMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_readMethod = value;
            }
        }

        /// <remarks />
        public WriteMethodState Write
        {
            get
            {
                return m_writeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writeMethod = value;
            }
        }

        /// <remarks />
        public GetPositionMethodState GetPosition
        {
            get
            {
                return m_getPositionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getPositionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getPositionMethod = value;
            }
        }

        /// <remarks />
        public SetPositionMethodState SetPosition
        {
            get
            {
                return m_setPositionMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setPositionMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setPositionMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_size != null)
            {
                children.Add(m_size);
            }

            if (m_writable != null)
            {
                children.Add(m_writable);
            }

            if (m_userWritable != null)
            {
                children.Add(m_userWritable);
            }

            if (m_openCount != null)
            {
                children.Add(m_openCount);
            }

            if (m_mimeType != null)
            {
                children.Add(m_mimeType);
            }

            if (m_openMethod != null)
            {
                children.Add(m_openMethod);
            }

            if (m_closeMethod != null)
            {
                children.Add(m_closeMethod);
            }

            if (m_readMethod != null)
            {
                children.Add(m_readMethod);
            }

            if (m_writeMethod != null)
            {
                children.Add(m_writeMethod);
            }

            if (m_getPositionMethod != null)
            {
                children.Add(m_getPositionMethod);
            }

            if (m_setPositionMethod != null)
            {
                children.Add(m_setPositionMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Size:
                {
                    if (createOrReplace)
                    {
                        if (Size == null)
                        {
                            if (replacement == null)
                            {
                                Size = new PropertyState<ulong>(this);
                            }
                            else
                            {
                                Size = (PropertyState<ulong>)replacement;
                            }
                        }
                    }

                    instance = Size;
                    break;
                }

                case Opc.Ua.BrowseNames.Writable:
                {
                    if (createOrReplace)
                    {
                        if (Writable == null)
                        {
                            if (replacement == null)
                            {
                                Writable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Writable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Writable;
                    break;
                }

                case Opc.Ua.BrowseNames.UserWritable:
                {
                    if (createOrReplace)
                    {
                        if (UserWritable == null)
                        {
                            if (replacement == null)
                            {
                                UserWritable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UserWritable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UserWritable;
                    break;
                }

                case Opc.Ua.BrowseNames.OpenCount:
                {
                    if (createOrReplace)
                    {
                        if (OpenCount == null)
                        {
                            if (replacement == null)
                            {
                                OpenCount = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                OpenCount = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = OpenCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MimeType:
                {
                    if (createOrReplace)
                    {
                        if (MimeType == null)
                        {
                            if (replacement == null)
                            {
                                MimeType = new PropertyState<string>(this);
                            }
                            else
                            {
                                MimeType = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = MimeType;
                    break;
                }

                case Opc.Ua.BrowseNames.Open:
                {
                    if (createOrReplace)
                    {
                        if (Open == null)
                        {
                            if (replacement == null)
                            {
                                Open = new OpenMethodState(this);
                            }
                            else
                            {
                                Open = (OpenMethodState)replacement;
                            }
                        }
                    }

                    instance = Open;
                    break;
                }

                case Opc.Ua.BrowseNames.Close:
                {
                    if (createOrReplace)
                    {
                        if (Close == null)
                        {
                            if (replacement == null)
                            {
                                Close = new CloseMethodState(this);
                            }
                            else
                            {
                                Close = (CloseMethodState)replacement;
                            }
                        }
                    }

                    instance = Close;
                    break;
                }

                case Opc.Ua.BrowseNames.Read:
                {
                    if (createOrReplace)
                    {
                        if (Read == null)
                        {
                            if (replacement == null)
                            {
                                Read = new ReadMethodState(this);
                            }
                            else
                            {
                                Read = (ReadMethodState)replacement;
                            }
                        }
                    }

                    instance = Read;
                    break;
                }

                case Opc.Ua.BrowseNames.Write:
                {
                    if (createOrReplace)
                    {
                        if (Write == null)
                        {
                            if (replacement == null)
                            {
                                Write = new WriteMethodState(this);
                            }
                            else
                            {
                                Write = (WriteMethodState)replacement;
                            }
                        }
                    }

                    instance = Write;
                    break;
                }

                case Opc.Ua.BrowseNames.GetPosition:
                {
                    if (createOrReplace)
                    {
                        if (GetPosition == null)
                        {
                            if (replacement == null)
                            {
                                GetPosition = new GetPositionMethodState(this);
                            }
                            else
                            {
                                GetPosition = (GetPositionMethodState)replacement;
                            }
                        }
                    }

                    instance = GetPosition;
                    break;
                }

                case Opc.Ua.BrowseNames.SetPosition:
                {
                    if (createOrReplace)
                    {
                        if (SetPosition == null)
                        {
                            if (replacement == null)
                            {
                                SetPosition = new SetPositionMethodState(this);
                            }
                            else
                            {
                                SetPosition = (SetPositionMethodState)replacement;
                            }
                        }
                    }

                    instance = SetPosition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ulong> m_size;
        private PropertyState<bool> m_writable;
        private PropertyState<bool> m_userWritable;
        private PropertyState<ushort> m_openCount;
        private PropertyState<string> m_mimeType;
        private OpenMethodState m_openMethod;
        private CloseMethodState m_closeMethod;
        private ReadMethodState m_readMethod;
        private WriteMethodState m_writeMethod;
        private GetPositionMethodState m_getPositionMethod;
        private SetPositionMethodState m_setPositionMethod;
        #endregion
    }
    #endif
    #endregion

    #region CreateDirectoryMethodState Class
    #if (!OPCUA_EXCLUDE_CreateDirectoryMethodState)
    /// <summary>
    /// Stores an instance of the CreateDirectoryMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateDirectoryMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CreateDirectoryMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateDirectoryMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAENyZWF0ZURpcmVjdG9yeU1ldGhvZFR5cGUBAB40AC8BAB40HjQA" +
           "AAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAfNAAuAEQfNAAAlgEAAAABACoB" +
           "ARwAAAANAAAARGlyZWN0b3J5TmFtZQAM/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAA" +
           "AA8AAABPdXRwdXRBcmd1bWVudHMBACA0AC4ARCA0AACWAQAAAAEAKgEBHgAAAA8AAABEaXJlY3RvcnlO" +
           "b2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CreateDirectoryMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            string directoryName = (string)_inputArguments[0];

            NodeId directoryNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    directoryName,
                    ref directoryNodeId);
            }

            _outputArguments[0] = directoryNodeId;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CreateDirectoryMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        string directoryName,
        ref NodeId directoryNodeId);
    #endif
    #endregion

    #region CreateFileMethodState Class
    #if (!OPCUA_EXCLUDE_CreateFileMethodState)
    /// <summary>
    /// Stores an instance of the CreateFileMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateFileMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CreateFileMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateFileMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAENyZWF0ZUZpbGVNZXRob2RUeXBlAQAhNAAvAQAhNCE0AAABAf//" +
           "//8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIjQALgBEIjQAAJYCAAAAAQAqAQEXAAAA" +
           "CAAAAEZpbGVOYW1lAAz/////AAAAAAABACoBAR4AAAAPAAAAUmVxdWVzdEZpbGVPcGVuAAH/////AAAA" +
           "AAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAIzQALgBEIzQA" +
           "AJYCAAAAAQAqAQEZAAAACgAAAEZpbGVOb2RlSWQAEf////8AAAAAAAEAKgEBGQAAAAoAAABGaWxlSGFu" +
           "ZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CreateFileMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            string fileName = (string)_inputArguments[0];
            bool requestFileOpen = (bool)_inputArguments[1];

            NodeId fileNodeId = (NodeId)_outputArguments[0];
            uint fileHandle = (uint)_outputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileName,
                    requestFileOpen,
                    ref fileNodeId,
                    ref fileHandle);
            }

            _outputArguments[0] = fileNodeId;
            _outputArguments[1] = fileHandle;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CreateFileMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        string fileName,
        bool requestFileOpen,
        ref NodeId fileNodeId,
        ref uint fileHandle);
    #endif
    #endregion

    #region DeleteFileMethodState Class
    #if (!OPCUA_EXCLUDE_DeleteFileMethodState)
    /// <summary>
    /// Stores an instance of the DeleteFileMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeleteFileMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DeleteFileMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new DeleteFileMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAERlbGV0ZUZpbGVNZXRob2RUeXBlAQAkNAAvAQAkNCQ0AAABAf//" +
           "//8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJTQALgBEJTQAAJYBAAAAAQAqAQEdAAAA" +
           "DgAAAE9iamVjdFRvRGVsZXRlABH/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public DeleteFileMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId objectToDelete = (NodeId)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    objectToDelete);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult DeleteFileMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        NodeId objectToDelete);
    #endif
    #endregion

    #region MoveOrCopyMethodState Class
    #if (!OPCUA_EXCLUDE_MoveOrCopyMethodState)
    /// <summary>
    /// Stores an instance of the MoveOrCopyMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MoveOrCopyMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MoveOrCopyMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new MoveOrCopyMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAE1vdmVPckNvcHlNZXRob2RUeXBlAQAmNAAvAQAmNCY0AAABAf//" +
           "//8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJzQALgBEJzQAAJYEAAAAAQAqAQEhAAAA" +
           "EgAAAE9iamVjdFRvTW92ZU9yQ29weQAR/////wAAAAAAAQAqAQEeAAAADwAAAFRhcmdldERpcmVjdG9y" +
           "eQAR/////wAAAAAAAQAqAQEZAAAACgAAAENyZWF0ZUNvcHkAAf////8AAAAAAAEAKgEBFgAAAAcAAABO" +
           "ZXdOYW1lAAz/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3Vt" +
           "ZW50cwEAKDQALgBEKDQAAJYBAAAAAQAqAQEYAAAACQAAAE5ld05vZGVJZAAR/////wAAAAAAAQAoAQEA" +
           "AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public MoveOrCopyMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId objectToMoveOrCopy = (NodeId)_inputArguments[0];
            NodeId targetDirectory = (NodeId)_inputArguments[1];
            bool createCopy = (bool)_inputArguments[2];
            string newName = (string)_inputArguments[3];

            NodeId newNodeId = (NodeId)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    objectToMoveOrCopy,
                    targetDirectory,
                    createCopy,
                    newName,
                    ref newNodeId);
            }

            _outputArguments[0] = newNodeId;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult MoveOrCopyMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        NodeId objectToMoveOrCopy,
        NodeId targetDirectory,
        bool createCopy,
        string newName,
        ref NodeId newNodeId);
    #endif
    #endregion

    #region FileDirectoryState Class
    #if (!OPCUA_EXCLUDE_FileDirectoryState)
    /// <summary>
    /// Stores an instance of the FileDirectoryType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FileDirectoryState : FolderState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FileDirectoryState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FileDirectoryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGQAAAEZpbGVEaXJlY3RvcnlUeXBlSW5zdGFuY2UBACk0AQApNP////8E" +
           "AAAABGGCCgQAAAAAAA8AAABDcmVhdGVEaXJlY3RvcnkBAEs0AC8BAEs0SzQAAAEB/////wIAAAAVYKkK" +
           "AgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBMNAAuAERMNAAAlgEAAAABACoBARwAAAANAAAARGlyZWN0" +
           "b3J5TmFtZQAM/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1" +
           "bWVudHMBAE00AC4ARE00AACWAQAAAAEAKgEBHgAAAA8AAABEaXJlY3RvcnlOb2RlSWQAEf////8AAAAA" +
           "AAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAKAAAAQ3JlYXRlRmlsZQEATjQALwEATjRONAAAAQH/" +
           "////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAE80AC4ARE80AACWAgAAAAEAKgEBFwAA" +
           "AAgAAABGaWxlTmFtZQAM/////wAAAAAAAQAqAQEeAAAADwAAAFJlcXVlc3RGaWxlT3BlbgAB/////wAA" +
           "AAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFA0AC4ARFA0" +
           "AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlTm9kZUlkABH/////AAAAAAABACoBARkAAAAKAAAARmlsZUhh" +
           "bmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAYAAABEZWxldGUBAFE0AC8B" +
           "AFE0UTQAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBSNAAuAERSNAAAlgEA" +
           "AAABACoBAR0AAAAOAAAAT2JqZWN0VG9EZWxldGUAEf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAAKAAAATW92ZU9yQ29weQEAUzQALwEAUzRTNAAAAQH/////AgAAABVgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBAFQ0AC4ARFQ0AACWBAAAAAEAKgEBIQAAABIAAABPYmplY3RUb01vdmVPckNv" +
           "cHkAEf////8AAAAAAAEAKgEBHgAAAA8AAABUYXJnZXREaXJlY3RvcnkAEf////8AAAAAAAEAKgEBGQAA" +
           "AAoAAABDcmVhdGVDb3B5AAH/////AAAAAAABACoBARYAAAAHAAAATmV3TmFtZQAM/////wAAAAAAAQAo" +
           "AQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFU0AC4ARFU0AACWAQAA" +
           "AAEAKgEBGAAAAAkAAABOZXdOb2RlSWQAEf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CreateDirectoryMethodState CreateDirectory
        {
            get
            {
                return m_createDirectoryMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createDirectoryMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createDirectoryMethod = value;
            }
        }

        /// <remarks />
        public CreateFileMethodState CreateFile
        {
            get
            {
                return m_createFileMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createFileMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createFileMethod = value;
            }
        }

        /// <remarks />
        public DeleteFileMethodState Delete
        {
            get
            {
                return m_deleteMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteMethod = value;
            }
        }

        /// <remarks />
        public MoveOrCopyMethodState MoveOrCopy
        {
            get
            {
                return m_moveOrCopyMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_moveOrCopyMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_moveOrCopyMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createDirectoryMethod != null)
            {
                children.Add(m_createDirectoryMethod);
            }

            if (m_createFileMethod != null)
            {
                children.Add(m_createFileMethod);
            }

            if (m_deleteMethod != null)
            {
                children.Add(m_deleteMethod);
            }

            if (m_moveOrCopyMethod != null)
            {
                children.Add(m_moveOrCopyMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateDirectory:
                {
                    if (createOrReplace)
                    {
                        if (CreateDirectory == null)
                        {
                            if (replacement == null)
                            {
                                CreateDirectory = new CreateDirectoryMethodState(this);
                            }
                            else
                            {
                                CreateDirectory = (CreateDirectoryMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateDirectory;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateFile:
                {
                    if (createOrReplace)
                    {
                        if (CreateFile == null)
                        {
                            if (replacement == null)
                            {
                                CreateFile = new CreateFileMethodState(this);
                            }
                            else
                            {
                                CreateFile = (CreateFileMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateFile;
                    break;
                }

                case Opc.Ua.BrowseNames.Delete:
                {
                    if (createOrReplace)
                    {
                        if (Delete == null)
                        {
                            if (replacement == null)
                            {
                                Delete = new DeleteFileMethodState(this);
                            }
                            else
                            {
                                Delete = (DeleteFileMethodState)replacement;
                            }
                        }
                    }

                    instance = Delete;
                    break;
                }

                case Opc.Ua.BrowseNames.MoveOrCopy:
                {
                    if (createOrReplace)
                    {
                        if (MoveOrCopy == null)
                        {
                            if (replacement == null)
                            {
                                MoveOrCopy = new MoveOrCopyMethodState(this);
                            }
                            else
                            {
                                MoveOrCopy = (MoveOrCopyMethodState)replacement;
                            }
                        }
                    }

                    instance = MoveOrCopy;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CreateDirectoryMethodState m_createDirectoryMethod;
        private CreateFileMethodState m_createFileMethod;
        private DeleteFileMethodState m_deleteMethod;
        private MoveOrCopyMethodState m_moveOrCopyMethod;
        #endregion
    }
    #endif
    #endregion

    #region AddressSpaceFileState Class
    #if (!OPCUA_EXCLUDE_AddressSpaceFileState)
    /// <summary>
    /// Stores an instance of the AddressSpaceFileType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddressSpaceFileState : FileState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AddressSpaceFileState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AddressSpaceFileType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ExportNamespace != null)
            {
                ExportNamespace.Initialize(context, ExportNamespace_InitializationString);
            }
        }

        #region Initialization String
        private const string ExportNamespace_InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAEV4cG9ydE5hbWVzcGFjZQEAXy0ALwEAXy1fLQAAAQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAEFkZHJlc3NTcGFjZUZpbGVUeXBlSW5zdGFuY2UBAEstAQBLLf//" +
           "//8LAAAAFWCJCgIAAAAAAAQAAABTaXplAQBMLQAuAERMLQAAAAn/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAV3JpdGFibGUBAJAxAC4ARJAxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2Vy" +
           "V3JpdGFibGUBAJExAC4ARJExAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQB" +
           "AE8tAC4ARE8tAAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBQLQAvAQA8LVAtAAAB" +
           "Af////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAUS0ALgBEUS0AAJYBAAAAAQAqAQET" +
           "AAAABAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0" +
           "QXJndW1lbnRzAQBSLQAuAERSLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAUy0ALwEAPy1TLQAAAQH/////AQAA" +
           "ABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFQtAC4ARFQtAACWAQAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJlYWQBAFUt" +
           "AC8BAEEtVS0AAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBWLQAuAERWLQAA" +
           "lgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExlbmd0aAAG" +
           "/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAFct" +
           "AC4ARFctAACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAE" +
           "YYIKBAAAAAAABQAAAFdyaXRlAQBYLQAvAQBELVgtAAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEAWS0ALgBEWS0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAA" +
           "AEdldFBvc2l0aW9uAQBaLQAvAQBGLVotAAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEAWy0ALgBEWy0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEB" +
           "AAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQBcLQAuAERcLQAAlgEAAAAB" +
           "ACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAL" +
           "AAAAU2V0UG9zaXRpb24BAF0tAC8BAEktXS0AAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJn" +
           "dW1lbnRzAQBeLQAuAEReLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAq" +
           "AQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAADwAA" +
           "AEV4cG9ydE5hbWVzcGFjZQEAXy0ALwEAXy1fLQAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public MethodState ExportNamespace
        {
            get
            {
                return m_exportNamespaceMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exportNamespaceMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exportNamespaceMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_exportNamespaceMethod != null)
            {
                children.Add(m_exportNamespaceMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ExportNamespace:
                {
                    if (createOrReplace)
                    {
                        if (ExportNamespace == null)
                        {
                            if (replacement == null)
                            {
                                ExportNamespace = new MethodState(this);
                            }
                            else
                            {
                                ExportNamespace = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ExportNamespace;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private MethodState m_exportNamespaceMethod;
        #endregion
    }
    #endif
    #endregion

    #region NamespaceMetadataState Class
    #if (!OPCUA_EXCLUDE_NamespaceMetadataState)
    /// <summary>
    /// Stores an instance of the NamespaceMetadataType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NamespaceMetadataState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NamespaceMetadataState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NamespaceMetadataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (NamespaceFile != null)
            {
                NamespaceFile.Initialize(context, NamespaceFile_InitializationString);
            }
        }

        #region Initialization String
        private const string NamespaceFile_InitializationString =
           "//////////8EYIAKAQAAAAAADQAAAE5hbWVzcGFjZUZpbGUBAGgtAC8BAEstaC0AAP////8KAAAAFWCJ" +
           "CgIAAAAAAAQAAABTaXplAQBpLQAuAERpLQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAV3Jp" +
           "dGFibGUBAJIxAC4ARJIxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFibGUB" +
           "AJMxAC4ARJMxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAGwtAC4ARGwt" +
           "AAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBtLQAvAQA8LW0tAAABAf////8CAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbi0ALgBEbi0AAJYBAAAAAQAqAQETAAAABAAAAE1v" +
           "ZGUAA/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRz" +
           "AQBvLQAuAERvLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAAB" +
           "Af////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAcC0ALwEAPy1wLQAAAQH/////AQAAABVgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBAHEtAC4ARHEtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxl" +
           "AAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJlYWQBAHItAC8BAEEtci0A" +
           "AAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBzLQAuAERzLQAAlgIAAAABACoB" +
           "ARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExlbmd0aAAG/////wAAAAAA" +
           "AQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAHQtAC4ARHQtAACW" +
           "AQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAA" +
           "BQAAAFdyaXRlAQB1LQAvAQBELXUtAAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50" +
           "cwEAdi0ALgBEdi0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAA" +
           "AAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0" +
           "aW9uAQB3LQAvAQBGLXctAAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAeC0A" +
           "LgBEeC0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////" +
           "AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQB5LQAuAER5LQAAlgEAAAABACoBARcAAAAI" +
           "AAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9z" +
           "aXRpb24BAHotAC8BAEktei0AAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQB7" +
           "LQAuAER7LQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAA" +
           "AFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHQAAAE5hbWVzcGFjZU1ldGFkYXRhVHlwZUluc3RhbmNlAQBgLQEAYC3/" +
           "////CAAAABVgiQoCAAAAAAAMAAAATmFtZXNwYWNlVXJpAQBhLQAuAERhLQAAAAz/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAQAAAATmFtZXNwYWNlVmVyc2lvbgEAYi0ALgBEYi0AAAAM/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAGAAAAE5hbWVzcGFjZVB1YmxpY2F0aW9uRGF0ZQEAYy0ALgBEYy0AAAAN/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEQAAAElzTmFtZXNwYWNlU3Vic2V0AQBkLQAuAERkLQAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAARAAAAU3RhdGljTm9kZUlkVHlwZXMBAGUtAC4ARGUtAAABAAABAQAAAAEB////" +
           "/wAAAAAVYIkKAgAAAAAAGAAAAFN0YXRpY051bWVyaWNOb2RlSWRSYW5nZQEAZi0ALgBEZi0AAAEAIwEB" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAAZAAAAU3RhdGljU3RyaW5nTm9kZUlkUGF0dGVybgEAZy0ALgBE" +
           "Zy0AAAAM/////wEB/////wAAAAAEYIAKAQAAAAAADQAAAE5hbWVzcGFjZUZpbGUBAGgtAC8BAEstaC0A" +
           "AP////8KAAAAFWCJCgIAAAAAAAQAAABTaXplAQBpLQAuAERpLQAAAAn/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAV3JpdGFibGUBAJIxAC4ARJIxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABV" +
           "c2VyV3JpdGFibGUBAJMxAC4ARJMxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291" +
           "bnQBAGwtAC4ARGwtAAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQBtLQAvAQA8LW0t" +
           "AAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbi0ALgBEbi0AAJYBAAAAAQAq" +
           "AQETAAAABAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0" +
           "cHV0QXJndW1lbnRzAQBvLQAuAERvLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAA" +
           "AAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAcC0ALwEAPy1wLQAAAQH/////" +
           "AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHEtAC4ARHEtAACWAQAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJlYWQB" +
           "AHItAC8BAEEtci0AAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBzLQAuAERz" +
           "LQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExlbmd0" +
           "aAAG/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AHQtAC4ARHQtAACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAFdyaXRlAQB1LQAvAQBELXUtAAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEAdi0ALgBEdi0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAA" +
           "CwAAAEdldFBvc2l0aW9uAQB3LQAvAQBGLXctAAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFy" +
           "Z3VtZW50cwEAeC0ALgBEeC0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEA" +
           "KAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQB5LQAuAER5LQAAlgEA" +
           "AAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAA" +
           "AAALAAAAU2V0UG9zaXRpb24BAHotAC8BAEktei0AAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQB7LQAuAER7LQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> NamespaceUri
        {
            get
            {
                return m_namespaceUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceUri = value;
            }
        }

        /// <remarks />
        public PropertyState<string> NamespaceVersion
        {
            get
            {
                return m_namespaceVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceVersion = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> NamespacePublicationDate
        {
            get
            {
                return m_namespacePublicationDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespacePublicationDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespacePublicationDate = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> IsNamespaceSubset
        {
            get
            {
                return m_isNamespaceSubset;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isNamespaceSubset, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isNamespaceSubset = value;
            }
        }

        /// <remarks />
        public PropertyState<IdType[]> StaticNodeIdTypes
        {
            get
            {
                return m_staticNodeIdTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticNodeIdTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticNodeIdTypes = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> StaticNumericNodeIdRange
        {
            get
            {
                return m_staticNumericNodeIdRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticNumericNodeIdRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticNumericNodeIdRange = value;
            }
        }

        /// <remarks />
        public PropertyState<string> StaticStringNodeIdPattern
        {
            get
            {
                return m_staticStringNodeIdPattern;
            }

            set
            {
                if (!Object.ReferenceEquals(m_staticStringNodeIdPattern, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_staticStringNodeIdPattern = value;
            }
        }

        /// <remarks />
        public AddressSpaceFileState NamespaceFile
        {
            get
            {
                return m_namespaceFile;
            }

            set
            {
                if (!Object.ReferenceEquals(m_namespaceFile, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_namespaceFile = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_namespaceUri != null)
            {
                children.Add(m_namespaceUri);
            }

            if (m_namespaceVersion != null)
            {
                children.Add(m_namespaceVersion);
            }

            if (m_namespacePublicationDate != null)
            {
                children.Add(m_namespacePublicationDate);
            }

            if (m_isNamespaceSubset != null)
            {
                children.Add(m_isNamespaceSubset);
            }

            if (m_staticNodeIdTypes != null)
            {
                children.Add(m_staticNodeIdTypes);
            }

            if (m_staticNumericNodeIdRange != null)
            {
                children.Add(m_staticNumericNodeIdRange);
            }

            if (m_staticStringNodeIdPattern != null)
            {
                children.Add(m_staticStringNodeIdPattern);
            }

            if (m_namespaceFile != null)
            {
                children.Add(m_namespaceFile);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NamespaceUri:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceUri == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                NamespaceUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NamespaceUri;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceVersion:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceVersion == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceVersion = new PropertyState<string>(this);
                            }
                            else
                            {
                                NamespaceVersion = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = NamespaceVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespacePublicationDate:
                {
                    if (createOrReplace)
                    {
                        if (NamespacePublicationDate == null)
                        {
                            if (replacement == null)
                            {
                                NamespacePublicationDate = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                NamespacePublicationDate = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = NamespacePublicationDate;
                    break;
                }

                case Opc.Ua.BrowseNames.IsNamespaceSubset:
                {
                    if (createOrReplace)
                    {
                        if (IsNamespaceSubset == null)
                        {
                            if (replacement == null)
                            {
                                IsNamespaceSubset = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsNamespaceSubset = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsNamespaceSubset;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticNodeIdTypes:
                {
                    if (createOrReplace)
                    {
                        if (StaticNodeIdTypes == null)
                        {
                            if (replacement == null)
                            {
                                StaticNodeIdTypes = new PropertyState<IdType[]>(this);
                            }
                            else
                            {
                                StaticNodeIdTypes = (PropertyState<IdType[]>)replacement;
                            }
                        }
                    }

                    instance = StaticNodeIdTypes;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticNumericNodeIdRange:
                {
                    if (createOrReplace)
                    {
                        if (StaticNumericNodeIdRange == null)
                        {
                            if (replacement == null)
                            {
                                StaticNumericNodeIdRange = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                StaticNumericNodeIdRange = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = StaticNumericNodeIdRange;
                    break;
                }

                case Opc.Ua.BrowseNames.StaticStringNodeIdPattern:
                {
                    if (createOrReplace)
                    {
                        if (StaticStringNodeIdPattern == null)
                        {
                            if (replacement == null)
                            {
                                StaticStringNodeIdPattern = new PropertyState<string>(this);
                            }
                            else
                            {
                                StaticStringNodeIdPattern = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = StaticStringNodeIdPattern;
                    break;
                }

                case Opc.Ua.BrowseNames.NamespaceFile:
                {
                    if (createOrReplace)
                    {
                        if (NamespaceFile == null)
                        {
                            if (replacement == null)
                            {
                                NamespaceFile = new AddressSpaceFileState(this);
                            }
                            else
                            {
                                NamespaceFile = (AddressSpaceFileState)replacement;
                            }
                        }
                    }

                    instance = NamespaceFile;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_namespaceUri;
        private PropertyState<string> m_namespaceVersion;
        private PropertyState<DateTime> m_namespacePublicationDate;
        private PropertyState<bool> m_isNamespaceSubset;
        private PropertyState<IdType[]> m_staticNodeIdTypes;
        private PropertyState<string[]> m_staticNumericNodeIdRange;
        private PropertyState<string> m_staticStringNodeIdPattern;
        private AddressSpaceFileState m_namespaceFile;
        #endregion
    }
    #endif
    #endregion

    #region NamespacesState Class
    #if (!OPCUA_EXCLUDE_NamespacesState)
    /// <summary>
    /// Stores an instance of the NamespacesType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NamespacesState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NamespacesState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NamespacesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AddressSpaceFile != null)
            {
                AddressSpaceFile.Initialize(context, AddressSpaceFile_InitializationString);
            }
        }

        #region Initialization String
        private const string AddressSpaceFile_InitializationString =
           "//////////8EYIAKAQAAAAAAEAAAAEFkZHJlc3NTcGFjZUZpbGUBAJstAC8BAEstmy0AAP////8KAAAA" +
           "FWCJCgIAAAAAAAQAAABTaXplAQCcLQAuAEScLQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "V3JpdGFibGUBAJYxAC4ARJYxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFi" +
           "bGUBAJcxAC4ARJcxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBAJ8tAC4A" +
           "RJ8tAAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQCgLQAvAQA8LaAtAAABAf////8C" +
           "AAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAoS0ALgBEoS0AAJYBAAAAAQAqAQETAAAABAAA" +
           "AE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1l" +
           "bnRzAQCiLQAuAESiLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEA" +
           "AAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAoy0ALwEAPy2jLQAAAQH/////AQAAABVgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKQtAC4ARKQtAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFu" +
           "ZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJlYWQBAKUtAC8BAEEt" +
           "pS0AAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCmLQAuAESmLQAAlgIAAAAB" +
           "ACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExlbmd0aAAG/////wAA" +
           "AAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAKctAC4ARKct" +
           "AACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAA" +
           "AAAABQAAAFdyaXRlAQCoLQAvAQBELagtAAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3Vt" +
           "ZW50cwEAqS0ALgBEqS0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEB" +
           "EwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBv" +
           "c2l0aW9uAQCqLQAvAQBGLaotAAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA" +
           "qy0ALgBEqy0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/" +
           "////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCsLQAuAESsLQAAlgEAAAABACoBARcA" +
           "AAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0" +
           "UG9zaXRpb24BAK0tAC8BAEktrS0AAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQCuLQAuAESuLQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAA" +
           "CAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFgAAAE5hbWVzcGFjZXNUeXBlSW5zdGFuY2UBAH0tAQB9Lf////8BAAAA" +
           "BGCACgEAAAAAABAAAABBZGRyZXNzU3BhY2VGaWxlAQCbLQAvAQBLLZstAAD/////CgAAABVgiQoCAAAA" +
           "AAAEAAAAU2l6ZQEAnC0ALgBEnC0AAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRhYmxl" +
           "AQCWMQAuAESWMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQCXMQAu" +
           "AESXMQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQCfLQAuAESfLQAAAAX/" +
           "////AQH/////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAoC0ALwEAPC2gLQAAAQH/////AgAAABVgqQoC" +
           "AAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKEtAC4ARKEtAACWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/" +
           "////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAoi0A" +
           "LgBEoi0AAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////" +
           "AAAAAARhggoEAAAAAAAFAAAAQ2xvc2UBAKMtAC8BAD8toy0AAAEB/////wEAAAAVYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQCkLQAuAESkLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAQClLQAvAQBBLaUtAAABAf//" +
           "//8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEApi0ALgBEpi0AAJYCAAAAAQAqAQEZAAAA" +
           "CgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEB" +
           "AAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCnLQAuAESnLQAAlgEAAAAB" +
           "ACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABX" +
           "cml0ZQEAqC0ALwEARC2oLQAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKkt" +
           "AC4ARKktAACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAA" +
           "RGF0YQAP/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEA" +
           "qi0ALwEARi2qLQAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKstAC4ARKst" +
           "AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAV" +
           "YKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEArC0ALgBErC0AAJYBAAAAAQAqAQEXAAAACAAAAFBv" +
           "c2l0aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNldFBvc2l0aW9u" +
           "AQCtLQAvAQBJLa0tAAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAri0ALgBE" +
           "ri0AAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAAAAgAAABQb3Np" +
           "dGlvbgAJ/////wAAAAAAAQAoAQEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AddressSpaceFileState AddressSpaceFile
        {
            get
            {
                return m_addressSpaceFile;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addressSpaceFile, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addressSpaceFile = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_addressSpaceFile != null)
            {
                children.Add(m_addressSpaceFile);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AddressSpaceFile:
                {
                    if (createOrReplace)
                    {
                        if (AddressSpaceFile == null)
                        {
                            if (replacement == null)
                            {
                                AddressSpaceFile = new AddressSpaceFileState(this);
                            }
                            else
                            {
                                AddressSpaceFile = (AddressSpaceFileState)replacement;
                            }
                        }
                    }

                    instance = AddressSpaceFile;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AddressSpaceFileState m_addressSpaceFile;
        #endregion
    }
    #endif
    #endregion

    #region BaseEventState Class
    #if (!OPCUA_EXCLUDE_BaseEventState)
    /// <summary>
    /// Stores an instance of the BaseEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseEventState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BaseEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFQAAAEJhc2VFdmVudFR5cGVJbnN0YW5jZQEA+QcBAPkH/////wkAAAAV" +
           "YIkKAgAAAAAABwAAAEV2ZW50SWQBAPoHAC4ARPoHAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkA" +
           "AABFdmVudFR5cGUBAPsHAC4ARPsHAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "b2RlAQD8BwAuAET8BwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQEA/QcA" +
           "LgBE/QcAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAP4HAC4ARP4HAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQD/BwAuAET/BwAAAQAmAf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAHYMAC4ARHYMAAABANAi/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABwAAAE1lc3NhZ2UBAAIIAC4ARAIIAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXZlcml0eQEAAwgALgBEAwgAAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> EventId
        {
            get
            {
                return m_eventId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventId = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> EventType
        {
            get
            {
                return m_eventType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventType = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> SourceNode
        {
            get
            {
                return m_sourceNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceNode = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SourceName
        {
            get
            {
                return m_sourceName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceName = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> Time
        {
            get
            {
                return m_time;
            }

            set
            {
                if (!Object.ReferenceEquals(m_time, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_time = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> ReceiveTime
        {
            get
            {
                return m_receiveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_receiveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_receiveTime = value;
            }
        }

        /// <remarks />
        public PropertyState<TimeZoneDataType> LocalTime
        {
            get
            {
                return m_localTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localTime = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Message
        {
            get
            {
                return m_message;
            }

            set
            {
                if (!Object.ReferenceEquals(m_message, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_message = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> Severity
        {
            get
            {
                return m_severity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_severity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_severity = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventId != null)
            {
                children.Add(m_eventId);
            }

            if (m_eventType != null)
            {
                children.Add(m_eventType);
            }

            if (m_sourceNode != null)
            {
                children.Add(m_sourceNode);
            }

            if (m_sourceName != null)
            {
                children.Add(m_sourceName);
            }

            if (m_time != null)
            {
                children.Add(m_time);
            }

            if (m_receiveTime != null)
            {
                children.Add(m_receiveTime);
            }

            if (m_localTime != null)
            {
                children.Add(m_localTime);
            }

            if (m_message != null)
            {
                children.Add(m_message);
            }

            if (m_severity != null)
            {
                children.Add(m_severity);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventId:
                {
                    if (createOrReplace)
                    {
                        if (EventId == null)
                        {
                            if (replacement == null)
                            {
                                EventId = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                EventId = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = EventId;
                    break;
                }

                case Opc.Ua.BrowseNames.EventType:
                {
                    if (createOrReplace)
                    {
                        if (EventType == null)
                        {
                            if (replacement == null)
                            {
                                EventType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                EventType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = EventType;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceNode:
                {
                    if (createOrReplace)
                    {
                        if (SourceNode == null)
                        {
                            if (replacement == null)
                            {
                                SourceNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SourceNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SourceNode;
                    break;
                }

                case Opc.Ua.BrowseNames.SourceName:
                {
                    if (createOrReplace)
                    {
                        if (SourceName == null)
                        {
                            if (replacement == null)
                            {
                                SourceName = new PropertyState<string>(this);
                            }
                            else
                            {
                                SourceName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SourceName;
                    break;
                }

                case Opc.Ua.BrowseNames.Time:
                {
                    if (createOrReplace)
                    {
                        if (Time == null)
                        {
                            if (replacement == null)
                            {
                                Time = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                Time = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = Time;
                    break;
                }

                case Opc.Ua.BrowseNames.ReceiveTime:
                {
                    if (createOrReplace)
                    {
                        if (ReceiveTime == null)
                        {
                            if (replacement == null)
                            {
                                ReceiveTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ReceiveTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ReceiveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LocalTime:
                {
                    if (createOrReplace)
                    {
                        if (LocalTime == null)
                        {
                            if (replacement == null)
                            {
                                LocalTime = new PropertyState<TimeZoneDataType>(this);
                            }
                            else
                            {
                                LocalTime = (PropertyState<TimeZoneDataType>)replacement;
                            }
                        }
                    }

                    instance = LocalTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Message:
                {
                    if (createOrReplace)
                    {
                        if (Message == null)
                        {
                            if (replacement == null)
                            {
                                Message = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Message = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Message;
                    break;
                }

                case Opc.Ua.BrowseNames.Severity:
                {
                    if (createOrReplace)
                    {
                        if (Severity == null)
                        {
                            if (replacement == null)
                            {
                                Severity = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Severity = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Severity;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_eventId;
        private PropertyState<NodeId> m_eventType;
        private PropertyState<NodeId> m_sourceNode;
        private PropertyState<string> m_sourceName;
        private PropertyState<DateTime> m_time;
        private PropertyState<DateTime> m_receiveTime;
        private PropertyState<TimeZoneDataType> m_localTime;
        private PropertyState<LocalizedText> m_message;
        private PropertyState<ushort> m_severity;
        #endregion
    }
    #endif
    #endregion

    #region AuditEventState Class
    #if (!OPCUA_EXCLUDE_AuditEventState)
    /// <summary>
    /// Stores an instance of the AuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFgAAAEF1ZGl0RXZlbnRUeXBlSW5zdGFuY2UBAAQIAQAECP////8OAAAA" +
           "FWCJCgIAAAAAAAcAAABFdmVudElkAQCADAAuAESADAAAAA//////AQH/////AAAAABVgiQoCAAAAAAAJ" +
           "AAAARXZlbnRUeXBlAQCBDAAuAESBDAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "Tm9kZQEAggwALgBEggwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUBAIMM" +
           "AC4ARIMMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCEDAAuAESEDAAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAhQwALgBEhQwAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCGDAAuAESGDAAAAQDQIv////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAcAAABNZXNzYWdlAQCHDAAuAESHDAAAABX/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAU2V2ZXJpdHkBAIgMAC4ARIgMAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABBY3Rpb25U" +
           "aW1lU3RhbXABAAUIAC4ARAUIAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0YXR1cwEA" +
           "BggALgBEBggAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAQAHCAAuAEQHCAAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAQAICAAuAEQICAAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQAJCAAuAEQJCAAAAAz/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> ActionTimeStamp
        {
            get
            {
                return m_actionTimeStamp;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actionTimeStamp, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actionTimeStamp = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Status
        {
            get
            {
                return m_status;
            }

            set
            {
                if (!Object.ReferenceEquals(m_status, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_status = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ServerId
        {
            get
            {
                return m_serverId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientAuditEntryId
        {
            get
            {
                return m_clientAuditEntryId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientAuditEntryId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientAuditEntryId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientUserId
        {
            get
            {
                return m_clientUserId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_actionTimeStamp != null)
            {
                children.Add(m_actionTimeStamp);
            }

            if (m_status != null)
            {
                children.Add(m_status);
            }

            if (m_serverId != null)
            {
                children.Add(m_serverId);
            }

            if (m_clientAuditEntryId != null)
            {
                children.Add(m_clientAuditEntryId);
            }

            if (m_clientUserId != null)
            {
                children.Add(m_clientUserId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ActionTimeStamp:
                {
                    if (createOrReplace)
                    {
                        if (ActionTimeStamp == null)
                        {
                            if (replacement == null)
                            {
                                ActionTimeStamp = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ActionTimeStamp = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ActionTimeStamp;
                    break;
                }

                case Opc.Ua.BrowseNames.Status:
                {
                    if (createOrReplace)
                    {
                        if (Status == null)
                        {
                            if (replacement == null)
                            {
                                Status = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Status = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Status;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerId:
                {
                    if (createOrReplace)
                    {
                        if (ServerId == null)
                        {
                            if (replacement == null)
                            {
                                ServerId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ServerId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientAuditEntryId:
                {
                    if (createOrReplace)
                    {
                        if (ClientAuditEntryId == null)
                        {
                            if (replacement == null)
                            {
                                ClientAuditEntryId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientAuditEntryId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientAuditEntryId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserId:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserId == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientUserId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_actionTimeStamp;
        private PropertyState<bool> m_status;
        private PropertyState<string> m_serverId;
        private PropertyState<string> m_clientAuditEntryId;
        private PropertyState<string> m_clientUserId;
        #endregion
    }
    #endif
    #endregion

    #region AuditSecurityEventState Class
    #if (!OPCUA_EXCLUDE_AuditSecurityEventState)
    /// <summary>
    /// Stores an instance of the AuditSecurityEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditSecurityEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditSecurityEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditSecurityEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHgAAAEF1ZGl0U2VjdXJpdHlFdmVudFR5cGVJbnN0YW5jZQEACggBAAoI" +
           "/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAIkMAC4ARIkMAAAAD/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABFdmVudFR5cGUBAIoMAC4ARIoMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOb2RlAQCLDAAuAESLDAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "TmFtZQEAjAwALgBEjAwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAI0MAC4ARI0M" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCODAAuAESODAAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAI8MAC4ARI8MAAABANAi/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJAMAC4ARJAMAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAgAAABTZXZlcml0eQEAkQwALgBEkQwAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAA" +
           "AEFjdGlvblRpbWVTdGFtcAEAkgwALgBEkgwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAA" +
           "U3RhdHVzAQCTDAAuAESTDAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQBAJQM" +
           "AC4ARJQMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQBAJUM" +
           "AC4ARJUMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAJYMAC4ARJYM" +
           "AAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditChannelEventState Class
    #if (!OPCUA_EXCLUDE_AuditChannelEventState)
    /// <summary>
    /// Stores an instance of the AuditChannelEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditChannelEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditChannelEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditChannelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHQAAAEF1ZGl0Q2hhbm5lbEV2ZW50VHlwZUluc3RhbmNlAQALCAEACwj/" +
           "////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAlwwALgBElwwAAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQEAmAwALgBEmAwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5vZGUBAJkMAC4ARJkMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "YW1lAQCaDAAuAESaDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAmwwALgBEmwwA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAJwMAC4ARJwMAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAnQwALgBEnQwAAAEA0CL/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAngwALgBEngwAAAAV/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAFNldmVyaXR5AQCfDAAuAESfDAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAA" +
           "QWN0aW9uVGltZVN0YW1wAQCgDAAuAESgDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABT" +
           "dGF0dXMBAKEMAC4ARKEMAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAEAogwA" +
           "LgBEogwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAEAowwA" +
           "LgBEowwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEApAwALgBEpAwA" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFNlY3VyZUNoYW5uZWxJZAEAuQoALgBEuQoAAAAM" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_secureChannelId;
        #endregion
    }
    #endif
    #endregion

    #region AuditOpenSecureChannelEventState Class
    #if (!OPCUA_EXCLUDE_AuditOpenSecureChannelEventState)
    /// <summary>
    /// Stores an instance of the AuditOpenSecureChannelEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditOpenSecureChannelEventState : AuditChannelEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditOpenSecureChannelEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditOpenSecureChannelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJwAAAEF1ZGl0T3BlblNlY3VyZUNoYW5uZWxFdmVudFR5cGVJbnN0YW5j" +
           "ZQEADAgBAAwI/////xUAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAKUMAC4ARKUMAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAKYMAC4ARKYMAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQCnDAAuAESnDAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAqAwALgBEqAwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AKkMAC4ARKkMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCqDAAu" +
           "AESqDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAKsMAC4ARKsMAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAKwMAC4ARKwMAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEArQwALgBErQwAAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEArgwALgBErgwAAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQCvDAAuAESvDAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBALAMAC4ARLAMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBALEMAC4ARLEMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "ALIMAC4ARLIMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABTZWN1cmVDaGFubmVsSWQBALMM" +
           "AC4ARLMMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABEAAABDbGllbnRDZXJ0aWZpY2F0ZQEADQgA" +
           "LgBEDQgAAAAP/////wEB/////wAAAAAVYIkKAgAAAAAAGwAAAENsaWVudENlcnRpZmljYXRlVGh1bWJw" +
           "cmludAEAugoALgBEugoAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlcXVlc3RUeXBlAQAO" +
           "CAAuAEQOCAAAAQA7Af////8BAf////8AAAAAFWCJCgIAAAAAABEAAABTZWN1cml0eVBvbGljeVVyaQEA" +
           "DwgALgBEDwgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFNlY3VyaXR5TW9kZQEAEQgALgBE" +
           "EQgAAAEALgH/////AQH/////AAAAABVgiQoCAAAAAAARAAAAUmVxdWVzdGVkTGlmZXRpbWUBABIIAC4A" +
           "RBIIAAABACIB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientCertificateThumbprint
        {
            get
            {
                return m_clientCertificateThumbprint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificateThumbprint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificateThumbprint = value;
            }
        }

        /// <remarks />
        public PropertyState<SecurityTokenRequestType> RequestType
        {
            get
            {
                return m_requestType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestType = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public PropertyState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RequestedLifetime
        {
            get
            {
                return m_requestedLifetime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestedLifetime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestedLifetime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            if (m_clientCertificateThumbprint != null)
            {
                children.Add(m_clientCertificateThumbprint);
            }

            if (m_requestType != null)
            {
                children.Add(m_requestType);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_requestedLifetime != null)
            {
                children.Add(m_requestedLifetime);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificateThumbprint:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificateThumbprint == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificateThumbprint = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientCertificateThumbprint = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificateThumbprint;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestType:
                {
                    if (createOrReplace)
                    {
                        if (RequestType == null)
                        {
                            if (replacement == null)
                            {
                                RequestType = new PropertyState<SecurityTokenRequestType>(this);
                            }
                            else
                            {
                                RequestType = (PropertyState<SecurityTokenRequestType>)replacement;
                            }
                        }
                    }

                    instance = RequestType;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new PropertyState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (PropertyState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.RequestedLifetime:
                {
                    if (createOrReplace)
                    {
                        if (RequestedLifetime == null)
                        {
                            if (replacement == null)
                            {
                                RequestedLifetime = new PropertyState<double>(this);
                            }
                            else
                            {
                                RequestedLifetime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RequestedLifetime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_clientCertificate;
        private PropertyState<string> m_clientCertificateThumbprint;
        private PropertyState<SecurityTokenRequestType> m_requestType;
        private PropertyState<string> m_securityPolicyUri;
        private PropertyState<MessageSecurityMode> m_securityMode;
        private PropertyState<double> m_requestedLifetime;
        #endregion
    }
    #endif
    #endregion

    #region AuditSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditSessionEventState)
    /// <summary>
    /// Stores an instance of the AuditSessionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditSessionEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHQAAAEF1ZGl0U2Vzc2lvbkV2ZW50VHlwZUluc3RhbmNlAQAVCAEAFQj/" +
           "////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAtAwALgBEtAwAAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQEAtQwALgBEtQwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5vZGUBALYMAC4ARLYMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "YW1lAQC3DAAuAES3DAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAuAwALgBEuAwA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBALkMAC4ARLkMAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAugwALgBEugwAAAEA0CL/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAuwwALgBEuwwAAAAV/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAFNldmVyaXR5AQC8DAAuAES8DAAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAPAAAA" +
           "QWN0aW9uVGltZVN0YW1wAQC9DAAuAES9DAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABT" +
           "dGF0dXMBAL4MAC4ARL4MAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJZAEAvwwA" +
           "LgBEvwwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJZAEAwAwA" +
           "LgBEwAwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAwQwALgBEwQwA" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAFggALgBEFggAAAAR/////wEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_sessionId;
        #endregion
    }
    #endif
    #endregion

    #region AuditCreateSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditCreateSessionEventState)
    /// <summary>
    /// Stores an instance of the AuditCreateSessionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCreateSessionEventState : AuditSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCreateSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCreateSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEF1ZGl0Q3JlYXRlU2Vzc2lvbkV2ZW50VHlwZUluc3RhbmNlAQAX" +
           "CAEAFwj/////EwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAwgwALgBEwgwAAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAwwwALgBEwwwAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAMQMAC4ARMQMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQDFDAAuAETFDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAxgwA" +
           "LgBExgwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAMcMAC4ARMcM" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAyAwALgBEyAwAAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAyQwALgBEyQwAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDKDAAuAETKDAAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAAQWN0aW9uVGltZVN0YW1wAQDLDAAuAETLDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABTdGF0dXMBAMwMAC4ARMwMAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJ" +
           "ZAEAzQwALgBEzQwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJ" +
           "ZAEAzgwALgBEzgwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAzwwA" +
           "LgBEzwwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEATTgALgBETTgAAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFNlY3VyZUNoYW5uZWxJZAEAGAgALgBEGAgAAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEQAAAENsaWVudENlcnRpZmljYXRlAQAZCAAuAEQZCAAAAA//////" +
           "AQH/////AAAAABVgiQoCAAAAAAAbAAAAQ2xpZW50Q2VydGlmaWNhdGVUaHVtYnByaW50AQC7CgAuAES7" +
           "CgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAUmV2aXNlZFNlc3Npb25UaW1lb3V0AQAaCAAu" +
           "AEQaCAAAAQAiAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientCertificateThumbprint
        {
            get
            {
                return m_clientCertificateThumbprint;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificateThumbprint, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificateThumbprint = value;
            }
        }

        /// <remarks />
        public PropertyState<double> RevisedSessionTimeout
        {
            get
            {
                return m_revisedSessionTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_revisedSessionTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_revisedSessionTimeout = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            if (m_clientCertificateThumbprint != null)
            {
                children.Add(m_clientCertificateThumbprint);
            }

            if (m_revisedSessionTimeout != null)
            {
                children.Add(m_revisedSessionTimeout);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificateThumbprint:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificateThumbprint == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificateThumbprint = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientCertificateThumbprint = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificateThumbprint;
                    break;
                }

                case Opc.Ua.BrowseNames.RevisedSessionTimeout:
                {
                    if (createOrReplace)
                    {
                        if (RevisedSessionTimeout == null)
                        {
                            if (replacement == null)
                            {
                                RevisedSessionTimeout = new PropertyState<double>(this);
                            }
                            else
                            {
                                RevisedSessionTimeout = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = RevisedSessionTimeout;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_secureChannelId;
        private PropertyState<byte[]> m_clientCertificate;
        private PropertyState<string> m_clientCertificateThumbprint;
        private PropertyState<double> m_revisedSessionTimeout;
        #endregion
    }
    #endif
    #endregion

    #region AuditUrlMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditUrlMismatchEventState)
    /// <summary>
    /// Stores an instance of the AuditUrlMismatchEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUrlMismatchEventState : AuditCreateSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUrlMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUrlMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAEF1ZGl0VXJsTWlzbWF0Y2hFdmVudFR5cGVJbnN0YW5jZQEAvAoB" +
           "ALwK/////xQAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBANEMAC4ARNEMAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBANIMAC4ARNIMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQDTDAAuAETTDAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEA1AwALgBE1AwAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBANUMAC4A" +
           "RNUMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDWDAAuAETWDAAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBANcMAC4ARNcMAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBANgMAC4ARNgMAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEA2QwALgBE2QwAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEA2gwALgBE2gwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQDbDAAuAETbDAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "ANwMAC4ARNwMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "AN0MAC4ARN0MAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAN4MAC4A" +
           "RN4MAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTZXNzaW9uSWQBAE44AC4ARE44AAAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABTZWN1cmVDaGFubmVsSWQBAOAMAC4AROAMAAAADP////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABEAAABDbGllbnRDZXJ0aWZpY2F0ZQEA4QwALgBE4QwAAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAGwAAAENsaWVudENlcnRpZmljYXRlVGh1bWJwcmludAEA4gwALgBE4gwA" +
           "AAAM/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJldmlzZWRTZXNzaW9uVGltZW91dAEA4wwALgBE" +
           "4wwAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAARW5kcG9pbnRVcmwBAL0KAC4ARL0KAAAA" +
           "DP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new PropertyState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_endpointUrl;
        #endregion
    }
    #endif
    #endregion

    #region AuditActivateSessionEventState Class
    #if (!OPCUA_EXCLUDE_AuditActivateSessionEventState)
    /// <summary>
    /// Stores an instance of the AuditActivateSessionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditActivateSessionEventState : AuditSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditActivateSessionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditActivateSessionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJQAAAEF1ZGl0QWN0aXZhdGVTZXNzaW9uRXZlbnRUeXBlSW5zdGFuY2UB" +
           "ABsIAQAbCP////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDkDAAuAETkDAAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDlDAAuAETlDAAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEA5gwALgBE5gwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBAOcMAC4AROcMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQDo" +
           "DAAuAEToDAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA6QwALgBE" +
           "6QwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDqDAAuAETqDAAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDrDAAuAETrDAAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAOwMAC4AROwMAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAO0MAC4ARO0MAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEA7gwALgBE7gwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQDvDAAuAETvDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQDwDAAuAETwDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQDx" +
           "DAAuAETxDAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAQDyDAAuAETyDAAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAaAAAAQ2xpZW50U29mdHdhcmVDZXJ0aWZpY2F0ZXMBABwI" +
           "AC4ARBwIAAABAFgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAAEQAAAFVzZXJJZGVudGl0eVRva2VuAQAd" +
           "CAAuAEQdCAAAAQA8Af////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABTZWN1cmVDaGFubmVsSWQBAN0s" +
           "AC4ARN0sAAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<SignedSoftwareCertificate[]> ClientSoftwareCertificates
        {
            get
            {
                return m_clientSoftwareCertificates;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientSoftwareCertificates, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientSoftwareCertificates = value;
            }
        }

        /// <remarks />
        public PropertyState<UserIdentityToken> UserIdentityToken
        {
            get
            {
                return m_userIdentityToken;
            }

            set
            {
                if (!Object.ReferenceEquals(m_userIdentityToken, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_userIdentityToken = value;
            }
        }

        /// <remarks />
        public PropertyState<string> SecureChannelId
        {
            get
            {
                return m_secureChannelId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secureChannelId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secureChannelId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_clientSoftwareCertificates != null)
            {
                children.Add(m_clientSoftwareCertificates);
            }

            if (m_userIdentityToken != null)
            {
                children.Add(m_userIdentityToken);
            }

            if (m_secureChannelId != null)
            {
                children.Add(m_secureChannelId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ClientSoftwareCertificates:
                {
                    if (createOrReplace)
                    {
                        if (ClientSoftwareCertificates == null)
                        {
                            if (replacement == null)
                            {
                                ClientSoftwareCertificates = new PropertyState<SignedSoftwareCertificate[]>(this);
                            }
                            else
                            {
                                ClientSoftwareCertificates = (PropertyState<SignedSoftwareCertificate[]>)replacement;
                            }
                        }
                    }

                    instance = ClientSoftwareCertificates;
                    break;
                }

                case Opc.Ua.BrowseNames.UserIdentityToken:
                {
                    if (createOrReplace)
                    {
                        if (UserIdentityToken == null)
                        {
                            if (replacement == null)
                            {
                                UserIdentityToken = new PropertyState<UserIdentityToken>(this);
                            }
                            else
                            {
                                UserIdentityToken = (PropertyState<UserIdentityToken>)replacement;
                            }
                        }
                    }

                    instance = UserIdentityToken;
                    break;
                }

                case Opc.Ua.BrowseNames.SecureChannelId:
                {
                    if (createOrReplace)
                    {
                        if (SecureChannelId == null)
                        {
                            if (replacement == null)
                            {
                                SecureChannelId = new PropertyState<string>(this);
                            }
                            else
                            {
                                SecureChannelId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = SecureChannelId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<SignedSoftwareCertificate[]> m_clientSoftwareCertificates;
        private PropertyState<UserIdentityToken> m_userIdentityToken;
        private PropertyState<string> m_secureChannelId;
        #endregion
    }
    #endif
    #endregion

    #region AuditCancelEventState Class
    #if (!OPCUA_EXCLUDE_AuditCancelEventState)
    /// <summary>
    /// Stores an instance of the AuditCancelEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCancelEventState : AuditSessionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCancelEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCancelEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAEF1ZGl0Q2FuY2VsRXZlbnRUeXBlSW5zdGFuY2UBAB4IAQAeCP//" +
           "//8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDzDAAuAETzDAAAAA//////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAARXZlbnRUeXBlAQD0DAAuAET0DAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTm9kZQEA9QwALgBE9QwAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5h" +
           "bWUBAPYMAC4ARPYMAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQD3DAAuAET3DAAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA+AwALgBE+AwAAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQD5DAAuAET5DAAAAQDQIv////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQD6DAAuAET6DAAAABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAU2V2ZXJpdHkBAPsMAC4ARPsMAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABB" +
           "Y3Rpb25UaW1lU3RhbXABAPwMAC4ARPwMAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0" +
           "YXR1cwEA/QwALgBE/QwAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAQD+DAAu" +
           "AET+DAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAQD/DAAu" +
           "AET/DAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQAADQAuAEQADQAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAU2Vzc2lvbklkAQABDQAuAEQBDQAAABH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAANAAAAUmVxdWVzdEhhbmRsZQEAHwgALgBEHwgAAAAH/////wEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> RequestHandle
        {
            get
            {
                return m_requestHandle;
            }

            set
            {
                if (!Object.ReferenceEquals(m_requestHandle, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_requestHandle = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_requestHandle != null)
            {
                children.Add(m_requestHandle);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.RequestHandle:
                {
                    if (createOrReplace)
                    {
                        if (RequestHandle == null)
                        {
                            if (replacement == null)
                            {
                                RequestHandle = new PropertyState<uint>(this);
                            }
                            else
                            {
                                RequestHandle = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = RequestHandle;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_requestHandle;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateEventState : AuditSecurityEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAEF1ZGl0Q2VydGlmaWNhdGVFdmVudFR5cGVJbnN0YW5jZQEAIAgB" +
           "ACAI/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAAINAC4ARAINAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAAMNAC4ARAMNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQAEDQAuAEQEDQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEABQ0ALgBEBQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAAYNAC4A" +
           "RAYNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAHDQAuAEQHDQAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAAgNAC4ARAgNAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAAkNAC4ARAkNAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEACg0ALgBECg0AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEACw0ALgBECw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQAMDQAuAEQMDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "AA0NAC4ARA0NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "AA4NAC4ARA4NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAA8NAC4A" +
           "RA8NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQEAIQgALgBEIQgAAAAP" +
           "/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[]> Certificate
        {
            get
            {
                return m_certificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificate != null)
            {
                children.Add(m_certificate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Certificate:
                {
                    if (createOrReplace)
                    {
                        if (Certificate == null)
                        {
                            if (replacement == null)
                            {
                                Certificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                Certificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = Certificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[]> m_certificate;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateDataMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateDataMismatchEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateDataMismatchEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateDataMismatchEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateDataMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateDataMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAALQAAAEF1ZGl0Q2VydGlmaWNhdGVEYXRhTWlzbWF0Y2hFdmVudFR5cGVJ" +
           "bnN0YW5jZQEAIggBACII/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBABANAC4ARBANAAAAD///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBABENAC4ARBENAAAAEf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQASDQAuAEQSDQAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTmFtZQEAEw0ALgBEEw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAA" +
           "AFRpbWUBABQNAC4ARBQNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1l" +
           "AQAVDQAuAEQVDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBABYNAC4A" +
           "RBYNAAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBABcNAC4ARBcNAAAAFf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAGA0ALgBEGA0AAAAF/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAGQ0ALgBEGQ0AAAEAJgH/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAGAAAAU3RhdHVzAQAaDQAuAEQaDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAU2VydmVySWQBABsNAC4ARBsNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRB" +
           "dWRpdEVudHJ5SWQBABwNAC4ARBwNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRV" +
           "c2VySWQBAB0NAC4ARB0NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQEA" +
           "Hg0ALgBEHg0AAAAP/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEludmFsaWRIb3N0bmFtZQEAIwgA" +
           "LgBEIwgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAEludmFsaWRVcmkBACQIAC4ARCQIAAAA" +
           "DP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> InvalidHostname
        {
            get
            {
                return m_invalidHostname;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidHostname, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidHostname = value;
            }
        }

        /// <remarks />
        public PropertyState<string> InvalidUri
        {
            get
            {
                return m_invalidUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invalidUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invalidUri = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_invalidHostname != null)
            {
                children.Add(m_invalidHostname);
            }

            if (m_invalidUri != null)
            {
                children.Add(m_invalidUri);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InvalidHostname:
                {
                    if (createOrReplace)
                    {
                        if (InvalidHostname == null)
                        {
                            if (replacement == null)
                            {
                                InvalidHostname = new PropertyState<string>(this);
                            }
                            else
                            {
                                InvalidHostname = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = InvalidHostname;
                    break;
                }

                case Opc.Ua.BrowseNames.InvalidUri:
                {
                    if (createOrReplace)
                    {
                        if (InvalidUri == null)
                        {
                            if (replacement == null)
                            {
                                InvalidUri = new PropertyState<string>(this);
                            }
                            else
                            {
                                InvalidUri = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = InvalidUri;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_invalidHostname;
        private PropertyState<string> m_invalidUri;
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateExpiredEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateExpiredEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateExpiredEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateExpiredEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateExpiredEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateExpiredEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVFeHBpcmVkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACUIAQAlCP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAfDQAuAEQfDQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQAgDQAuAEQgDQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEAIQ0ALgBEIQ0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBACINAC4ARCINAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQAjDQAuAEQjDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAJA0A" +
           "LgBEJA0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAlDQAuAEQlDQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAmDQAuAEQmDQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBACcNAC4ARCcNAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABACgNAC4ARCgNAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEAKQ0ALgBEKQ0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQAqDQAuAEQqDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQArDQAuAEQrDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQAsDQAuAEQsDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUBAC0NAC4A" +
           "RC0NAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateInvalidEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateInvalidEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateInvalidEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateInvalidEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateInvalidEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateInvalidEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVJbnZhbGlkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACYIAQAmCP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAuDQAuAEQuDQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQAvDQAuAEQvDQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEAMA0ALgBEMA0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBADENAC4ARDENAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQAyDQAuAEQyDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAMw0A" +
           "LgBEMw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQA0DQAuAEQ0DQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQA1DQAuAEQ1DQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBADYNAC4ARDYNAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABADcNAC4ARDcNAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEAOA0ALgBEOA0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQA5DQAuAEQ5DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQA6DQAuAEQ6DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQA7DQAuAEQ7DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUBADwNAC4A" +
           "RDwNAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateUntrustedEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateUntrustedEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateUntrustedEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateUntrustedEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateUntrustedEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateUntrustedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKgAAAEF1ZGl0Q2VydGlmaWNhdGVVbnRydXN0ZWRFdmVudFR5cGVJbnN0" +
           "YW5jZQEAJwgBACcI/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAD0NAC4ARD0NAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAD4NAC4ARD4NAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQA/DQAuAEQ/DQAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEAQA0ALgBEQA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAEENAC4AREENAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBC" +
           "DQAuAERCDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAEMNAC4AREMN" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAEQNAC4AREQNAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEARQ0ALgBERQ0AAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEARg0ALgBERg0AAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQBHDQAuAERHDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAEgNAC4AREgNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAEkNAC4AREkNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAEoNAC4AREoNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABDZXJ0aWZpY2F0ZQEASw0A" +
           "LgBESw0AAAAP/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateRevokedEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateRevokedEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateRevokedEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateRevokedEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateRevokedEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateRevokedEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAEF1ZGl0Q2VydGlmaWNhdGVSZXZva2VkRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBACgIAQAoCP////8PAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBMDQAuAERMDQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBNDQAuAERNDQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEATg0ALgBETg0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBAE8NAC4ARE8NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQBQDQAuAERQDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAUQ0A" +
           "LgBEUQ0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBSDQAuAERSDQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBTDQAuAERTDQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAFQNAC4ARFQNAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAFUNAC4ARFUNAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEAVg0ALgBEVg0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQBXDQAuAERXDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQBYDQAuAERYDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQBZDQAuAERZDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUBAFoNAC4A" +
           "RFoNAAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditCertificateMismatchEventState Class
    #if (!OPCUA_EXCLUDE_AuditCertificateMismatchEventState)
    /// <summary>
    /// Stores an instance of the AuditCertificateMismatchEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditCertificateMismatchEventState : AuditCertificateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditCertificateMismatchEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditCertificateMismatchEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKQAAAEF1ZGl0Q2VydGlmaWNhdGVNaXNtYXRjaEV2ZW50VHlwZUluc3Rh" +
           "bmNlAQApCAEAKQj/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAWw0ALgBEWw0AAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAXA0ALgBEXA0AAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAF0NAC4ARF0NAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAQBeDQAuAEReDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQEAXw0ALgBEXw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAGAN" +
           "AC4ARGANAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAYQ0ALgBEYQ0A" +
           "AAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAYg0ALgBEYg0AAAAV/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBjDQAuAERjDQAAAAX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQBkDQAuAERkDQAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAYAAABTdGF0dXMBAGUNAC4ARGUNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABT" +
           "ZXJ2ZXJJZAEAZg0ALgBEZg0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0" +
           "RW50cnlJZAEAZw0ALgBEZw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJ" +
           "ZAEAaA0ALgBEaA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAENlcnRpZmljYXRlAQBpDQAu" +
           "AERpDQAAAA//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditNodeManagementEventState Class
    #if (!OPCUA_EXCLUDE_AuditNodeManagementEventState)
    /// <summary>
    /// Stores an instance of the AuditNodeManagementEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditNodeManagementEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditNodeManagementEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditNodeManagementEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJAAAAEF1ZGl0Tm9kZU1hbmFnZW1lbnRFdmVudFR5cGVJbnN0YW5jZQEA" +
           "KggBACoI/////w4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAGoNAC4ARGoNAAAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAGsNAC4ARGsNAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAQBsDQAuAERsDQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTmFtZQEAbQ0ALgBEbQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAG4N" +
           "AC4ARG4NAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBvDQAuAERv" +
           "DQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAHANAC4ARHANAAABANAi" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAHENAC4ARHENAAAAFf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAcg0ALgBEcg0AAAAF/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADwAAAEFjdGlvblRpbWVTdGFtcAEAcw0ALgBEcw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAGAAAAU3RhdHVzAQB0DQAuAER0DQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVy" +
           "SWQBAHUNAC4ARHUNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5" +
           "SWQBAHYNAC4ARHYNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAHcN" +
           "AC4ARHcNAAAADP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditAddNodesEventState Class
    #if (!OPCUA_EXCLUDE_AuditAddNodesEventState)
    /// <summary>
    /// Stores an instance of the AuditAddNodesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditAddNodesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditAddNodesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditAddNodesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHgAAAEF1ZGl0QWRkTm9kZXNFdmVudFR5cGVJbnN0YW5jZQEAKwgBACsI" +
           "/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAHgNAC4ARHgNAAAAD/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABFdmVudFR5cGUBAHkNAC4ARHkNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOb2RlAQB6DQAuAER6DQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "TmFtZQEAew0ALgBEew0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAHwNAC4ARHwN" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQB9DQAuAER9DQAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAH4NAC4ARH4NAAABANAi/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAH8NAC4ARH8NAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAgAAABTZXZlcml0eQEAgA0ALgBEgA0AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAADwAA" +
           "AEFjdGlvblRpbWVTdGFtcAEAgQ0ALgBEgQ0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAA" +
           "U3RhdHVzAQCCDQAuAESCDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQBAIMN" +
           "AC4ARIMNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQBAIQN" +
           "AC4ARIQNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAIUNAC4ARIUN" +
           "AAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABOb2Rlc1RvQWRkAQAsCAAuAEQsCAAAAQB4AQEA" +
           "AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AddNodesItem[]> NodesToAdd
        {
            get
            {
                return m_nodesToAdd;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodesToAdd, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodesToAdd = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodesToAdd != null)
            {
                children.Add(m_nodesToAdd);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodesToAdd:
                {
                    if (createOrReplace)
                    {
                        if (NodesToAdd == null)
                        {
                            if (replacement == null)
                            {
                                NodesToAdd = new PropertyState<AddNodesItem[]>(this);
                            }
                            else
                            {
                                NodesToAdd = (PropertyState<AddNodesItem[]>)replacement;
                            }
                        }
                    }

                    instance = NodesToAdd;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AddNodesItem[]> m_nodesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AuditDeleteNodesEventState Class
    #if (!OPCUA_EXCLUDE_AuditDeleteNodesEventState)
    /// <summary>
    /// Stores an instance of the AuditDeleteNodesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditDeleteNodesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditDeleteNodesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditDeleteNodesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAEF1ZGl0RGVsZXRlTm9kZXNFdmVudFR5cGVJbnN0YW5jZQEALQgB" +
           "AC0I/////w8AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAIYNAC4ARIYNAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAIcNAC4ARIcNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQCIDQAuAESIDQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEAiQ0ALgBEiQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAIoNAC4A" +
           "RIoNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCLDQAuAESLDQAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAIwNAC4ARIwNAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAI0NAC4ARI0NAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEAjg0ALgBEjg0AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEAjw0ALgBEjw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQCQDQAuAESQDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "AJENAC4ARJENAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "AJINAC4ARJINAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAJMNAC4A" +
           "RJMNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABOb2Rlc1RvRGVsZXRlAQAuCAAuAEQuCAAA" +
           "AQB+AQEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DeleteNodesItem[]> NodesToDelete
        {
            get
            {
                return m_nodesToDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nodesToDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nodesToDelete = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_nodesToDelete != null)
            {
                children.Add(m_nodesToDelete);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NodesToDelete:
                {
                    if (createOrReplace)
                    {
                        if (NodesToDelete == null)
                        {
                            if (replacement == null)
                            {
                                NodesToDelete = new PropertyState<DeleteNodesItem[]>(this);
                            }
                            else
                            {
                                NodesToDelete = (PropertyState<DeleteNodesItem[]>)replacement;
                            }
                        }
                    }

                    instance = NodesToDelete;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DeleteNodesItem[]> m_nodesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region AuditAddReferencesEventState Class
    #if (!OPCUA_EXCLUDE_AuditAddReferencesEventState)
    /// <summary>
    /// Stores an instance of the AuditAddReferencesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditAddReferencesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditAddReferencesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditAddReferencesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEF1ZGl0QWRkUmVmZXJlbmNlc0V2ZW50VHlwZUluc3RhbmNlAQAv" +
           "CAEALwj/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAlA0ALgBElA0AAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAlQ0ALgBElQ0AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAJYNAC4ARJYNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQCXDQAuAESXDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAmA0A" +
           "LgBEmA0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAJkNAC4ARJkN" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAmg0ALgBEmg0AAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAmw0ALgBEmw0AAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCcDQAuAEScDQAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAAQWN0aW9uVGltZVN0YW1wAQCdDQAuAESdDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABTdGF0dXMBAJ4NAC4ARJ4NAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJ" +
           "ZAEAnw0ALgBEnw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJ" +
           "ZAEAoA0ALgBEoA0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAoQ0A" +
           "LgBEoQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAFJlZmVyZW5jZXNUb0FkZAEAMAgALgBE" +
           "MAgAAAEAewEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AddReferencesItem[]> ReferencesToAdd
        {
            get
            {
                return m_referencesToAdd;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referencesToAdd, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referencesToAdd = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referencesToAdd != null)
            {
                children.Add(m_referencesToAdd);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferencesToAdd:
                {
                    if (createOrReplace)
                    {
                        if (ReferencesToAdd == null)
                        {
                            if (replacement == null)
                            {
                                ReferencesToAdd = new PropertyState<AddReferencesItem[]>(this);
                            }
                            else
                            {
                                ReferencesToAdd = (PropertyState<AddReferencesItem[]>)replacement;
                            }
                        }
                    }

                    instance = ReferencesToAdd;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AddReferencesItem[]> m_referencesToAdd;
        #endregion
    }
    #endif
    #endregion

    #region AuditDeleteReferencesEventState Class
    #if (!OPCUA_EXCLUDE_AuditDeleteReferencesEventState)
    /// <summary>
    /// Stores an instance of the AuditDeleteReferencesEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditDeleteReferencesEventState : AuditNodeManagementEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditDeleteReferencesEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditDeleteReferencesEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAEF1ZGl0RGVsZXRlUmVmZXJlbmNlc0V2ZW50VHlwZUluc3RhbmNl" +
           "AQAxCAEAMQj/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAog0ALgBEog0AAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAow0ALgBEow0AAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAKQNAC4ARKQNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQClDQAuAESlDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "pg0ALgBEpg0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAKcNAC4A" +
           "RKcNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAqA0ALgBEqA0AAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAqQ0ALgBEqQ0AAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCqDQAuAESqDQAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQCrDQAuAESrDQAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABTdGF0dXMBAKwNAC4ARKwNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2" +
           "ZXJJZAEArQ0ALgBErQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50" +
           "cnlJZAEArg0ALgBErg0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA" +
           "rw0ALgBErw0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAFJlZmVyZW5jZXNUb0RlbGV0ZQEA" +
           "MggALgBEMggAAAEAgQEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DeleteReferencesItem[]> ReferencesToDelete
        {
            get
            {
                return m_referencesToDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_referencesToDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_referencesToDelete = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_referencesToDelete != null)
            {
                children.Add(m_referencesToDelete);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReferencesToDelete:
                {
                    if (createOrReplace)
                    {
                        if (ReferencesToDelete == null)
                        {
                            if (replacement == null)
                            {
                                ReferencesToDelete = new PropertyState<DeleteReferencesItem[]>(this);
                            }
                            else
                            {
                                ReferencesToDelete = (PropertyState<DeleteReferencesItem[]>)replacement;
                            }
                        }
                    }

                    instance = ReferencesToDelete;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DeleteReferencesItem[]> m_referencesToDelete;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAEF1ZGl0VXBkYXRlRXZlbnRUeXBlSW5zdGFuY2UBADMIAQAzCP//" +
           "//8OAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCwDQAuAESwDQAAAA//////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAARXZlbnRUeXBlAQCxDQAuAESxDQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTm9kZQEAsg0ALgBEsg0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5h" +
           "bWUBALMNAC4ARLMNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQC0DQAuAES0DQAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAtQ0ALgBEtQ0AAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQC2DQAuAES2DQAAAQDQIv////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQC3DQAuAES3DQAAABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAIAAAAU2V2ZXJpdHkBALgNAC4ARLgNAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABB" +
           "Y3Rpb25UaW1lU3RhbXABALkNAC4ARLkNAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFN0" +
           "YXR1cwEAug0ALgBEug0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAQC7DQAu" +
           "AES7DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAQC8DQAu" +
           "AES8DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQC9DQAuAES9DQAA" +
           "AAz/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditWriteUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditWriteUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditWriteUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditWriteUpdateEventState : AuditUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditWriteUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditWriteUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAEF1ZGl0V3JpdGVVcGRhdGVFdmVudFR5cGVJbnN0YW5jZQEANAgB" +
           "ADQI/////xIAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAL4NAC4ARL4NAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAL8NAC4ARL8NAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQDADQAuAETADQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEAwQ0ALgBEwQ0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAMINAC4A" +
           "RMINAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDDDQAuAETDDQAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAMQNAC4ARMQNAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAMUNAC4ARMUNAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEAxg0ALgBExg0AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEAxw0ALgBExw0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQDIDQAuAETIDQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "AMkNAC4ARMkNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "AMoNAC4ARMoNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBAMsNAC4A" +
           "RMsNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABBdHRyaWJ1dGVJZAEAvgoALgBEvgoAAAAH" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAEluZGV4UmFuZ2UBADUIAC4ARDUIAAABACMB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACAAAAE9sZFZhbHVlAQA2CAAuAEQ2CAAAABj/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAATmV3VmFsdWUBADcIAC4ARDcIAAAAGP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> AttributeId
        {
            get
            {
                return m_attributeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_attributeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_attributeId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> IndexRange
        {
            get
            {
                return m_indexRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_indexRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_indexRange = value;
            }
        }

        /// <remarks />
        public PropertyState OldValue
        {
            get
            {
                return m_oldValue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValue = value;
            }
        }

        /// <remarks />
        public PropertyState NewValue
        {
            get
            {
                return m_newValue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValue = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_attributeId != null)
            {
                children.Add(m_attributeId);
            }

            if (m_indexRange != null)
            {
                children.Add(m_indexRange);
            }

            if (m_oldValue != null)
            {
                children.Add(m_oldValue);
            }

            if (m_newValue != null)
            {
                children.Add(m_newValue);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AttributeId:
                {
                    if (createOrReplace)
                    {
                        if (AttributeId == null)
                        {
                            if (replacement == null)
                            {
                                AttributeId = new PropertyState<uint>(this);
                            }
                            else
                            {
                                AttributeId = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = AttributeId;
                    break;
                }

                case Opc.Ua.BrowseNames.IndexRange:
                {
                    if (createOrReplace)
                    {
                        if (IndexRange == null)
                        {
                            if (replacement == null)
                            {
                                IndexRange = new PropertyState<string>(this);
                            }
                            else
                            {
                                IndexRange = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = IndexRange;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValue:
                {
                    if (createOrReplace)
                    {
                        if (OldValue == null)
                        {
                            if (replacement == null)
                            {
                                OldValue = new PropertyState(this);
                            }
                            else
                            {
                                OldValue = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = OldValue;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValue:
                {
                    if (createOrReplace)
                    {
                        if (NewValue == null)
                        {
                            if (replacement == null)
                            {
                                NewValue = new PropertyState(this);
                            }
                            else
                            {
                                NewValue = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NewValue;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_attributeId;
        private PropertyState<string> m_indexRange;
        private PropertyState m_oldValue;
        private PropertyState m_newValue;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryUpdateEventState : AuditUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEF1ZGl0SGlzdG9yeVVwZGF0ZUV2ZW50VHlwZUluc3RhbmNlAQA4" +
           "CAEAOAj/////DwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAzA0ALgBEzA0AAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAzQ0ALgBEzQ0AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAM4NAC4ARM4NAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQDPDQAuAETPDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA0A0A" +
           "LgBE0A0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBANENAC4ARNEN" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA0g0ALgBE0g0AAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA0w0ALgBE0w0AAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDUDQAuAETUDQAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAAQWN0aW9uVGltZVN0YW1wAQDVDQAuAETVDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABTdGF0dXMBANYNAC4ARNYNAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJ" +
           "ZAEA1w0ALgBE1w0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJ" +
           "ZAEA2A0ALgBE2A0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA2Q0A" +
           "LgBE2Q0AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFUeXBlSWQBAL8K" +
           "AC4ARL8KAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ParameterDataTypeId
        {
            get
            {
                return m_parameterDataTypeId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_parameterDataTypeId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_parameterDataTypeId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_parameterDataTypeId != null)
            {
                children.Add(m_parameterDataTypeId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ParameterDataTypeId:
                {
                    if (createOrReplace)
                    {
                        if (ParameterDataTypeId == null)
                        {
                            if (replacement == null)
                            {
                                ParameterDataTypeId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ParameterDataTypeId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ParameterDataTypeId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_parameterDataTypeId;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateMethodEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateMethodEventState)
    /// <summary>
    /// Stores an instance of the AuditUpdateMethodEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateMethodEventState : AuditEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUpdateMethodEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateMethodEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAEF1ZGl0VXBkYXRlTWV0aG9kRXZlbnRUeXBlSW5zdGFuY2UBAE8I" +
           "AQBPCP////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQA3DgAuAEQ3DgAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQA4DgAuAEQ4DgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEAOQ4ALgBEOQ4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBADoOAC4ARDoOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQA7DgAu" +
           "AEQ7DgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAPA4ALgBEPA4A" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQA9DgAuAEQ9DgAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQA+DgAuAEQ+DgAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAD8OAC4ARD8OAAAABf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABBY3Rpb25UaW1lU3RhbXABAEAOAC4AREAOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "BgAAAFN0YXR1cwEAQQ4ALgBEQQ4AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklk" +
           "AQBCDgAuAERCDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlk" +
           "AQBDDgAuAERDDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQBEDgAu" +
           "AEREDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAFAIAC4ARFAIAAAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAUQgALgBEUQgAAAAYAQAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> MethodId
        {
            get
            {
                return m_methodId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_methodId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_methodId = value;
            }
        }

        /// <remarks />
        public PropertyState<object[]> InputArguments
        {
            get
            {
                return m_inputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputArguments = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_methodId != null)
            {
                children.Add(m_methodId);
            }

            if (m_inputArguments != null)
            {
                children.Add(m_inputArguments);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.MethodId:
                {
                    if (createOrReplace)
                    {
                        if (MethodId == null)
                        {
                            if (replacement == null)
                            {
                                MethodId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                MethodId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = MethodId;
                    break;
                }

                case Opc.Ua.BrowseNames.InputArguments:
                {
                    if (createOrReplace)
                    {
                        if (InputArguments == null)
                        {
                            if (replacement == null)
                            {
                                InputArguments = new PropertyState<object[]>(this);
                            }
                            else
                            {
                                InputArguments = (PropertyState<object[]>)replacement;
                            }
                        }
                    }

                    instance = InputArguments;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_methodId;
        private PropertyState<object[]> m_inputArguments;
        #endregion
    }
    #endif
    #endregion

    #region SystemEventState Class
    #if (!OPCUA_EXCLUDE_SystemEventState)
    /// <summary>
    /// Stores an instance of the SystemEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFwAAAFN5c3RlbUV2ZW50VHlwZUluc3RhbmNlAQBSCAEAUgj/////CQAA" +
           "ABVgiQoCAAAAAAAHAAAARXZlbnRJZAEARQ4ALgBERQ4AAAAP/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CQAAAEV2ZW50VHlwZQEARg4ALgBERg4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5vZGUBAEcOAC4AREcOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1lAQBI" +
           "DgAuAERIDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEASQ4ALgBESQ4AAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAEoOAC4AREoOAAABACYB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEASw4ALgBESw4AAAEA0CL/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAHAAAATWVzc2FnZQEATA4ALgBETA4AAAAV/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CAAAAFNldmVyaXR5AQBNDgAuAERNDgAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DeviceFailureEventState Class
    #if (!OPCUA_EXCLUDE_DeviceFailureEventState)
    /// <summary>
    /// Stores an instance of the DeviceFailureEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DeviceFailureEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DeviceFailureEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DeviceFailureEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHgAAAERldmljZUZhaWx1cmVFdmVudFR5cGVJbnN0YW5jZQEAUwgBAFMI" +
           "/////wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAE4OAC4ARE4OAAAAD/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABFdmVudFR5cGUBAE8OAC4ARE8OAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOb2RlAQBQDgAuAERQDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "TmFtZQEAUQ4ALgBEUQ4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAFIOAC4ARFIO" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBTDgAuAERTDgAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAFQOAC4ARFQOAAABANAi/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAFUOAC4ARFUOAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAgAAABTZXZlcml0eQEAVg4ALgBEVg4AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemStatusChangeEventState Class
    #if (!OPCUA_EXCLUDE_SystemStatusChangeEventState)
    /// <summary>
    /// Stores an instance of the SystemStatusChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemStatusChangeEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemStatusChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemStatusChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAFN5c3RlbVN0YXR1c0NoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQC2" +
           "LAEAtiz/////CgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAtywALgBEtywAAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAuCwALgBEuCwAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBALksAC4ARLksAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQC6LAAuAES6LAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAuywA" +
           "LgBEuywAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBALwsAC4ARLws" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAvSwALgBEvSwAAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAviwALgBEviwAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQC/LAAuAES/LAAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAALAAAAU3lzdGVtU3RhdGUBALAtAC4ARLAtAAABAFQD/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ServerState> SystemState
        {
            get
            {
                return m_systemState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_systemState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_systemState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_systemState != null)
            {
                children.Add(m_systemState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SystemState:
                {
                    if (createOrReplace)
                    {
                        if (SystemState == null)
                        {
                            if (replacement == null)
                            {
                                SystemState = new PropertyState<ServerState>(this);
                            }
                            else
                            {
                                SystemState = (PropertyState<ServerState>)replacement;
                            }
                        }
                    }

                    instance = SystemState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ServerState> m_systemState;
        #endregion
    }
    #endif
    #endregion

    #region BaseModelChangeEventState Class
    #if (!OPCUA_EXCLUDE_BaseModelChangeEventState)
    /// <summary>
    /// Stores an instance of the BaseModelChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseModelChangeEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BaseModelChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseModelChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIAAAAEJhc2VNb2RlbENoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQBUCAEA" +
           "VAj/////CQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAVw4ALgBEVw4AAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAWA4ALgBEWA4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUBAFkOAC4ARFkOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOYW1lAQBaDgAuAERaDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAWw4ALgBE" +
           "Ww4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAFwOAC4ARFwOAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAXQ4ALgBEXQ4AAAEA0CL/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAXg4ALgBEXg4AAAAV/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACAAAAFNldmVyaXR5AQBfDgAuAERfDgAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region GeneralModelChangeEventState Class
    #if (!OPCUA_EXCLUDE_GeneralModelChangeEventState)
    /// <summary>
    /// Stores an instance of the GeneralModelChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GeneralModelChangeEventState : BaseModelChangeEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GeneralModelChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.GeneralModelChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEdlbmVyYWxNb2RlbENoYW5nZUV2ZW50VHlwZUluc3RhbmNlAQBV" +
           "CAEAVQj/////CgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAYA4ALgBEYA4AAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAYQ4ALgBEYQ4AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAGIOAC4ARGIOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQBjDgAuAERjDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAZA4A" +
           "LgBEZA4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAGUOAC4ARGUO" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAZg4ALgBEZg4AAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAZw4ALgBEZw4AAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBoDgAuAERoDgAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAHAAAAQ2hhbmdlcwEAVggALgBEVggAAAEAbQMBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<ModelChangeStructureDataType[]> Changes
        {
            get
            {
                return m_changes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_changes != null)
            {
                children.Add(m_changes);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Changes:
                {
                    if (createOrReplace)
                    {
                        if (Changes == null)
                        {
                            if (replacement == null)
                            {
                                Changes = new PropertyState<ModelChangeStructureDataType[]>(this);
                            }
                            else
                            {
                                Changes = (PropertyState<ModelChangeStructureDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Changes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<ModelChangeStructureDataType[]> m_changes;
        #endregion
    }
    #endif
    #endregion

    #region SemanticChangeEventState Class
    #if (!OPCUA_EXCLUDE_SemanticChangeEventState)
    /// <summary>
    /// Stores an instance of the SemanticChangeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SemanticChangeEventState : BaseModelChangeEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SemanticChangeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SemanticChangeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAFNlbWFudGljQ2hhbmdlRXZlbnRUeXBlSW5zdGFuY2UBALIKAQCy" +
           "Cv////8KAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBpDgAuAERpDgAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQBqDgAuAERqDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEAaw4ALgBEaw4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAGwOAC4ARGwOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQBtDgAuAERt" +
           "DgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAbg4ALgBEbg4AAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBvDgAuAERvDgAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBwDgAuAERwDgAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAHEOAC4ARHEOAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABDaGFuZ2VzAQCzCgAuAESzCgAAAQCBAwEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<SemanticChangeStructureDataType[]> Changes
        {
            get
            {
                return m_changes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_changes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_changes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_changes != null)
            {
                children.Add(m_changes);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Changes:
                {
                    if (createOrReplace)
                    {
                        if (Changes == null)
                        {
                            if (replacement == null)
                            {
                                Changes = new PropertyState<SemanticChangeStructureDataType[]>(this);
                            }
                            else
                            {
                                Changes = (PropertyState<SemanticChangeStructureDataType[]>)replacement;
                            }
                        }
                    }

                    instance = Changes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<SemanticChangeStructureDataType[]> m_changes;
        #endregion
    }
    #endif
    #endregion

    #region EventQueueOverflowEventState Class
    #if (!OPCUA_EXCLUDE_EventQueueOverflowEventState)
    /// <summary>
    /// Stores an instance of the EventQueueOverflowEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class EventQueueOverflowEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public EventQueueOverflowEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.EventQueueOverflowEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEV2ZW50UXVldWVPdmVyZmxvd0V2ZW50VHlwZUluc3RhbmNlAQDb" +
           "CwEA2wv/////CQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAdwwALgBEdwwAAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAeAwALgBEeAwAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAHkMAC4ARHkMAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQB6DAAuAER6DAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAewwA" +
           "LgBEewwAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAHwMAC4ARHwM" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAfQwALgBEfQwAAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAfgwALgBEfgwAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQB/DAAuAER/DAAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProgressEventState Class
    #if (!OPCUA_EXCLUDE_ProgressEventState)
    /// <summary>
    /// Stores an instance of the ProgressEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgressEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgressEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgressEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGQAAAFByb2dyZXNzRXZlbnRUeXBlSW5zdGFuY2UBAKwsAQCsLP////8L" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCtLAAuAEStLAAAAA//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAARXZlbnRUeXBlAQCuLAAuAESuLAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTm9kZQEArywALgBErywAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUB" +
           "ALAsAC4ARLAsAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCxLAAuAESxLAAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAsiwALgBEsiwAAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCzLAAuAESzLAAAAQDQIv////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQC0LAAuAES0LAAAABX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2V2ZXJpdHkBALUsAC4ARLUsAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb250" +
           "ZXh0AQDWMAAuAETWMAAAABj/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAUHJvZ3Jlc3MBANcwAC4A" +
           "RNcwAAAABf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Context
        {
            get
            {
                return m_context;
            }

            set
            {
                if (!Object.ReferenceEquals(m_context, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_context = value;
            }
        }

        /// <remarks />
        public PropertyState<ushort> Progress
        {
            get
            {
                return m_progress;
            }

            set
            {
                if (!Object.ReferenceEquals(m_progress, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_progress = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_context != null)
            {
                children.Add(m_context);
            }

            if (m_progress != null)
            {
                children.Add(m_progress);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Context:
                {
                    if (createOrReplace)
                    {
                        if (Context == null)
                        {
                            if (replacement == null)
                            {
                                Context = new PropertyState(this);
                            }
                            else
                            {
                                Context = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Context;
                    break;
                }

                case Opc.Ua.BrowseNames.Progress:
                {
                    if (createOrReplace)
                    {
                        if (Progress == null)
                        {
                            if (replacement == null)
                            {
                                Progress = new PropertyState<ushort>(this);
                            }
                            else
                            {
                                Progress = (PropertyState<ushort>)replacement;
                            }
                        }
                    }

                    instance = Progress;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_context;
        private PropertyState<ushort> m_progress;
        #endregion
    }
    #endif
    #endregion

    #region AggregateFunctionState Class
    #if (!OPCUA_EXCLUDE_AggregateFunctionState)
    /// <summary>
    /// Stores an instance of the AggregateFunctionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AggregateFunctionState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AggregateFunctionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AggregateFunctionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHQAAAEFnZ3JlZ2F0ZUZ1bmN0aW9uVHlwZUluc3RhbmNlAQAkCQEAJAn/" +
           "////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ServerVendorCapabilityState Class
    #if (!OPCUA_EXCLUDE_ServerVendorCapabilityState)
    /// <summary>
    /// Stores an instance of the ServerVendorCapabilityType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerVendorCapabilityState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerVendorCapabilityState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerVendorCapabilityType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAIgAAAFNlcnZlclZlbmRvckNhcGFiaWxpdHlUeXBlSW5zdGFuY2UBAFkI" +
           "AQBZCAAY/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region ServerVendorCapabilityState<T> Class
    /// <summary>
    /// A typed version of the ServerVendorCapabilityType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerVendorCapabilityState<T> : ServerVendorCapabilityState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ServerVendorCapabilityState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ServerStatusState Class
    #if (!OPCUA_EXCLUDE_ServerStatusState)
    /// <summary>
    /// Stores an instance of the ServerStatusType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerStatusState : BaseDataVariableState<ServerStatusDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerStatusState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerStatusType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ServerStatusDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAGAAAAFNlcnZlclN0YXR1c1R5cGVJbnN0YW5jZQEAWggBAFoIAQBeA///" +
           "//8BAf////8GAAAAFWCJCgIAAAAAAAkAAABTdGFydFRpbWUBAFsIAC8AP1sIAAABACYB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACwAAAEN1cnJlbnRUaW1lAQBcCAAvAD9cCAAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAUAAABTdGF0ZQEAXQgALwA/XQgAAAEAVAP/////AQH/////AAAAABVgiQoCAAAAAAAJ" +
           "AAAAQnVpbGRJbmZvAQBeCAAvAQDrC14IAAABAFIB/////wEB/////wYAAAAVcIkKAgAAAAAACgAAAFBy" +
           "b2R1Y3RVcmkBAHIOAC8AP3IOAAAADP////8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAAEAAAAE1h" +
           "bnVmYWN0dXJlck5hbWUBAHMOAC8AP3MOAAAADP////8BAQAAAAAAQI9A/////wAAAAAVcIkKAgAAAAAA" +
           "CwAAAFByb2R1Y3ROYW1lAQB0DgAvAD90DgAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAA" +
           "AA8AAABTb2Z0d2FyZVZlcnNpb24BAHUOAC8AP3UOAAAADP////8BAQAAAAAAQI9A/////wAAAAAVcIkK" +
           "AgAAAAAACwAAAEJ1aWxkTnVtYmVyAQB2DgAvAD92DgAAAAz/////AQEAAAAAAECPQP////8AAAAAFXCJ" +
           "CgIAAAAAAAkAAABCdWlsZERhdGUBAHcOAC8AP3cOAAABACYB/////wEBAAAAAABAj0D/////AAAAABVg" +
           "iQoCAAAAAAATAAAAU2Vjb25kc1RpbGxTaHV0ZG93bgEAwAoALwA/wAoAAAAH/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADgAAAFNodXRkb3duUmVhc29uAQDBCgAvAD/BCgAAABX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> CurrentTime
        {
            get
            {
                return m_currentTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServerState> State
        {
            get
            {
                return m_state;
            }

            set
            {
                if (!Object.ReferenceEquals(m_state, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_state = value;
            }
        }

        /// <remarks />
        public BuildInfoVariableState BuildInfo
        {
            get
            {
                return m_buildInfo;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildInfo, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildInfo = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecondsTillShutdown
        {
            get
            {
                return m_secondsTillShutdown;
            }

            set
            {
                if (!Object.ReferenceEquals(m_secondsTillShutdown, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_secondsTillShutdown = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<LocalizedText> ShutdownReason
        {
            get
            {
                return m_shutdownReason;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shutdownReason, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shutdownReason = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_currentTime != null)
            {
                children.Add(m_currentTime);
            }

            if (m_state != null)
            {
                children.Add(m_state);
            }

            if (m_buildInfo != null)
            {
                children.Add(m_buildInfo);
            }

            if (m_secondsTillShutdown != null)
            {
                children.Add(m_secondsTillShutdown);
            }

            if (m_shutdownReason != null)
            {
                children.Add(m_shutdownReason);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentTime:
                {
                    if (createOrReplace)
                    {
                        if (CurrentTime == null)
                        {
                            if (replacement == null)
                            {
                                CurrentTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                CurrentTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = CurrentTime;
                    break;
                }

                case Opc.Ua.BrowseNames.State:
                {
                    if (createOrReplace)
                    {
                        if (State == null)
                        {
                            if (replacement == null)
                            {
                                State = new BaseDataVariableState<ServerState>(this);
                            }
                            else
                            {
                                State = (BaseDataVariableState<ServerState>)replacement;
                            }
                        }
                    }

                    instance = State;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildInfo:
                {
                    if (createOrReplace)
                    {
                        if (BuildInfo == null)
                        {
                            if (replacement == null)
                            {
                                BuildInfo = new BuildInfoVariableState(this);
                            }
                            else
                            {
                                BuildInfo = (BuildInfoVariableState)replacement;
                            }
                        }
                    }

                    instance = BuildInfo;
                    break;
                }

                case Opc.Ua.BrowseNames.SecondsTillShutdown:
                {
                    if (createOrReplace)
                    {
                        if (SecondsTillShutdown == null)
                        {
                            if (replacement == null)
                            {
                                SecondsTillShutdown = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecondsTillShutdown = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecondsTillShutdown;
                    break;
                }

                case Opc.Ua.BrowseNames.ShutdownReason:
                {
                    if (createOrReplace)
                    {
                        if (ShutdownReason == null)
                        {
                            if (replacement == null)
                            {
                                ShutdownReason = new BaseDataVariableState<LocalizedText>(this);
                            }
                            else
                            {
                                ShutdownReason = (BaseDataVariableState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ShutdownReason;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<DateTime> m_startTime;
        private BaseDataVariableState<DateTime> m_currentTime;
        private BaseDataVariableState<ServerState> m_state;
        private BuildInfoVariableState m_buildInfo;
        private BaseDataVariableState<uint> m_secondsTillShutdown;
        private BaseDataVariableState<LocalizedText> m_shutdownReason;
        #endregion
    }

    #region ServerStatusValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerStatusValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ServerStatusValue(ServerStatusState variable, ServerStatusDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ServerStatusDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public ServerStatusState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public ServerStatusDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(ServerStatusState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.StartTime;
                instance.OnReadValue = OnRead_StartTime;
                instance.OnSimpleWriteValue = OnWrite_StartTime;
                updateList.Add(instance);
                instance = m_variable.CurrentTime;
                instance.OnReadValue = OnRead_CurrentTime;
                instance.OnSimpleWriteValue = OnWrite_CurrentTime;
                updateList.Add(instance);
                instance = m_variable.State;
                instance.OnReadValue = OnRead_State;
                instance.OnSimpleWriteValue = OnWrite_State;
                updateList.Add(instance);
                instance = m_variable.BuildInfo;
                instance.OnReadValue = OnRead_BuildInfo;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.ProductUri;
                instance.OnReadValue = OnRead_BuildInfo_ProductUri;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_ProductUri;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.ManufacturerName;
                instance.OnReadValue = OnRead_BuildInfo_ManufacturerName;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_ManufacturerName;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.ProductName;
                instance.OnReadValue = OnRead_BuildInfo_ProductName;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_ProductName;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.SoftwareVersion;
                instance.OnReadValue = OnRead_BuildInfo_SoftwareVersion;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_SoftwareVersion;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.BuildNumber;
                instance.OnReadValue = OnRead_BuildInfo_BuildNumber;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_BuildNumber;
                updateList.Add(instance);
                instance = m_variable.BuildInfo.BuildDate;
                instance.OnReadValue = OnRead_BuildInfo_BuildDate;
                instance.OnSimpleWriteValue = OnWrite_BuildInfo_BuildDate;
                updateList.Add(instance);
                instance = m_variable.SecondsTillShutdown;
                instance.OnReadValue = OnRead_SecondsTillShutdown;
                instance.OnSimpleWriteValue = OnWrite_SecondsTillShutdown;
                updateList.Add(instance);
                instance = m_variable.ShutdownReason;
                instance.OnReadValue = OnRead_ShutdownReason;
                instance.OnSimpleWriteValue = OnWrite_ShutdownReason;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (ServerStatusDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region StartTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_StartTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.StartTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_StartTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.StartTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region State Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_State(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.State;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_State(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.State = (ServerState)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo = (BuildInfo)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_ProductUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_ProductUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.ProductUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_ProductUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.ProductUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_ManufacturerName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_ManufacturerName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.ManufacturerName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_ManufacturerName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.ManufacturerName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_ProductName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_ProductName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.ProductName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_ProductName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.ProductName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_SoftwareVersion Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_SoftwareVersion(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.SoftwareVersion;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_SoftwareVersion(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.SoftwareVersion = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_BuildNumber Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_BuildNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.BuildNumber;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_BuildNumber(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.BuildNumber = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildInfo_BuildDate Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildInfo_BuildDate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildInfo.BuildDate;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildInfo_BuildDate(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildInfo.BuildDate = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecondsTillShutdown Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecondsTillShutdown(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecondsTillShutdown;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecondsTillShutdown(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecondsTillShutdown = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ShutdownReason Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ShutdownReason(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ShutdownReason;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ShutdownReason(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ShutdownReason = (LocalizedText)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerStatusDataType m_value;
        private ServerStatusState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region BuildInfoVariableState Class
    #if (!OPCUA_EXCLUDE_BuildInfoVariableState)
    /// <summary>
    /// Stores an instance of the BuildInfoType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BuildInfoVariableState : BaseDataVariableState<BuildInfo>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BuildInfoVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.BuildInfoType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BuildInfo, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAFQAAAEJ1aWxkSW5mb1R5cGVJbnN0YW5jZQEA6wsBAOsLAQBSAf////8B" +
           "Af////8GAAAAFXCJCgIAAAAAAAoAAABQcm9kdWN0VXJpAQDsCwAvAD/sCwAAAAz/////AQEAAAAAAECP" +
           "QP////8AAAAAFXCJCgIAAAAAABAAAABNYW51ZmFjdHVyZXJOYW1lAQDtCwAvAD/tCwAAAAz/////AQEA" +
           "AAAAAECPQP////8AAAAAFXCJCgIAAAAAAAsAAABQcm9kdWN0TmFtZQEA7gsALwA/7gsAAAAM/////wEB" +
           "AAAAAABAj0D/////AAAAABVwiQoCAAAAAAAPAAAAU29mdHdhcmVWZXJzaW9uAQDvCwAvAD/vCwAAAAz/" +
           "////AQEAAAAAAECPQP////8AAAAAFXCJCgIAAAAAAAsAAABCdWlsZE51bWJlcgEA8AsALwA/8AsAAAAM" +
           "/////wEBAAAAAABAj0D/////AAAAABVwiQoCAAAAAAAJAAAAQnVpbGREYXRlAQDxCwAvAD/xCwAAAQAm" +
           "Af////8BAQAAAAAAQI9A/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<string> ProductUri
        {
            get
            {
                return m_productUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ManufacturerName
        {
            get
            {
                return m_manufacturerName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_manufacturerName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_manufacturerName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ProductName
        {
            get
            {
                return m_productName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_productName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_productName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SoftwareVersion
        {
            get
            {
                return m_softwareVersion;
            }

            set
            {
                if (!Object.ReferenceEquals(m_softwareVersion, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_softwareVersion = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> BuildNumber
        {
            get
            {
                return m_buildNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildNumber = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> BuildDate
        {
            get
            {
                return m_buildDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_buildDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_buildDate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_productUri != null)
            {
                children.Add(m_productUri);
            }

            if (m_manufacturerName != null)
            {
                children.Add(m_manufacturerName);
            }

            if (m_productName != null)
            {
                children.Add(m_productName);
            }

            if (m_softwareVersion != null)
            {
                children.Add(m_softwareVersion);
            }

            if (m_buildNumber != null)
            {
                children.Add(m_buildNumber);
            }

            if (m_buildDate != null)
            {
                children.Add(m_buildDate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ProductUri:
                {
                    if (createOrReplace)
                    {
                        if (ProductUri == null)
                        {
                            if (replacement == null)
                            {
                                ProductUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ProductUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ManufacturerName:
                {
                    if (createOrReplace)
                    {
                        if (ManufacturerName == null)
                        {
                            if (replacement == null)
                            {
                                ManufacturerName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ManufacturerName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ManufacturerName;
                    break;
                }

                case Opc.Ua.BrowseNames.ProductName:
                {
                    if (createOrReplace)
                    {
                        if (ProductName == null)
                        {
                            if (replacement == null)
                            {
                                ProductName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ProductName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ProductName;
                    break;
                }

                case Opc.Ua.BrowseNames.SoftwareVersion:
                {
                    if (createOrReplace)
                    {
                        if (SoftwareVersion == null)
                        {
                            if (replacement == null)
                            {
                                SoftwareVersion = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SoftwareVersion = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SoftwareVersion;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildNumber:
                {
                    if (createOrReplace)
                    {
                        if (BuildNumber == null)
                        {
                            if (replacement == null)
                            {
                                BuildNumber = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                BuildNumber = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = BuildNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.BuildDate:
                {
                    if (createOrReplace)
                    {
                        if (BuildDate == null)
                        {
                            if (replacement == null)
                            {
                                BuildDate = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                BuildDate = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = BuildDate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<string> m_productUri;
        private BaseDataVariableState<string> m_manufacturerName;
        private BaseDataVariableState<string> m_productName;
        private BaseDataVariableState<string> m_softwareVersion;
        private BaseDataVariableState<string> m_buildNumber;
        private BaseDataVariableState<DateTime> m_buildDate;
        #endregion
    }

    #region BuildInfoVariableValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class BuildInfoVariableValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public BuildInfoVariableValue(BuildInfoVariableState variable, BuildInfo value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new BuildInfo();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public BuildInfoVariableState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public BuildInfo Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(BuildInfoVariableState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.ProductUri;
                instance.OnReadValue = OnRead_ProductUri;
                instance.OnSimpleWriteValue = OnWrite_ProductUri;
                updateList.Add(instance);
                instance = m_variable.ManufacturerName;
                instance.OnReadValue = OnRead_ManufacturerName;
                instance.OnSimpleWriteValue = OnWrite_ManufacturerName;
                updateList.Add(instance);
                instance = m_variable.ProductName;
                instance.OnReadValue = OnRead_ProductName;
                instance.OnSimpleWriteValue = OnWrite_ProductName;
                updateList.Add(instance);
                instance = m_variable.SoftwareVersion;
                instance.OnReadValue = OnRead_SoftwareVersion;
                instance.OnSimpleWriteValue = OnWrite_SoftwareVersion;
                updateList.Add(instance);
                instance = m_variable.BuildNumber;
                instance.OnReadValue = OnRead_BuildNumber;
                instance.OnSimpleWriteValue = OnWrite_BuildNumber;
                updateList.Add(instance);
                instance = m_variable.BuildDate;
                instance.OnReadValue = OnRead_BuildDate;
                instance.OnSimpleWriteValue = OnWrite_BuildDate;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (BuildInfo)Write(value);
            }

            return ServiceResult.Good;
        }

        #region ProductUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ProductUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ProductUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ProductUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ProductUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ManufacturerName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ManufacturerName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ManufacturerName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ManufacturerName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ManufacturerName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ProductName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ProductName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ProductName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ProductName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ProductName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SoftwareVersion Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SoftwareVersion(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SoftwareVersion;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SoftwareVersion(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SoftwareVersion = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildNumber Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildNumber;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildNumber(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildNumber = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BuildDate Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BuildDate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BuildDate;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BuildDate(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BuildDate = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private BuildInfo m_value;
        private BuildInfoVariableState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ServerDiagnosticsSummaryState Class
    #if (!OPCUA_EXCLUDE_ServerDiagnosticsSummaryState)
    /// <summary>
    /// Stores an instance of the ServerDiagnosticsSummaryType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerDiagnosticsSummaryState : BaseDataVariableState<ServerDiagnosticsSummaryDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerDiagnosticsSummaryState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ServerDiagnosticsSummaryType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ServerDiagnosticsSummaryDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAJAAAAFNlcnZlckRpYWdub3N0aWNzU3VtbWFyeVR5cGVJbnN0YW5jZQEA" +
           "ZggBAGYIAQBbA/////8BAf////8MAAAAFWCJCgIAAAAAAA8AAABTZXJ2ZXJWaWV3Q291bnQBAGcIAC8A" +
           "P2cIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABDdXJyZW50U2Vzc2lvbkNvdW50AQBoCAAv" +
           "AD9oCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAQ3VtdWxhdGVkU2Vzc2lvbkNvdW50AQBp" +
           "CAAvAD9pCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAAU2VjdXJpdHlSZWplY3RlZFNlc3Np" +
           "b25Db3VudAEAaggALwA/aggAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAFJlamVjdGVkU2Vz" +
           "c2lvbkNvdW50AQBrCAAvAD9rCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU2Vzc2lvblRp" +
           "bWVvdXRDb3VudAEAbAgALwA/bAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlc3Npb25B" +
           "Ym9ydENvdW50AQBtCAAvAD9tCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAAUHVibGlzaGlu" +
           "Z0ludGVydmFsQ291bnQBAG8IAC8AP28IAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABgAAABDdXJy" +
           "ZW50U3Vic2NyaXB0aW9uQ291bnQBAHAIAC8AP3AIAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABoA" +
           "AABDdW11bGF0ZWRTdWJzY3JpcHRpb25Db3VudAEAcQgALwA/cQgAAAAH/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAHQAAAFNlY3VyaXR5UmVqZWN0ZWRSZXF1ZXN0c0NvdW50AQByCAAvAD9yCAAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAVAAAAUmVqZWN0ZWRSZXF1ZXN0c0NvdW50AQBzCAAvAD9zCAAAAAf/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<uint> ServerViewCount
        {
            get
            {
                return m_serverViewCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverViewCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverViewCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSessionCount
        {
            get
            {
                return m_currentSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CumulatedSessionCount
        {
            get
            {
                return m_cumulatedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cumulatedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cumulatedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecurityRejectedSessionCount
        {
            get
            {
                return m_securityRejectedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityRejectedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityRejectedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RejectedSessionCount
        {
            get
            {
                return m_rejectedSessionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rejectedSessionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rejectedSessionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SessionTimeoutCount
        {
            get
            {
                return m_sessionTimeoutCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionTimeoutCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionTimeoutCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SessionAbortCount
        {
            get
            {
                return m_sessionAbortCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionAbortCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionAbortCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PublishingIntervalCount
        {
            get
            {
                return m_publishingIntervalCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingIntervalCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingIntervalCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSubscriptionCount
        {
            get
            {
                return m_currentSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CumulatedSubscriptionCount
        {
            get
            {
                return m_cumulatedSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cumulatedSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cumulatedSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SecurityRejectedRequestsCount
        {
            get
            {
                return m_securityRejectedRequestsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityRejectedRequestsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityRejectedRequestsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RejectedRequestsCount
        {
            get
            {
                return m_rejectedRequestsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_rejectedRequestsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_rejectedRequestsCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_serverViewCount != null)
            {
                children.Add(m_serverViewCount);
            }

            if (m_currentSessionCount != null)
            {
                children.Add(m_currentSessionCount);
            }

            if (m_cumulatedSessionCount != null)
            {
                children.Add(m_cumulatedSessionCount);
            }

            if (m_securityRejectedSessionCount != null)
            {
                children.Add(m_securityRejectedSessionCount);
            }

            if (m_rejectedSessionCount != null)
            {
                children.Add(m_rejectedSessionCount);
            }

            if (m_sessionTimeoutCount != null)
            {
                children.Add(m_sessionTimeoutCount);
            }

            if (m_sessionAbortCount != null)
            {
                children.Add(m_sessionAbortCount);
            }

            if (m_publishingIntervalCount != null)
            {
                children.Add(m_publishingIntervalCount);
            }

            if (m_currentSubscriptionCount != null)
            {
                children.Add(m_currentSubscriptionCount);
            }

            if (m_cumulatedSubscriptionCount != null)
            {
                children.Add(m_cumulatedSubscriptionCount);
            }

            if (m_securityRejectedRequestsCount != null)
            {
                children.Add(m_securityRejectedRequestsCount);
            }

            if (m_rejectedRequestsCount != null)
            {
                children.Add(m_rejectedRequestsCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ServerViewCount:
                {
                    if (createOrReplace)
                    {
                        if (ServerViewCount == null)
                        {
                            if (replacement == null)
                            {
                                ServerViewCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ServerViewCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ServerViewCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CumulatedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (CumulatedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                CumulatedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CumulatedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CumulatedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityRejectedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (SecurityRejectedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                SecurityRejectedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecurityRejectedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecurityRejectedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RejectedSessionCount:
                {
                    if (createOrReplace)
                    {
                        if (RejectedSessionCount == null)
                        {
                            if (replacement == null)
                            {
                                RejectedSessionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RejectedSessionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RejectedSessionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionTimeoutCount:
                {
                    if (createOrReplace)
                    {
                        if (SessionTimeoutCount == null)
                        {
                            if (replacement == null)
                            {
                                SessionTimeoutCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SessionTimeoutCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SessionTimeoutCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionAbortCount:
                {
                    if (createOrReplace)
                    {
                        if (SessionAbortCount == null)
                        {
                            if (replacement == null)
                            {
                                SessionAbortCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SessionAbortCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SessionAbortCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingIntervalCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishingIntervalCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishingIntervalCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PublishingIntervalCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PublishingIntervalCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSubscriptionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSubscriptionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CumulatedSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CumulatedSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CumulatedSubscriptionCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CumulatedSubscriptionCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CumulatedSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityRejectedRequestsCount:
                {
                    if (createOrReplace)
                    {
                        if (SecurityRejectedRequestsCount == null)
                        {
                            if (replacement == null)
                            {
                                SecurityRejectedRequestsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SecurityRejectedRequestsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SecurityRejectedRequestsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RejectedRequestsCount:
                {
                    if (createOrReplace)
                    {
                        if (RejectedRequestsCount == null)
                        {
                            if (replacement == null)
                            {
                                RejectedRequestsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RejectedRequestsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RejectedRequestsCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<uint> m_serverViewCount;
        private BaseDataVariableState<uint> m_currentSessionCount;
        private BaseDataVariableState<uint> m_cumulatedSessionCount;
        private BaseDataVariableState<uint> m_securityRejectedSessionCount;
        private BaseDataVariableState<uint> m_rejectedSessionCount;
        private BaseDataVariableState<uint> m_sessionTimeoutCount;
        private BaseDataVariableState<uint> m_sessionAbortCount;
        private BaseDataVariableState<uint> m_publishingIntervalCount;
        private BaseDataVariableState<uint> m_currentSubscriptionCount;
        private BaseDataVariableState<uint> m_cumulatedSubscriptionCount;
        private BaseDataVariableState<uint> m_securityRejectedRequestsCount;
        private BaseDataVariableState<uint> m_rejectedRequestsCount;
        #endregion
    }

    #region ServerDiagnosticsSummaryValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ServerDiagnosticsSummaryValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ServerDiagnosticsSummaryValue(ServerDiagnosticsSummaryState variable, ServerDiagnosticsSummaryDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ServerDiagnosticsSummaryDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public ServerDiagnosticsSummaryState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public ServerDiagnosticsSummaryDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(ServerDiagnosticsSummaryState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.ServerViewCount;
                instance.OnReadValue = OnRead_ServerViewCount;
                instance.OnSimpleWriteValue = OnWrite_ServerViewCount;
                updateList.Add(instance);
                instance = m_variable.CurrentSessionCount;
                instance.OnReadValue = OnRead_CurrentSessionCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentSessionCount;
                updateList.Add(instance);
                instance = m_variable.CumulatedSessionCount;
                instance.OnReadValue = OnRead_CumulatedSessionCount;
                instance.OnSimpleWriteValue = OnWrite_CumulatedSessionCount;
                updateList.Add(instance);
                instance = m_variable.SecurityRejectedSessionCount;
                instance.OnReadValue = OnRead_SecurityRejectedSessionCount;
                instance.OnSimpleWriteValue = OnWrite_SecurityRejectedSessionCount;
                updateList.Add(instance);
                instance = m_variable.RejectedSessionCount;
                instance.OnReadValue = OnRead_RejectedSessionCount;
                instance.OnSimpleWriteValue = OnWrite_RejectedSessionCount;
                updateList.Add(instance);
                instance = m_variable.SessionTimeoutCount;
                instance.OnReadValue = OnRead_SessionTimeoutCount;
                instance.OnSimpleWriteValue = OnWrite_SessionTimeoutCount;
                updateList.Add(instance);
                instance = m_variable.SessionAbortCount;
                instance.OnReadValue = OnRead_SessionAbortCount;
                instance.OnSimpleWriteValue = OnWrite_SessionAbortCount;
                updateList.Add(instance);
                instance = m_variable.CurrentSubscriptionCount;
                instance.OnReadValue = OnRead_CurrentSubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentSubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.CumulatedSubscriptionCount;
                instance.OnReadValue = OnRead_CumulatedSubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_CumulatedSubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.PublishingIntervalCount;
                instance.OnReadValue = OnRead_PublishingIntervalCount;
                instance.OnSimpleWriteValue = OnWrite_PublishingIntervalCount;
                updateList.Add(instance);
                instance = m_variable.SecurityRejectedRequestsCount;
                instance.OnReadValue = OnRead_SecurityRejectedRequestsCount;
                instance.OnSimpleWriteValue = OnWrite_SecurityRejectedRequestsCount;
                updateList.Add(instance);
                instance = m_variable.RejectedRequestsCount;
                instance.OnReadValue = OnRead_RejectedRequestsCount;
                instance.OnSimpleWriteValue = OnWrite_RejectedRequestsCount;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (ServerDiagnosticsSummaryDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region ServerViewCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ServerViewCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ServerViewCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ServerViewCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ServerViewCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CumulatedSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CumulatedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CumulatedSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CumulatedSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CumulatedSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityRejectedSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityRejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityRejectedSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityRejectedSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityRejectedSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RejectedSessionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RejectedSessionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RejectedSessionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RejectedSessionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RejectedSessionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionTimeoutCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionTimeoutCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionTimeoutCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionTimeoutCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionTimeoutCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionAbortCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionAbortCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionAbortCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionAbortCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionAbortCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentSubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentSubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentSubscriptionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CumulatedSubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CumulatedSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CumulatedSubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CumulatedSubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CumulatedSubscriptionCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingIntervalCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishingIntervalCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishingIntervalCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishingIntervalCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishingIntervalCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityRejectedRequestsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityRejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityRejectedRequestsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityRejectedRequestsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityRejectedRequestsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RejectedRequestsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RejectedRequestsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RejectedRequestsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RejectedRequestsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RejectedRequestsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ServerDiagnosticsSummaryDataType m_value;
        private ServerDiagnosticsSummaryState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SamplingIntervalDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SamplingIntervalDiagnosticsArrayState : BaseDataVariableState<SamplingIntervalDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SamplingIntervalDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SamplingIntervalDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SamplingIntervalDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAALAAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc0FycmF5VHlwZUlu" +
           "c3RhbmNlAQB0CAEAdAgBAFgDAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SamplingIntervalDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SamplingIntervalDiagnosticsState)
    /// <summary>
    /// Stores an instance of the SamplingIntervalDiagnosticsType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SamplingIntervalDiagnosticsState : BaseDataVariableState<SamplingIntervalDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SamplingIntervalDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SamplingIntervalDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SamplingIntervalDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAJwAAAFNhbXBsaW5nSW50ZXJ2YWxEaWFnbm9zdGljc1R5cGVJbnN0YW5j" +
           "ZQEAdQgBAHUIAQBYA/////8BAf////8EAAAAFWCJCgIAAAAAABAAAABTYW1wbGluZ0ludGVydmFsAQB2" +
           "CAAvAD92CAAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAABoAAABTYW1wbGVkTW9uaXRvcmVkSXRl" +
           "bXNDb3VudAEAsS0ALwA/sS0AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHQAAAE1heFNhbXBsZWRN" +
           "b25pdG9yZWRJdGVtc0NvdW50AQCyLQAvAD+yLQAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAjAAAA" +
           "RGlzYWJsZWRNb25pdG9yZWRJdGVtc1NhbXBsaW5nQ291bnQBALMtAC8AP7MtAAAAB/////8BAf////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<double> SamplingInterval
        {
            get
            {
                return m_samplingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_samplingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_samplingInterval = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SampledMonitoredItemsCount
        {
            get
            {
                return m_sampledMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sampledMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sampledMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxSampledMonitoredItemsCount
        {
            get
            {
                return m_maxSampledMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxSampledMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxSampledMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisabledMonitoredItemsSamplingCount
        {
            get
            {
                return m_disabledMonitoredItemsSamplingCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disabledMonitoredItemsSamplingCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disabledMonitoredItemsSamplingCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_samplingInterval != null)
            {
                children.Add(m_samplingInterval);
            }

            if (m_sampledMonitoredItemsCount != null)
            {
                children.Add(m_sampledMonitoredItemsCount);
            }

            if (m_maxSampledMonitoredItemsCount != null)
            {
                children.Add(m_maxSampledMonitoredItemsCount);
            }

            if (m_disabledMonitoredItemsSamplingCount != null)
            {
                children.Add(m_disabledMonitoredItemsSamplingCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SamplingInterval:
                {
                    if (createOrReplace)
                    {
                        if (SamplingInterval == null)
                        {
                            if (replacement == null)
                            {
                                SamplingInterval = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                SamplingInterval = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = SamplingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.SampledMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (SampledMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                SampledMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SampledMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SampledMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxSampledMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxSampledMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxSampledMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxSampledMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxSampledMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisabledMonitoredItemsSamplingCount:
                {
                    if (createOrReplace)
                    {
                        if (DisabledMonitoredItemsSamplingCount == null)
                        {
                            if (replacement == null)
                            {
                                DisabledMonitoredItemsSamplingCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisabledMonitoredItemsSamplingCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisabledMonitoredItemsSamplingCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<double> m_samplingInterval;
        private BaseDataVariableState<uint> m_sampledMonitoredItemsCount;
        private BaseDataVariableState<uint> m_maxSampledMonitoredItemsCount;
        private BaseDataVariableState<uint> m_disabledMonitoredItemsSamplingCount;
        #endregion
    }

    #region SamplingIntervalDiagnosticsValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SamplingIntervalDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SamplingIntervalDiagnosticsValue(SamplingIntervalDiagnosticsState variable, SamplingIntervalDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SamplingIntervalDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SamplingIntervalDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SamplingIntervalDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SamplingIntervalDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SamplingInterval;
                instance.OnReadValue = OnRead_SamplingInterval;
                instance.OnSimpleWriteValue = OnWrite_SamplingInterval;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SamplingIntervalDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SamplingInterval Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SamplingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SamplingInterval;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SamplingInterval(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SamplingInterval = (double)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SamplingIntervalDiagnosticsDataType m_value;
        private SamplingIntervalDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SubscriptionDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SubscriptionDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsArrayState : BaseDataVariableState<SubscriptionDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SubscriptionDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SubscriptionDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SubscriptionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAKAAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzQXJyYXlUeXBlSW5zdGFu" +
           "Y2UBAHsIAQB7CAEAagMBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SubscriptionDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SubscriptionDiagnosticsState)
    /// <summary>
    /// Stores an instance of the SubscriptionDiagnosticsType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SubscriptionDiagnosticsState : BaseDataVariableState<SubscriptionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SubscriptionDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SubscriptionDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SubscriptionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAIwAAAFN1YnNjcmlwdGlvbkRpYWdub3N0aWNzVHlwZUluc3RhbmNlAQB8" +
           "CAEAfAgBAGoD/////wEB/////x8AAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAfQgALwA/fQgAAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFN1YnNjcmlwdGlvbklkAQB+CAAvAD9+CAAAAAf/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAIAAAAUHJpb3JpdHkBAH8IAC8AP38IAAAAA/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABIAAABQdWJsaXNoaW5nSW50ZXJ2YWwBAIAIAC8AP4AIAAAAC/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABEAAABNYXhLZWVwQWxpdmVDb3VudAEAgQgALwA/gQgAAAAH/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAAEAAAAE1heExpZmV0aW1lQ291bnQBALgiAC8AP7giAAAAB/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABoAAABNYXhOb3RpZmljYXRpb25zUGVyUHVibGlzaAEAgwgALwA/gwgAAAAH/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAEQAAAFB1Ymxpc2hpbmdFbmFibGVkAQCECAAvAD+ECAAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAALAAAATW9kaWZ5Q291bnQBAIUIAC8AP4UIAAAAB/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAsAAABFbmFibGVDb3VudAEAhggALwA/hggAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DAAAAERpc2FibGVDb3VudAEAhwgALwA/hwgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAFJl" +
           "cHVibGlzaFJlcXVlc3RDb3VudAEAiAgALwA/iAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHAAA" +
           "AFJlcHVibGlzaE1lc3NhZ2VSZXF1ZXN0Q291bnQBAIkIAC8AP4kIAAAAB/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABUAAABSZXB1Ymxpc2hNZXNzYWdlQ291bnQBAIoIAC8AP4oIAAAAB/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABQAAABUcmFuc2ZlclJlcXVlc3RDb3VudAEAiwgALwA/iwgAAAAH/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAGwAAAFRyYW5zZmVycmVkVG9BbHRDbGllbnRDb3VudAEAjAgALwA/jAgAAAAH////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAHAAAAFRyYW5zZmVycmVkVG9TYW1lQ2xpZW50Q291bnQBAI0IAC8A" +
           "P40IAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABQdWJsaXNoUmVxdWVzdENvdW50AQCOCAAv" +
           "AD+OCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAcAAAARGF0YUNoYW5nZU5vdGlmaWNhdGlvbnND" +
           "b3VudAEAjwgALwA/jwgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAEV2ZW50Tm90aWZpY2F0" +
           "aW9uc0NvdW50AQC2CwAvAD+2CwAAAAf/////AQH/////AAAAABVgiQoCAAAAAAASAAAATm90aWZpY2F0" +
           "aW9uc0NvdW50AQCRCAAvAD+RCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAATGF0ZVB1Ymxp" +
           "c2hSZXF1ZXN0Q291bnQBALkiAC8AP7kiAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABUAAABDdXJy" +
           "ZW50S2VlcEFsaXZlQ291bnQBALoiAC8AP7oiAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABD" +
           "dXJyZW50TGlmZXRpbWVDb3VudAEAuyIALwA/uyIAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAGgAA" +
           "AFVuYWNrbm93bGVkZ2VkTWVzc2FnZUNvdW50AQC8IgAvAD+8IgAAAAf/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAVAAAARGlzY2FyZGVkTWVzc2FnZUNvdW50AQC9IgAvAD+9IgAAAAf/////AQH/////AAAAABVg" +
           "iQoCAAAAAAASAAAATW9uaXRvcmVkSXRlbUNvdW50AQC+IgAvAD++IgAAAAf/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAaAAAARGlzYWJsZWRNb25pdG9yZWRJdGVtQ291bnQBAL8iAC8AP78iAAAAB/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABwAAABNb25pdG9yaW5nUXVldWVPdmVyZmxvd0NvdW50AQDAIgAvAD/AIgAA" +
           "AAf/////AQH/////AAAAABVgiQoCAAAAAAASAAAATmV4dFNlcXVlbmNlTnVtYmVyAQDBIgAvAD/BIgAA" +
           "AAf/////AQH/////AAAAABVgiQoCAAAAAAAXAAAARXZlbnRRdWV1ZU92ZXJGbG93Q291bnQBAMYiAC8A" +
           "P8YiAAAAB/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> SubscriptionId
        {
            get
            {
                return m_subscriptionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_subscriptionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_subscriptionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte> Priority
        {
            get
            {
                return m_priority;
            }

            set
            {
                if (!Object.ReferenceEquals(m_priority, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_priority = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> PublishingInterval
        {
            get
            {
                return m_publishingInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingInterval = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxKeepAliveCount
        {
            get
            {
                return m_maxKeepAliveCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxKeepAliveCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxKeepAliveCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxLifetimeCount
        {
            get
            {
                return m_maxLifetimeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxLifetimeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxLifetimeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxNotificationsPerPublish
        {
            get
            {
                return m_maxNotificationsPerPublish;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxNotificationsPerPublish, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxNotificationsPerPublish = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<bool> PublishingEnabled
        {
            get
            {
                return m_publishingEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishingEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishingEnabled = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> ModifyCount
        {
            get
            {
                return m_modifyCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EnableCount
        {
            get
            {
                return m_enableCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisableCount
        {
            get
            {
                return m_disableCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishRequestCount
        {
            get
            {
                return m_republishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishMessageRequestCount
        {
            get
            {
                return m_republishMessageRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishMessageRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishMessageRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> RepublishMessageCount
        {
            get
            {
                return m_republishMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferRequestCount
        {
            get
            {
                return m_transferRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferredToAltClientCount
        {
            get
            {
                return m_transferredToAltClientCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferredToAltClientCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferredToAltClientCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> TransferredToSameClientCount
        {
            get
            {
                return m_transferredToSameClientCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferredToSameClientCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferredToSameClientCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> PublishRequestCount
        {
            get
            {
                return m_publishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DataChangeNotificationsCount
        {
            get
            {
                return m_dataChangeNotificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dataChangeNotificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dataChangeNotificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EventNotificationsCount
        {
            get
            {
                return m_eventNotificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventNotificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventNotificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> NotificationsCount
        {
            get
            {
                return m_notificationsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_notificationsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_notificationsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> LatePublishRequestCount
        {
            get
            {
                return m_latePublishRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_latePublishRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_latePublishRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentKeepAliveCount
        {
            get
            {
                return m_currentKeepAliveCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentKeepAliveCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentKeepAliveCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentLifetimeCount
        {
            get
            {
                return m_currentLifetimeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentLifetimeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentLifetimeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> UnacknowledgedMessageCount
        {
            get
            {
                return m_unacknowledgedMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unacknowledgedMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unacknowledgedMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DiscardedMessageCount
        {
            get
            {
                return m_discardedMessageCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_discardedMessageCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_discardedMessageCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MonitoredItemCount
        {
            get
            {
                return m_monitoredItemCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_monitoredItemCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_monitoredItemCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> DisabledMonitoredItemCount
        {
            get
            {
                return m_disabledMonitoredItemCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disabledMonitoredItemCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disabledMonitoredItemCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MonitoringQueueOverflowCount
        {
            get
            {
                return m_monitoringQueueOverflowCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_monitoringQueueOverflowCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_monitoringQueueOverflowCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> NextSequenceNumber
        {
            get
            {
                return m_nextSequenceNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_nextSequenceNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_nextSequenceNumber = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> EventQueueOverFlowCount
        {
            get
            {
                return m_eventQueueOverFlowCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventQueueOverFlowCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventQueueOverFlowCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_subscriptionId != null)
            {
                children.Add(m_subscriptionId);
            }

            if (m_priority != null)
            {
                children.Add(m_priority);
            }

            if (m_publishingInterval != null)
            {
                children.Add(m_publishingInterval);
            }

            if (m_maxKeepAliveCount != null)
            {
                children.Add(m_maxKeepAliveCount);
            }

            if (m_maxLifetimeCount != null)
            {
                children.Add(m_maxLifetimeCount);
            }

            if (m_maxNotificationsPerPublish != null)
            {
                children.Add(m_maxNotificationsPerPublish);
            }

            if (m_publishingEnabled != null)
            {
                children.Add(m_publishingEnabled);
            }

            if (m_modifyCount != null)
            {
                children.Add(m_modifyCount);
            }

            if (m_enableCount != null)
            {
                children.Add(m_enableCount);
            }

            if (m_disableCount != null)
            {
                children.Add(m_disableCount);
            }

            if (m_republishRequestCount != null)
            {
                children.Add(m_republishRequestCount);
            }

            if (m_republishMessageRequestCount != null)
            {
                children.Add(m_republishMessageRequestCount);
            }

            if (m_republishMessageCount != null)
            {
                children.Add(m_republishMessageCount);
            }

            if (m_transferRequestCount != null)
            {
                children.Add(m_transferRequestCount);
            }

            if (m_transferredToAltClientCount != null)
            {
                children.Add(m_transferredToAltClientCount);
            }

            if (m_transferredToSameClientCount != null)
            {
                children.Add(m_transferredToSameClientCount);
            }

            if (m_publishRequestCount != null)
            {
                children.Add(m_publishRequestCount);
            }

            if (m_dataChangeNotificationsCount != null)
            {
                children.Add(m_dataChangeNotificationsCount);
            }

            if (m_eventNotificationsCount != null)
            {
                children.Add(m_eventNotificationsCount);
            }

            if (m_notificationsCount != null)
            {
                children.Add(m_notificationsCount);
            }

            if (m_latePublishRequestCount != null)
            {
                children.Add(m_latePublishRequestCount);
            }

            if (m_currentKeepAliveCount != null)
            {
                children.Add(m_currentKeepAliveCount);
            }

            if (m_currentLifetimeCount != null)
            {
                children.Add(m_currentLifetimeCount);
            }

            if (m_unacknowledgedMessageCount != null)
            {
                children.Add(m_unacknowledgedMessageCount);
            }

            if (m_discardedMessageCount != null)
            {
                children.Add(m_discardedMessageCount);
            }

            if (m_monitoredItemCount != null)
            {
                children.Add(m_monitoredItemCount);
            }

            if (m_disabledMonitoredItemCount != null)
            {
                children.Add(m_disabledMonitoredItemCount);
            }

            if (m_monitoringQueueOverflowCount != null)
            {
                children.Add(m_monitoringQueueOverflowCount);
            }

            if (m_nextSequenceNumber != null)
            {
                children.Add(m_nextSequenceNumber);
            }

            if (m_eventQueueOverFlowCount != null)
            {
                children.Add(m_eventQueueOverFlowCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.SubscriptionId:
                {
                    if (createOrReplace)
                    {
                        if (SubscriptionId == null)
                        {
                            if (replacement == null)
                            {
                                SubscriptionId = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                SubscriptionId = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = SubscriptionId;
                    break;
                }

                case Opc.Ua.BrowseNames.Priority:
                {
                    if (createOrReplace)
                    {
                        if (Priority == null)
                        {
                            if (replacement == null)
                            {
                                Priority = new BaseDataVariableState<byte>(this);
                            }
                            else
                            {
                                Priority = (BaseDataVariableState<byte>)replacement;
                            }
                        }
                    }

                    instance = Priority;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingInterval:
                {
                    if (createOrReplace)
                    {
                        if (PublishingInterval == null)
                        {
                            if (replacement == null)
                            {
                                PublishingInterval = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                PublishingInterval = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = PublishingInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxKeepAliveCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxKeepAliveCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxKeepAliveCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxKeepAliveCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxKeepAliveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxLifetimeCount:
                {
                    if (createOrReplace)
                    {
                        if (MaxLifetimeCount == null)
                        {
                            if (replacement == null)
                            {
                                MaxLifetimeCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxLifetimeCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxLifetimeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxNotificationsPerPublish:
                {
                    if (createOrReplace)
                    {
                        if (MaxNotificationsPerPublish == null)
                        {
                            if (replacement == null)
                            {
                                MaxNotificationsPerPublish = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxNotificationsPerPublish = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxNotificationsPerPublish;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishingEnabled:
                {
                    if (createOrReplace)
                    {
                        if (PublishingEnabled == null)
                        {
                            if (replacement == null)
                            {
                                PublishingEnabled = new BaseDataVariableState<bool>(this);
                            }
                            else
                            {
                                PublishingEnabled = (BaseDataVariableState<bool>)replacement;
                            }
                        }
                    }

                    instance = PublishingEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifyCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifyCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                ModifyCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = ModifyCount;
                    break;
                }

                case Opc.Ua.BrowseNames.EnableCount:
                {
                    if (createOrReplace)
                    {
                        if (EnableCount == null)
                        {
                            if (replacement == null)
                            {
                                EnableCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EnableCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EnableCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisableCount:
                {
                    if (createOrReplace)
                    {
                        if (DisableCount == null)
                        {
                            if (replacement == null)
                            {
                                DisableCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisableCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisableCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishMessageRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishMessageRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishMessageRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishMessageRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishMessageRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                RepublishMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = RepublishMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferredToAltClientCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferredToAltClientCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferredToAltClientCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferredToAltClientCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferredToAltClientCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferredToSameClientCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferredToSameClientCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferredToSameClientCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                TransferredToSameClientCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransferredToSameClientCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                PublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = PublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DataChangeNotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (DataChangeNotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                DataChangeNotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DataChangeNotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DataChangeNotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.EventNotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (EventNotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                EventNotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EventNotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EventNotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.NotificationsCount:
                {
                    if (createOrReplace)
                    {
                        if (NotificationsCount == null)
                        {
                            if (replacement == null)
                            {
                                NotificationsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                NotificationsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = NotificationsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.LatePublishRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (LatePublishRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                LatePublishRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                LatePublishRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = LatePublishRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentKeepAliveCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentKeepAliveCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentKeepAliveCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentKeepAliveCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentKeepAliveCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentLifetimeCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentLifetimeCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentLifetimeCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentLifetimeCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentLifetimeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnacknowledgedMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (UnacknowledgedMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                UnacknowledgedMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                UnacknowledgedMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnacknowledgedMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DiscardedMessageCount:
                {
                    if (createOrReplace)
                    {
                        if (DiscardedMessageCount == null)
                        {
                            if (replacement == null)
                            {
                                DiscardedMessageCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DiscardedMessageCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DiscardedMessageCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MonitoredItemCount:
                {
                    if (createOrReplace)
                    {
                        if (MonitoredItemCount == null)
                        {
                            if (replacement == null)
                            {
                                MonitoredItemCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MonitoredItemCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MonitoredItemCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DisabledMonitoredItemCount:
                {
                    if (createOrReplace)
                    {
                        if (DisabledMonitoredItemCount == null)
                        {
                            if (replacement == null)
                            {
                                DisabledMonitoredItemCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                DisabledMonitoredItemCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = DisabledMonitoredItemCount;
                    break;
                }

                case Opc.Ua.BrowseNames.MonitoringQueueOverflowCount:
                {
                    if (createOrReplace)
                    {
                        if (MonitoringQueueOverflowCount == null)
                        {
                            if (replacement == null)
                            {
                                MonitoringQueueOverflowCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MonitoringQueueOverflowCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MonitoringQueueOverflowCount;
                    break;
                }

                case Opc.Ua.BrowseNames.NextSequenceNumber:
                {
                    if (createOrReplace)
                    {
                        if (NextSequenceNumber == null)
                        {
                            if (replacement == null)
                            {
                                NextSequenceNumber = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                NextSequenceNumber = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = NextSequenceNumber;
                    break;
                }

                case Opc.Ua.BrowseNames.EventQueueOverFlowCount:
                {
                    if (createOrReplace)
                    {
                        if (EventQueueOverFlowCount == null)
                        {
                            if (replacement == null)
                            {
                                EventQueueOverFlowCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                EventQueueOverFlowCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = EventQueueOverFlowCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<uint> m_subscriptionId;
        private BaseDataVariableState<byte> m_priority;
        private BaseDataVariableState<double> m_publishingInterval;
        private BaseDataVariableState<uint> m_maxKeepAliveCount;
        private BaseDataVariableState<uint> m_maxLifetimeCount;
        private BaseDataVariableState<uint> m_maxNotificationsPerPublish;
        private BaseDataVariableState<bool> m_publishingEnabled;
        private BaseDataVariableState<uint> m_modifyCount;
        private BaseDataVariableState<uint> m_enableCount;
        private BaseDataVariableState<uint> m_disableCount;
        private BaseDataVariableState<uint> m_republishRequestCount;
        private BaseDataVariableState<uint> m_republishMessageRequestCount;
        private BaseDataVariableState<uint> m_republishMessageCount;
        private BaseDataVariableState<uint> m_transferRequestCount;
        private BaseDataVariableState<uint> m_transferredToAltClientCount;
        private BaseDataVariableState<uint> m_transferredToSameClientCount;
        private BaseDataVariableState<uint> m_publishRequestCount;
        private BaseDataVariableState<uint> m_dataChangeNotificationsCount;
        private BaseDataVariableState<uint> m_eventNotificationsCount;
        private BaseDataVariableState<uint> m_notificationsCount;
        private BaseDataVariableState<uint> m_latePublishRequestCount;
        private BaseDataVariableState<uint> m_currentKeepAliveCount;
        private BaseDataVariableState<uint> m_currentLifetimeCount;
        private BaseDataVariableState<uint> m_unacknowledgedMessageCount;
        private BaseDataVariableState<uint> m_discardedMessageCount;
        private BaseDataVariableState<uint> m_monitoredItemCount;
        private BaseDataVariableState<uint> m_disabledMonitoredItemCount;
        private BaseDataVariableState<uint> m_monitoringQueueOverflowCount;
        private BaseDataVariableState<uint> m_nextSequenceNumber;
        private BaseDataVariableState<uint> m_eventQueueOverFlowCount;
        #endregion
    }

    #region SubscriptionDiagnosticsValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SubscriptionDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SubscriptionDiagnosticsValue(SubscriptionDiagnosticsState variable, SubscriptionDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SubscriptionDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SubscriptionDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SubscriptionDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SubscriptionDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                instance.OnReadValue = OnRead_SessionId;
                instance.OnSimpleWriteValue = OnWrite_SessionId;
                updateList.Add(instance);
                instance = m_variable.SubscriptionId;
                instance.OnReadValue = OnRead_SubscriptionId;
                instance.OnSimpleWriteValue = OnWrite_SubscriptionId;
                updateList.Add(instance);
                instance = m_variable.Priority;
                instance.OnReadValue = OnRead_Priority;
                instance.OnSimpleWriteValue = OnWrite_Priority;
                updateList.Add(instance);
                instance = m_variable.PublishingInterval;
                instance.OnReadValue = OnRead_PublishingInterval;
                instance.OnSimpleWriteValue = OnWrite_PublishingInterval;
                updateList.Add(instance);
                instance = m_variable.MaxKeepAliveCount;
                instance.OnReadValue = OnRead_MaxKeepAliveCount;
                instance.OnSimpleWriteValue = OnWrite_MaxKeepAliveCount;
                updateList.Add(instance);
                instance = m_variable.MaxLifetimeCount;
                instance.OnReadValue = OnRead_MaxLifetimeCount;
                instance.OnSimpleWriteValue = OnWrite_MaxLifetimeCount;
                updateList.Add(instance);
                instance = m_variable.MaxNotificationsPerPublish;
                instance.OnReadValue = OnRead_MaxNotificationsPerPublish;
                instance.OnSimpleWriteValue = OnWrite_MaxNotificationsPerPublish;
                updateList.Add(instance);
                instance = m_variable.PublishingEnabled;
                instance.OnReadValue = OnRead_PublishingEnabled;
                instance.OnSimpleWriteValue = OnWrite_PublishingEnabled;
                updateList.Add(instance);
                instance = m_variable.ModifyCount;
                instance.OnReadValue = OnRead_ModifyCount;
                instance.OnSimpleWriteValue = OnWrite_ModifyCount;
                updateList.Add(instance);
                instance = m_variable.EnableCount;
                instance.OnReadValue = OnRead_EnableCount;
                instance.OnSimpleWriteValue = OnWrite_EnableCount;
                updateList.Add(instance);
                instance = m_variable.DisableCount;
                instance.OnReadValue = OnRead_DisableCount;
                instance.OnSimpleWriteValue = OnWrite_DisableCount;
                updateList.Add(instance);
                instance = m_variable.RepublishRequestCount;
                instance.OnReadValue = OnRead_RepublishRequestCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishRequestCount;
                updateList.Add(instance);
                instance = m_variable.RepublishMessageRequestCount;
                instance.OnReadValue = OnRead_RepublishMessageRequestCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishMessageRequestCount;
                updateList.Add(instance);
                instance = m_variable.RepublishMessageCount;
                instance.OnReadValue = OnRead_RepublishMessageCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishMessageCount;
                updateList.Add(instance);
                instance = m_variable.TransferRequestCount;
                instance.OnReadValue = OnRead_TransferRequestCount;
                instance.OnSimpleWriteValue = OnWrite_TransferRequestCount;
                updateList.Add(instance);
                instance = m_variable.TransferredToAltClientCount;
                instance.OnReadValue = OnRead_TransferredToAltClientCount;
                instance.OnSimpleWriteValue = OnWrite_TransferredToAltClientCount;
                updateList.Add(instance);
                instance = m_variable.TransferredToSameClientCount;
                instance.OnReadValue = OnRead_TransferredToSameClientCount;
                instance.OnSimpleWriteValue = OnWrite_TransferredToSameClientCount;
                updateList.Add(instance);
                instance = m_variable.PublishRequestCount;
                instance.OnReadValue = OnRead_PublishRequestCount;
                instance.OnSimpleWriteValue = OnWrite_PublishRequestCount;
                updateList.Add(instance);
                instance = m_variable.DataChangeNotificationsCount;
                instance.OnReadValue = OnRead_DataChangeNotificationsCount;
                instance.OnSimpleWriteValue = OnWrite_DataChangeNotificationsCount;
                updateList.Add(instance);
                instance = m_variable.EventNotificationsCount;
                instance.OnReadValue = OnRead_EventNotificationsCount;
                instance.OnSimpleWriteValue = OnWrite_EventNotificationsCount;
                updateList.Add(instance);
                instance = m_variable.NotificationsCount;
                instance.OnReadValue = OnRead_NotificationsCount;
                instance.OnSimpleWriteValue = OnWrite_NotificationsCount;
                updateList.Add(instance);
                instance = m_variable.LatePublishRequestCount;
                instance.OnReadValue = OnRead_LatePublishRequestCount;
                instance.OnSimpleWriteValue = OnWrite_LatePublishRequestCount;
                updateList.Add(instance);
                instance = m_variable.CurrentKeepAliveCount;
                instance.OnReadValue = OnRead_CurrentKeepAliveCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentKeepAliveCount;
                updateList.Add(instance);
                instance = m_variable.CurrentLifetimeCount;
                instance.OnReadValue = OnRead_CurrentLifetimeCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentLifetimeCount;
                updateList.Add(instance);
                instance = m_variable.UnacknowledgedMessageCount;
                instance.OnReadValue = OnRead_UnacknowledgedMessageCount;
                instance.OnSimpleWriteValue = OnWrite_UnacknowledgedMessageCount;
                updateList.Add(instance);
                instance = m_variable.DiscardedMessageCount;
                instance.OnReadValue = OnRead_DiscardedMessageCount;
                instance.OnSimpleWriteValue = OnWrite_DiscardedMessageCount;
                updateList.Add(instance);
                instance = m_variable.MonitoredItemCount;
                instance.OnReadValue = OnRead_MonitoredItemCount;
                instance.OnSimpleWriteValue = OnWrite_MonitoredItemCount;
                updateList.Add(instance);
                instance = m_variable.DisabledMonitoredItemCount;
                instance.OnReadValue = OnRead_DisabledMonitoredItemCount;
                instance.OnSimpleWriteValue = OnWrite_DisabledMonitoredItemCount;
                updateList.Add(instance);
                instance = m_variable.MonitoringQueueOverflowCount;
                instance.OnReadValue = OnRead_MonitoringQueueOverflowCount;
                instance.OnSimpleWriteValue = OnWrite_MonitoringQueueOverflowCount;
                updateList.Add(instance);
                instance = m_variable.NextSequenceNumber;
                instance.OnReadValue = OnRead_NextSequenceNumber;
                instance.OnSimpleWriteValue = OnWrite_NextSequenceNumber;
                updateList.Add(instance);
                instance = m_variable.EventQueueOverFlowCount;
                instance.OnReadValue = OnRead_EventQueueOverFlowCount;
                instance.OnSimpleWriteValue = OnWrite_EventQueueOverFlowCount;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SubscriptionDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SubscriptionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SubscriptionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SubscriptionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SubscriptionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SubscriptionId = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Priority Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_Priority(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.Priority;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_Priority(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.Priority = (byte)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingInterval Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishingInterval(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishingInterval;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishingInterval(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishingInterval = (double)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxKeepAliveCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxKeepAliveCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxKeepAliveCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxKeepAliveCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxLifetimeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxLifetimeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxLifetimeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxLifetimeCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxNotificationsPerPublish Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxNotificationsPerPublish(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxNotificationsPerPublish;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxNotificationsPerPublish(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxNotificationsPerPublish = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishingEnabled Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishingEnabled(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishingEnabled;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishingEnabled(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishingEnabled = (bool)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifyCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ModifyCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ModifyCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ModifyCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ModifyCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EnableCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EnableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EnableCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EnableCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EnableCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DisableCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DisableCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DisableCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DisableCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DisableCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishMessageRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishMessageRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishMessageRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishMessageRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishMessageRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishMessageCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishMessageCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishMessageCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishMessageCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferredToAltClientCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferredToAltClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferredToAltClientCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferredToAltClientCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferredToAltClientCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferredToSameClientCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferredToSameClientCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferredToSameClientCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferredToSameClientCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferredToSameClientCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DataChangeNotificationsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DataChangeNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DataChangeNotificationsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DataChangeNotificationsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DataChangeNotificationsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EventNotificationsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EventNotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EventNotificationsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EventNotificationsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EventNotificationsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region NotificationsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_NotificationsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.NotificationsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_NotificationsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.NotificationsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LatePublishRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LatePublishRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LatePublishRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LatePublishRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LatePublishRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentKeepAliveCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentKeepAliveCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentKeepAliveCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentKeepAliveCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentKeepAliveCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentLifetimeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentLifetimeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentLifetimeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentLifetimeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentLifetimeCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnacknowledgedMessageCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_UnacknowledgedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.UnacknowledgedMessageCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_UnacknowledgedMessageCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.UnacknowledgedMessageCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DiscardedMessageCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DiscardedMessageCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DiscardedMessageCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DiscardedMessageCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DiscardedMessageCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MonitoredItemCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MonitoredItemCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MonitoredItemCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MonitoredItemCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DisabledMonitoredItemCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DisabledMonitoredItemCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DisabledMonitoredItemCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DisabledMonitoredItemCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DisabledMonitoredItemCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MonitoringQueueOverflowCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MonitoringQueueOverflowCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MonitoringQueueOverflowCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MonitoringQueueOverflowCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MonitoringQueueOverflowCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region NextSequenceNumber Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_NextSequenceNumber(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.NextSequenceNumber;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_NextSequenceNumber(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.NextSequenceNumber = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EventQueueOverFlowCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EventQueueOverFlowCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EventQueueOverFlowCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EventQueueOverFlowCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EventQueueOverFlowCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SubscriptionDiagnosticsDataType m_value;
        private SubscriptionDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SessionDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SessionDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsArrayState : BaseDataVariableState<SessionDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAIwAAAFNlc3Npb25EaWFnbm9zdGljc0FycmF5VHlwZUluc3RhbmNlAQCU" +
           "CAEAlAgBAGEDAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SessionDiagnosticsVariableState Class
    #if (!OPCUA_EXCLUDE_SessionDiagnosticsVariableState)
    /// <summary>
    /// Stores an instance of the SessionDiagnosticsVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionDiagnosticsVariableState : BaseDataVariableState<SessionDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionDiagnosticsVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionDiagnosticsVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAJgAAAFNlc3Npb25EaWFnbm9zdGljc1ZhcmlhYmxlVHlwZUluc3RhbmNl" +
           "AQCVCAEAlQgBAGED/////wEB/////ysAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAlggALwA/lggA" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFNlc3Npb25OYW1lAQCXCAAvAD+XCAAAAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50RGVzY3JpcHRpb24BAJgIAC8AP5gIAAABADQB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAFNlcnZlclVyaQEAmQgALwA/mQgAAAAM/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACwAAAEVuZHBvaW50VXJsAQCaCAAvAD+aCAAAAAz/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAJAAAATG9jYWxlSWRzAQCbCAAvAD+bCAAAAQAnAQEAAAABAf////8AAAAAFWCJCgIAAAAAABQA" +
           "AABBY3R1YWxTZXNzaW9uVGltZW91dAEAnAgALwA/nAgAAAEAIgH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAWAAAATWF4UmVzcG9uc2VNZXNzYWdlU2l6ZQEA6gsALwA/6gsAAAAH/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAFAAAAENsaWVudENvbm5lY3Rpb25UaW1lAQCdCAAvAD+dCAAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABUAAABDbGllbnRMYXN0Q29udGFjdFRpbWUBAJ4IAC8AP54IAAABACYB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAAGQAAAEN1cnJlbnRTdWJzY3JpcHRpb25zQ291bnQBAJ8IAC8AP58IAAAAB///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABoAAABDdXJyZW50TW9uaXRvcmVkSXRlbXNDb3VudAEAoAgALwA/" +
           "oAgAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAHQAAAEN1cnJlbnRQdWJsaXNoUmVxdWVzdHNJblF1" +
           "ZXVlAQChCAAvAD+hCAAAAAf/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVG90YWxSZXF1ZXN0Q291" +
           "bnQBAMQiAC8AP8QiAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAFVuYXV0aG9yaXplZFJl" +
           "cXVlc3RDb3VudAEAdC4ALwA/dC4AAAAH/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAFJlYWRDb3Vu" +
           "dAEAqQgALwA/qQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAQAAAASGlzdG9yeVJlYWRDb3Vu" +
           "dAEAqggALwA/qggAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAV3JpdGVDb3VudAEAqwgA" +
           "LwA/qwgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAASGlzdG9yeVVwZGF0ZUNvdW50AQCs" +
           "CAAvAD+sCAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABDYWxsQ291bnQBAK0IAC8AP60I" +
           "AAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAENyZWF0ZU1vbml0b3JlZEl0ZW1zQ291bnQB" +
           "AK4IAC8AP64IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAGQAAAE1vZGlmeU1vbml0b3JlZEl0" +
           "ZW1zQ291bnQBAK8IAC8AP68IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAFgAAAFNldE1vbml0" +
           "b3JpbmdNb2RlQ291bnQBALAIAC8AP7AIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAFNl" +
           "dFRyaWdnZXJpbmdDb3VudAEAsQgALwA/sQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAZAAAA" +
           "RGVsZXRlTW9uaXRvcmVkSXRlbXNDb3VudAEAsggALwA/sggAAAEAZwP/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAXAAAAQ3JlYXRlU3Vic2NyaXB0aW9uQ291bnQBALMIAC8AP7MIAAABAGcD/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAAFwAAAE1vZGlmeVN1YnNjcmlwdGlvbkNvdW50AQC0CAAvAD+0CAAAAQBnA/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABYAAABTZXRQdWJsaXNoaW5nTW9kZUNvdW50AQC1CAAvAD+1CAAAAQBn" +
           "A/////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABQdWJsaXNoQ291bnQBALYIAC8AP7YIAAABAGcD////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAFJlcHVibGlzaENvdW50AQC3CAAvAD+3CAAAAQBnA/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABoAAABUcmFuc2ZlclN1YnNjcmlwdGlvbnNDb3VudAEAuAgALwA/uAgA" +
           "AAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAYAAAARGVsZXRlU3Vic2NyaXB0aW9uc0NvdW50AQC5" +
           "CAAvAD+5CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABBZGROb2Rlc0NvdW50AQC6CAAv" +
           "AD+6CAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABIAAABBZGRSZWZlcmVuY2VzQ291bnQBALsI" +
           "AC8AP7sIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAERlbGV0ZU5vZGVzQ291bnQBALwI" +
           "AC8AP7wIAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAERlbGV0ZVJlZmVyZW5jZXNDb3Vu" +
           "dAEAvQgALwA/vQgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQnJvd3NlQ291bnQBAL4I" +
           "AC8AP74IAAABAGcD/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEJyb3dzZU5leHRDb3VudAEAvwgA" +
           "LwA/vwgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAiAAAAVHJhbnNsYXRlQnJvd3NlUGF0aHNU" +
           "b05vZGVJZHNDb3VudAEAwAgALwA/wAgAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAUXVl" +
           "cnlGaXJzdENvdW50AQDBCAAvAD/BCAAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABRdWVy" +
           "eU5leHRDb3VudAEAwggALwA/wggAAAEAZwP/////AQH/////AAAAABVgiQoCAAAAAAASAAAAUmVnaXN0" +
           "ZXJOb2Rlc0NvdW50AQCqCgAvAD+qCgAAAQBnA/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABVbnJl" +
           "Z2lzdGVyTm9kZXNDb3VudAEAqwoALwA/qwoAAAEAZwP/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SessionName
        {
            get
            {
                return m_sessionName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionName = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ApplicationDescription> ClientDescription
        {
            get
            {
                return m_clientDescription;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientDescription, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientDescription = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ServerUri
        {
            get
            {
                return m_serverUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> EndpointUrl
        {
            get
            {
                return m_endpointUrl;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endpointUrl, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endpointUrl = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string[]> LocaleIds
        {
            get
            {
                return m_localeIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_localeIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_localeIds = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<double> ActualSessionTimeout
        {
            get
            {
                return m_actualSessionTimeout;
            }

            set
            {
                if (!Object.ReferenceEquals(m_actualSessionTimeout, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_actualSessionTimeout = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> MaxResponseMessageSize
        {
            get
            {
                return m_maxResponseMessageSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxResponseMessageSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxResponseMessageSize = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> ClientConnectionTime
        {
            get
            {
                return m_clientConnectionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientConnectionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientConnectionTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<DateTime> ClientLastContactTime
        {
            get
            {
                return m_clientLastContactTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientLastContactTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientLastContactTime = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentSubscriptionsCount
        {
            get
            {
                return m_currentSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentMonitoredItemsCount
        {
            get
            {
                return m_currentMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> CurrentPublishRequestsInQueue
        {
            get
            {
                return m_currentPublishRequestsInQueue;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentPublishRequestsInQueue, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentPublishRequestsInQueue = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TotalRequestCount
        {
            get
            {
                return m_totalRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_totalRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_totalRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<uint> UnauthorizedRequestCount
        {
            get
            {
                return m_unauthorizedRequestCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unauthorizedRequestCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unauthorizedRequestCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ReadCount
        {
            get
            {
                return m_readCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_readCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_readCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> HistoryReadCount
        {
            get
            {
                return m_historyReadCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historyReadCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historyReadCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> WriteCount
        {
            get
            {
                return m_writeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_writeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_writeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> HistoryUpdateCount
        {
            get
            {
                return m_historyUpdateCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_historyUpdateCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_historyUpdateCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CallCount
        {
            get
            {
                return m_callCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_callCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_callCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CreateMonitoredItemsCount
        {
            get
            {
                return m_createMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ModifyMonitoredItemsCount
        {
            get
            {
                return m_modifyMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifyMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifyMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetMonitoringModeCount
        {
            get
            {
                return m_setMonitoringModeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setMonitoringModeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setMonitoringModeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetTriggeringCount
        {
            get
            {
                return m_setTriggeringCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setTriggeringCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setTriggeringCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteMonitoredItemsCount
        {
            get
            {
                return m_deleteMonitoredItemsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteMonitoredItemsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteMonitoredItemsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> CreateSubscriptionCount
        {
            get
            {
                return m_createSubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> ModifySubscriptionCount
        {
            get
            {
                return m_modifySubscriptionCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_modifySubscriptionCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_modifySubscriptionCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> SetPublishingModeCount
        {
            get
            {
                return m_setPublishingModeCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setPublishingModeCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setPublishingModeCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> PublishCount
        {
            get
            {
                return m_publishCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_publishCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_publishCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> RepublishCount
        {
            get
            {
                return m_republishCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_republishCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_republishCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TransferSubscriptionsCount
        {
            get
            {
                return m_transferSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transferSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transferSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteSubscriptionsCount
        {
            get
            {
                return m_deleteSubscriptionsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteSubscriptionsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteSubscriptionsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> AddNodesCount
        {
            get
            {
                return m_addNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> AddReferencesCount
        {
            get
            {
                return m_addReferencesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addReferencesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addReferencesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteNodesCount
        {
            get
            {
                return m_deleteNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> DeleteReferencesCount
        {
            get
            {
                return m_deleteReferencesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteReferencesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteReferencesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> BrowseCount
        {
            get
            {
                return m_browseCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_browseCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_browseCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> BrowseNextCount
        {
            get
            {
                return m_browseNextCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_browseNextCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_browseNextCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> TranslateBrowsePathsToNodeIdsCount
        {
            get
            {
                return m_translateBrowsePathsToNodeIdsCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_translateBrowsePathsToNodeIdsCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_translateBrowsePathsToNodeIdsCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> QueryFirstCount
        {
            get
            {
                return m_queryFirstCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queryFirstCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queryFirstCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> QueryNextCount
        {
            get
            {
                return m_queryNextCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_queryNextCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_queryNextCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> RegisterNodesCount
        {
            get
            {
                return m_registerNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_registerNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_registerNodesCount = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<ServiceCounterDataType> UnregisterNodesCount
        {
            get
            {
                return m_unregisterNodesCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unregisterNodesCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unregisterNodesCount = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_sessionName != null)
            {
                children.Add(m_sessionName);
            }

            if (m_clientDescription != null)
            {
                children.Add(m_clientDescription);
            }

            if (m_serverUri != null)
            {
                children.Add(m_serverUri);
            }

            if (m_endpointUrl != null)
            {
                children.Add(m_endpointUrl);
            }

            if (m_localeIds != null)
            {
                children.Add(m_localeIds);
            }

            if (m_actualSessionTimeout != null)
            {
                children.Add(m_actualSessionTimeout);
            }

            if (m_maxResponseMessageSize != null)
            {
                children.Add(m_maxResponseMessageSize);
            }

            if (m_clientConnectionTime != null)
            {
                children.Add(m_clientConnectionTime);
            }

            if (m_clientLastContactTime != null)
            {
                children.Add(m_clientLastContactTime);
            }

            if (m_currentSubscriptionsCount != null)
            {
                children.Add(m_currentSubscriptionsCount);
            }

            if (m_currentMonitoredItemsCount != null)
            {
                children.Add(m_currentMonitoredItemsCount);
            }

            if (m_currentPublishRequestsInQueue != null)
            {
                children.Add(m_currentPublishRequestsInQueue);
            }

            if (m_totalRequestCount != null)
            {
                children.Add(m_totalRequestCount);
            }

            if (m_unauthorizedRequestCount != null)
            {
                children.Add(m_unauthorizedRequestCount);
            }

            if (m_readCount != null)
            {
                children.Add(m_readCount);
            }

            if (m_historyReadCount != null)
            {
                children.Add(m_historyReadCount);
            }

            if (m_writeCount != null)
            {
                children.Add(m_writeCount);
            }

            if (m_historyUpdateCount != null)
            {
                children.Add(m_historyUpdateCount);
            }

            if (m_callCount != null)
            {
                children.Add(m_callCount);
            }

            if (m_createMonitoredItemsCount != null)
            {
                children.Add(m_createMonitoredItemsCount);
            }

            if (m_modifyMonitoredItemsCount != null)
            {
                children.Add(m_modifyMonitoredItemsCount);
            }

            if (m_setMonitoringModeCount != null)
            {
                children.Add(m_setMonitoringModeCount);
            }

            if (m_setTriggeringCount != null)
            {
                children.Add(m_setTriggeringCount);
            }

            if (m_deleteMonitoredItemsCount != null)
            {
                children.Add(m_deleteMonitoredItemsCount);
            }

            if (m_createSubscriptionCount != null)
            {
                children.Add(m_createSubscriptionCount);
            }

            if (m_modifySubscriptionCount != null)
            {
                children.Add(m_modifySubscriptionCount);
            }

            if (m_setPublishingModeCount != null)
            {
                children.Add(m_setPublishingModeCount);
            }

            if (m_publishCount != null)
            {
                children.Add(m_publishCount);
            }

            if (m_republishCount != null)
            {
                children.Add(m_republishCount);
            }

            if (m_transferSubscriptionsCount != null)
            {
                children.Add(m_transferSubscriptionsCount);
            }

            if (m_deleteSubscriptionsCount != null)
            {
                children.Add(m_deleteSubscriptionsCount);
            }

            if (m_addNodesCount != null)
            {
                children.Add(m_addNodesCount);
            }

            if (m_addReferencesCount != null)
            {
                children.Add(m_addReferencesCount);
            }

            if (m_deleteNodesCount != null)
            {
                children.Add(m_deleteNodesCount);
            }

            if (m_deleteReferencesCount != null)
            {
                children.Add(m_deleteReferencesCount);
            }

            if (m_browseCount != null)
            {
                children.Add(m_browseCount);
            }

            if (m_browseNextCount != null)
            {
                children.Add(m_browseNextCount);
            }

            if (m_translateBrowsePathsToNodeIdsCount != null)
            {
                children.Add(m_translateBrowsePathsToNodeIdsCount);
            }

            if (m_queryFirstCount != null)
            {
                children.Add(m_queryFirstCount);
            }

            if (m_queryNextCount != null)
            {
                children.Add(m_queryNextCount);
            }

            if (m_registerNodesCount != null)
            {
                children.Add(m_registerNodesCount);
            }

            if (m_unregisterNodesCount != null)
            {
                children.Add(m_unregisterNodesCount);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.SessionName:
                {
                    if (createOrReplace)
                    {
                        if (SessionName == null)
                        {
                            if (replacement == null)
                            {
                                SessionName = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SessionName = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SessionName;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientDescription:
                {
                    if (createOrReplace)
                    {
                        if (ClientDescription == null)
                        {
                            if (replacement == null)
                            {
                                ClientDescription = new BaseDataVariableState<ApplicationDescription>(this);
                            }
                            else
                            {
                                ClientDescription = (BaseDataVariableState<ApplicationDescription>)replacement;
                            }
                        }
                    }

                    instance = ClientDescription;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerUri:
                {
                    if (createOrReplace)
                    {
                        if (ServerUri == null)
                        {
                            if (replacement == null)
                            {
                                ServerUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ServerUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ServerUri;
                    break;
                }

                case Opc.Ua.BrowseNames.EndpointUrl:
                {
                    if (createOrReplace)
                    {
                        if (EndpointUrl == null)
                        {
                            if (replacement == null)
                            {
                                EndpointUrl = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                EndpointUrl = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = EndpointUrl;
                    break;
                }

                case Opc.Ua.BrowseNames.LocaleIds:
                {
                    if (createOrReplace)
                    {
                        if (LocaleIds == null)
                        {
                            if (replacement == null)
                            {
                                LocaleIds = new BaseDataVariableState<string[]>(this);
                            }
                            else
                            {
                                LocaleIds = (BaseDataVariableState<string[]>)replacement;
                            }
                        }
                    }

                    instance = LocaleIds;
                    break;
                }

                case Opc.Ua.BrowseNames.ActualSessionTimeout:
                {
                    if (createOrReplace)
                    {
                        if (ActualSessionTimeout == null)
                        {
                            if (replacement == null)
                            {
                                ActualSessionTimeout = new BaseDataVariableState<double>(this);
                            }
                            else
                            {
                                ActualSessionTimeout = (BaseDataVariableState<double>)replacement;
                            }
                        }
                    }

                    instance = ActualSessionTimeout;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxResponseMessageSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxResponseMessageSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxResponseMessageSize = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                MaxResponseMessageSize = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxResponseMessageSize;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientConnectionTime:
                {
                    if (createOrReplace)
                    {
                        if (ClientConnectionTime == null)
                        {
                            if (replacement == null)
                            {
                                ClientConnectionTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                ClientConnectionTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ClientConnectionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientLastContactTime:
                {
                    if (createOrReplace)
                    {
                        if (ClientLastContactTime == null)
                        {
                            if (replacement == null)
                            {
                                ClientLastContactTime = new BaseDataVariableState<DateTime>(this);
                            }
                            else
                            {
                                ClientLastContactTime = (BaseDataVariableState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ClientLastContactTime;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentSubscriptionsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentSubscriptionsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (CurrentMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                CurrentMonitoredItemsCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentMonitoredItemsCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CurrentPublishRequestsInQueue:
                {
                    if (createOrReplace)
                    {
                        if (CurrentPublishRequestsInQueue == null)
                        {
                            if (replacement == null)
                            {
                                CurrentPublishRequestsInQueue = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                CurrentPublishRequestsInQueue = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = CurrentPublishRequestsInQueue;
                    break;
                }

                case Opc.Ua.BrowseNames.TotalRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (TotalRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                TotalRequestCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TotalRequestCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TotalRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnauthorizedRequestCount:
                {
                    if (createOrReplace)
                    {
                        if (UnauthorizedRequestCount == null)
                        {
                            if (replacement == null)
                            {
                                UnauthorizedRequestCount = new BaseDataVariableState<uint>(this);
                            }
                            else
                            {
                                UnauthorizedRequestCount = (BaseDataVariableState<uint>)replacement;
                            }
                        }
                    }

                    instance = UnauthorizedRequestCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ReadCount:
                {
                    if (createOrReplace)
                    {
                        if (ReadCount == null)
                        {
                            if (replacement == null)
                            {
                                ReadCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ReadCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ReadCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoryReadCount:
                {
                    if (createOrReplace)
                    {
                        if (HistoryReadCount == null)
                        {
                            if (replacement == null)
                            {
                                HistoryReadCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                HistoryReadCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = HistoryReadCount;
                    break;
                }

                case Opc.Ua.BrowseNames.WriteCount:
                {
                    if (createOrReplace)
                    {
                        if (WriteCount == null)
                        {
                            if (replacement == null)
                            {
                                WriteCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                WriteCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = WriteCount;
                    break;
                }

                case Opc.Ua.BrowseNames.HistoryUpdateCount:
                {
                    if (createOrReplace)
                    {
                        if (HistoryUpdateCount == null)
                        {
                            if (replacement == null)
                            {
                                HistoryUpdateCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                HistoryUpdateCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = HistoryUpdateCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CallCount:
                {
                    if (createOrReplace)
                    {
                        if (CallCount == null)
                        {
                            if (replacement == null)
                            {
                                CallCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CallCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CallCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (CreateMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                CreateMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CreateMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CreateMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifyMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifyMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifyMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ModifyMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ModifyMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetMonitoringModeCount:
                {
                    if (createOrReplace)
                    {
                        if (SetMonitoringModeCount == null)
                        {
                            if (replacement == null)
                            {
                                SetMonitoringModeCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetMonitoringModeCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetMonitoringModeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetTriggeringCount:
                {
                    if (createOrReplace)
                    {
                        if (SetTriggeringCount == null)
                        {
                            if (replacement == null)
                            {
                                SetTriggeringCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetTriggeringCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetTriggeringCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteMonitoredItemsCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteMonitoredItemsCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteMonitoredItemsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteMonitoredItemsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteMonitoredItemsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateSubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (CreateSubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                CreateSubscriptionCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                CreateSubscriptionCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = CreateSubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ModifySubscriptionCount:
                {
                    if (createOrReplace)
                    {
                        if (ModifySubscriptionCount == null)
                        {
                            if (replacement == null)
                            {
                                ModifySubscriptionCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                ModifySubscriptionCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = ModifySubscriptionCount;
                    break;
                }

                case Opc.Ua.BrowseNames.SetPublishingModeCount:
                {
                    if (createOrReplace)
                    {
                        if (SetPublishingModeCount == null)
                        {
                            if (replacement == null)
                            {
                                SetPublishingModeCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                SetPublishingModeCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = SetPublishingModeCount;
                    break;
                }

                case Opc.Ua.BrowseNames.PublishCount:
                {
                    if (createOrReplace)
                    {
                        if (PublishCount == null)
                        {
                            if (replacement == null)
                            {
                                PublishCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                PublishCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = PublishCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RepublishCount:
                {
                    if (createOrReplace)
                    {
                        if (RepublishCount == null)
                        {
                            if (replacement == null)
                            {
                                RepublishCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                RepublishCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = RepublishCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TransferSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (TransferSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                TransferSubscriptionsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TransferSubscriptionsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TransferSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteSubscriptionsCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteSubscriptionsCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteSubscriptionsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteSubscriptionsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteSubscriptionsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AddNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (AddNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                AddNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                AddNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = AddNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.AddReferencesCount:
                {
                    if (createOrReplace)
                    {
                        if (AddReferencesCount == null)
                        {
                            if (replacement == null)
                            {
                                AddReferencesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                AddReferencesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = AddReferencesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteReferencesCount:
                {
                    if (createOrReplace)
                    {
                        if (DeleteReferencesCount == null)
                        {
                            if (replacement == null)
                            {
                                DeleteReferencesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                DeleteReferencesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = DeleteReferencesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.BrowseCount:
                {
                    if (createOrReplace)
                    {
                        if (BrowseCount == null)
                        {
                            if (replacement == null)
                            {
                                BrowseCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                BrowseCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = BrowseCount;
                    break;
                }

                case Opc.Ua.BrowseNames.BrowseNextCount:
                {
                    if (createOrReplace)
                    {
                        if (BrowseNextCount == null)
                        {
                            if (replacement == null)
                            {
                                BrowseNextCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                BrowseNextCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = BrowseNextCount;
                    break;
                }

                case Opc.Ua.BrowseNames.TranslateBrowsePathsToNodeIdsCount:
                {
                    if (createOrReplace)
                    {
                        if (TranslateBrowsePathsToNodeIdsCount == null)
                        {
                            if (replacement == null)
                            {
                                TranslateBrowsePathsToNodeIdsCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                TranslateBrowsePathsToNodeIdsCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = TranslateBrowsePathsToNodeIdsCount;
                    break;
                }

                case Opc.Ua.BrowseNames.QueryFirstCount:
                {
                    if (createOrReplace)
                    {
                        if (QueryFirstCount == null)
                        {
                            if (replacement == null)
                            {
                                QueryFirstCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                QueryFirstCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = QueryFirstCount;
                    break;
                }

                case Opc.Ua.BrowseNames.QueryNextCount:
                {
                    if (createOrReplace)
                    {
                        if (QueryNextCount == null)
                        {
                            if (replacement == null)
                            {
                                QueryNextCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                QueryNextCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = QueryNextCount;
                    break;
                }

                case Opc.Ua.BrowseNames.RegisterNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (RegisterNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                RegisterNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                RegisterNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = RegisterNodesCount;
                    break;
                }

                case Opc.Ua.BrowseNames.UnregisterNodesCount:
                {
                    if (createOrReplace)
                    {
                        if (UnregisterNodesCount == null)
                        {
                            if (replacement == null)
                            {
                                UnregisterNodesCount = new BaseDataVariableState<ServiceCounterDataType>(this);
                            }
                            else
                            {
                                UnregisterNodesCount = (BaseDataVariableState<ServiceCounterDataType>)replacement;
                            }
                        }
                    }

                    instance = UnregisterNodesCount;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<string> m_sessionName;
        private BaseDataVariableState<ApplicationDescription> m_clientDescription;
        private BaseDataVariableState<string> m_serverUri;
        private BaseDataVariableState<string> m_endpointUrl;
        private BaseDataVariableState<string[]> m_localeIds;
        private BaseDataVariableState<double> m_actualSessionTimeout;
        private BaseDataVariableState<uint> m_maxResponseMessageSize;
        private BaseDataVariableState<DateTime> m_clientConnectionTime;
        private BaseDataVariableState<DateTime> m_clientLastContactTime;
        private BaseDataVariableState<uint> m_currentSubscriptionsCount;
        private BaseDataVariableState<uint> m_currentMonitoredItemsCount;
        private BaseDataVariableState<uint> m_currentPublishRequestsInQueue;
        private BaseDataVariableState<ServiceCounterDataType> m_totalRequestCount;
        private BaseDataVariableState<uint> m_unauthorizedRequestCount;
        private BaseDataVariableState<ServiceCounterDataType> m_readCount;
        private BaseDataVariableState<ServiceCounterDataType> m_historyReadCount;
        private BaseDataVariableState<ServiceCounterDataType> m_writeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_historyUpdateCount;
        private BaseDataVariableState<ServiceCounterDataType> m_callCount;
        private BaseDataVariableState<ServiceCounterDataType> m_createMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_modifyMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setMonitoringModeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setTriggeringCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteMonitoredItemsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_createSubscriptionCount;
        private BaseDataVariableState<ServiceCounterDataType> m_modifySubscriptionCount;
        private BaseDataVariableState<ServiceCounterDataType> m_setPublishingModeCount;
        private BaseDataVariableState<ServiceCounterDataType> m_publishCount;
        private BaseDataVariableState<ServiceCounterDataType> m_republishCount;
        private BaseDataVariableState<ServiceCounterDataType> m_transferSubscriptionsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteSubscriptionsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_addNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_addReferencesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_deleteReferencesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_browseCount;
        private BaseDataVariableState<ServiceCounterDataType> m_browseNextCount;
        private BaseDataVariableState<ServiceCounterDataType> m_translateBrowsePathsToNodeIdsCount;
        private BaseDataVariableState<ServiceCounterDataType> m_queryFirstCount;
        private BaseDataVariableState<ServiceCounterDataType> m_queryNextCount;
        private BaseDataVariableState<ServiceCounterDataType> m_registerNodesCount;
        private BaseDataVariableState<ServiceCounterDataType> m_unregisterNodesCount;
        #endregion
    }

    #region SessionDiagnosticsVariableValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SessionDiagnosticsVariableValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SessionDiagnosticsVariableValue(SessionDiagnosticsVariableState variable, SessionDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SessionDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SessionDiagnosticsVariableState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SessionDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SessionDiagnosticsVariableState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                instance.OnReadValue = OnRead_SessionId;
                instance.OnSimpleWriteValue = OnWrite_SessionId;
                updateList.Add(instance);
                instance = m_variable.SessionName;
                instance.OnReadValue = OnRead_SessionName;
                instance.OnSimpleWriteValue = OnWrite_SessionName;
                updateList.Add(instance);
                instance = m_variable.ClientDescription;
                instance.OnReadValue = OnRead_ClientDescription;
                instance.OnSimpleWriteValue = OnWrite_ClientDescription;
                updateList.Add(instance);
                instance = m_variable.ServerUri;
                instance.OnReadValue = OnRead_ServerUri;
                instance.OnSimpleWriteValue = OnWrite_ServerUri;
                updateList.Add(instance);
                instance = m_variable.EndpointUrl;
                instance.OnReadValue = OnRead_EndpointUrl;
                instance.OnSimpleWriteValue = OnWrite_EndpointUrl;
                updateList.Add(instance);
                instance = m_variable.LocaleIds;
                instance.OnReadValue = OnRead_LocaleIds;
                instance.OnSimpleWriteValue = OnWrite_LocaleIds;
                updateList.Add(instance);
                instance = m_variable.ActualSessionTimeout;
                instance.OnReadValue = OnRead_ActualSessionTimeout;
                instance.OnSimpleWriteValue = OnWrite_ActualSessionTimeout;
                updateList.Add(instance);
                instance = m_variable.MaxResponseMessageSize;
                instance.OnReadValue = OnRead_MaxResponseMessageSize;
                instance.OnSimpleWriteValue = OnWrite_MaxResponseMessageSize;
                updateList.Add(instance);
                instance = m_variable.ClientConnectionTime;
                instance.OnReadValue = OnRead_ClientConnectionTime;
                instance.OnSimpleWriteValue = OnWrite_ClientConnectionTime;
                updateList.Add(instance);
                instance = m_variable.ClientLastContactTime;
                instance.OnReadValue = OnRead_ClientLastContactTime;
                instance.OnSimpleWriteValue = OnWrite_ClientLastContactTime;
                updateList.Add(instance);
                instance = m_variable.CurrentSubscriptionsCount;
                instance.OnReadValue = OnRead_CurrentSubscriptionsCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentSubscriptionsCount;
                updateList.Add(instance);
                instance = m_variable.CurrentMonitoredItemsCount;
                instance.OnReadValue = OnRead_CurrentMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_CurrentMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.CurrentPublishRequestsInQueue;
                instance.OnReadValue = OnRead_CurrentPublishRequestsInQueue;
                instance.OnSimpleWriteValue = OnWrite_CurrentPublishRequestsInQueue;
                updateList.Add(instance);
                instance = m_variable.TotalRequestCount;
                instance.OnReadValue = OnRead_TotalRequestCount;
                instance.OnSimpleWriteValue = OnWrite_TotalRequestCount;
                updateList.Add(instance);
                instance = m_variable.UnauthorizedRequestCount;
                instance.OnReadValue = OnRead_UnauthorizedRequestCount;
                instance.OnSimpleWriteValue = OnWrite_UnauthorizedRequestCount;
                updateList.Add(instance);
                instance = m_variable.ReadCount;
                instance.OnReadValue = OnRead_ReadCount;
                instance.OnSimpleWriteValue = OnWrite_ReadCount;
                updateList.Add(instance);
                instance = m_variable.HistoryReadCount;
                instance.OnReadValue = OnRead_HistoryReadCount;
                instance.OnSimpleWriteValue = OnWrite_HistoryReadCount;
                updateList.Add(instance);
                instance = m_variable.WriteCount;
                instance.OnReadValue = OnRead_WriteCount;
                instance.OnSimpleWriteValue = OnWrite_WriteCount;
                updateList.Add(instance);
                instance = m_variable.HistoryUpdateCount;
                instance.OnReadValue = OnRead_HistoryUpdateCount;
                instance.OnSimpleWriteValue = OnWrite_HistoryUpdateCount;
                updateList.Add(instance);
                instance = m_variable.CallCount;
                instance.OnReadValue = OnRead_CallCount;
                instance.OnSimpleWriteValue = OnWrite_CallCount;
                updateList.Add(instance);
                instance = m_variable.CreateMonitoredItemsCount;
                instance.OnReadValue = OnRead_CreateMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_CreateMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.ModifyMonitoredItemsCount;
                instance.OnReadValue = OnRead_ModifyMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_ModifyMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.SetMonitoringModeCount;
                instance.OnReadValue = OnRead_SetMonitoringModeCount;
                instance.OnSimpleWriteValue = OnWrite_SetMonitoringModeCount;
                updateList.Add(instance);
                instance = m_variable.SetTriggeringCount;
                instance.OnReadValue = OnRead_SetTriggeringCount;
                instance.OnSimpleWriteValue = OnWrite_SetTriggeringCount;
                updateList.Add(instance);
                instance = m_variable.DeleteMonitoredItemsCount;
                instance.OnReadValue = OnRead_DeleteMonitoredItemsCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteMonitoredItemsCount;
                updateList.Add(instance);
                instance = m_variable.CreateSubscriptionCount;
                instance.OnReadValue = OnRead_CreateSubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_CreateSubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.ModifySubscriptionCount;
                instance.OnReadValue = OnRead_ModifySubscriptionCount;
                instance.OnSimpleWriteValue = OnWrite_ModifySubscriptionCount;
                updateList.Add(instance);
                instance = m_variable.SetPublishingModeCount;
                instance.OnReadValue = OnRead_SetPublishingModeCount;
                instance.OnSimpleWriteValue = OnWrite_SetPublishingModeCount;
                updateList.Add(instance);
                instance = m_variable.PublishCount;
                instance.OnReadValue = OnRead_PublishCount;
                instance.OnSimpleWriteValue = OnWrite_PublishCount;
                updateList.Add(instance);
                instance = m_variable.RepublishCount;
                instance.OnReadValue = OnRead_RepublishCount;
                instance.OnSimpleWriteValue = OnWrite_RepublishCount;
                updateList.Add(instance);
                instance = m_variable.TransferSubscriptionsCount;
                instance.OnReadValue = OnRead_TransferSubscriptionsCount;
                instance.OnSimpleWriteValue = OnWrite_TransferSubscriptionsCount;
                updateList.Add(instance);
                instance = m_variable.DeleteSubscriptionsCount;
                instance.OnReadValue = OnRead_DeleteSubscriptionsCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteSubscriptionsCount;
                updateList.Add(instance);
                instance = m_variable.AddNodesCount;
                instance.OnReadValue = OnRead_AddNodesCount;
                instance.OnSimpleWriteValue = OnWrite_AddNodesCount;
                updateList.Add(instance);
                instance = m_variable.AddReferencesCount;
                instance.OnReadValue = OnRead_AddReferencesCount;
                instance.OnSimpleWriteValue = OnWrite_AddReferencesCount;
                updateList.Add(instance);
                instance = m_variable.DeleteNodesCount;
                instance.OnReadValue = OnRead_DeleteNodesCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteNodesCount;
                updateList.Add(instance);
                instance = m_variable.DeleteReferencesCount;
                instance.OnReadValue = OnRead_DeleteReferencesCount;
                instance.OnSimpleWriteValue = OnWrite_DeleteReferencesCount;
                updateList.Add(instance);
                instance = m_variable.BrowseCount;
                instance.OnReadValue = OnRead_BrowseCount;
                instance.OnSimpleWriteValue = OnWrite_BrowseCount;
                updateList.Add(instance);
                instance = m_variable.BrowseNextCount;
                instance.OnReadValue = OnRead_BrowseNextCount;
                instance.OnSimpleWriteValue = OnWrite_BrowseNextCount;
                updateList.Add(instance);
                instance = m_variable.TranslateBrowsePathsToNodeIdsCount;
                instance.OnReadValue = OnRead_TranslateBrowsePathsToNodeIdsCount;
                instance.OnSimpleWriteValue = OnWrite_TranslateBrowsePathsToNodeIdsCount;
                updateList.Add(instance);
                instance = m_variable.QueryFirstCount;
                instance.OnReadValue = OnRead_QueryFirstCount;
                instance.OnSimpleWriteValue = OnWrite_QueryFirstCount;
                updateList.Add(instance);
                instance = m_variable.QueryNextCount;
                instance.OnReadValue = OnRead_QueryNextCount;
                instance.OnSimpleWriteValue = OnWrite_QueryNextCount;
                updateList.Add(instance);
                instance = m_variable.RegisterNodesCount;
                instance.OnReadValue = OnRead_RegisterNodesCount;
                instance.OnSimpleWriteValue = OnWrite_RegisterNodesCount;
                updateList.Add(instance);
                instance = m_variable.UnregisterNodesCount;
                instance.OnReadValue = OnRead_UnregisterNodesCount;
                instance.OnSimpleWriteValue = OnWrite_UnregisterNodesCount;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SessionDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SessionName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientDescription Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientDescription(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientDescription;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientDescription(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientDescription = (ApplicationDescription)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ServerUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ServerUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ServerUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ServerUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ServerUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region EndpointUrl Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_EndpointUrl(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.EndpointUrl;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_EndpointUrl(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.EndpointUrl = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LocaleIds Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LocaleIds(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LocaleIds;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LocaleIds(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LocaleIds = (StringCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ActualSessionTimeout Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ActualSessionTimeout(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ActualSessionTimeout;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ActualSessionTimeout(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ActualSessionTimeout = (double)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region MaxResponseMessageSize Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_MaxResponseMessageSize(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.MaxResponseMessageSize;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_MaxResponseMessageSize(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.MaxResponseMessageSize = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientConnectionTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientConnectionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientConnectionTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientConnectionTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientConnectionTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientLastContactTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientLastContactTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientLastContactTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientLastContactTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientLastContactTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentSubscriptionsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentSubscriptionsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentSubscriptionsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentSubscriptionsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentMonitoredItemsCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CurrentPublishRequestsInQueue Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CurrentPublishRequestsInQueue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CurrentPublishRequestsInQueue;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CurrentPublishRequestsInQueue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CurrentPublishRequestsInQueue = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TotalRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TotalRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TotalRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TotalRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TotalRequestCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnauthorizedRequestCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_UnauthorizedRequestCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.UnauthorizedRequestCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_UnauthorizedRequestCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.UnauthorizedRequestCount = (uint)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ReadCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ReadCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ReadCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ReadCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region HistoryReadCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_HistoryReadCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.HistoryReadCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_HistoryReadCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.HistoryReadCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region WriteCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_WriteCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.WriteCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_WriteCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.WriteCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region HistoryUpdateCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_HistoryUpdateCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.HistoryUpdateCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_HistoryUpdateCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.HistoryUpdateCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CallCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CallCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CallCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CallCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CallCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateMonitoredItemsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifyMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ModifyMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ModifyMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ModifyMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ModifyMonitoredItemsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetMonitoringModeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SetMonitoringModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SetMonitoringModeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SetMonitoringModeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SetMonitoringModeCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetTriggeringCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SetTriggeringCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SetTriggeringCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SetTriggeringCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SetTriggeringCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteMonitoredItemsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteMonitoredItemsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteMonitoredItemsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteMonitoredItemsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteMonitoredItemsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateSubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateSubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateSubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateSubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateSubscriptionCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ModifySubscriptionCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ModifySubscriptionCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ModifySubscriptionCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ModifySubscriptionCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ModifySubscriptionCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SetPublishingModeCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SetPublishingModeCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SetPublishingModeCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SetPublishingModeCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SetPublishingModeCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region PublishCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_PublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.PublishCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_PublishCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.PublishCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RepublishCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RepublishCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RepublishCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RepublishCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RepublishCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransferSubscriptionsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransferSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransferSubscriptionsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransferSubscriptionsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransferSubscriptionsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteSubscriptionsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteSubscriptionsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteSubscriptionsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteSubscriptionsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteSubscriptionsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AddNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_AddNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.AddNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_AddNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.AddNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AddReferencesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_AddReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.AddReferencesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_AddReferencesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.AddReferencesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region DeleteReferencesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_DeleteReferencesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.DeleteReferencesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_DeleteReferencesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.DeleteReferencesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BrowseCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BrowseCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BrowseCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BrowseCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BrowseCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region BrowseNextCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_BrowseNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.BrowseNextCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_BrowseNextCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.BrowseNextCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TranslateBrowsePathsToNodeIdsCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TranslateBrowsePathsToNodeIdsCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TranslateBrowsePathsToNodeIdsCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TranslateBrowsePathsToNodeIdsCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TranslateBrowsePathsToNodeIdsCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region QueryFirstCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_QueryFirstCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.QueryFirstCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_QueryFirstCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.QueryFirstCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region QueryNextCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_QueryNextCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.QueryNextCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_QueryNextCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.QueryNextCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region RegisterNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_RegisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.RegisterNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_RegisterNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.RegisterNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region UnregisterNodesCount Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_UnregisterNodesCount(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.UnregisterNodesCount;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_UnregisterNodesCount(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.UnregisterNodesCount = (ServiceCounterDataType)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionDiagnosticsDataType m_value;
        private SessionDiagnosticsVariableState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region SessionSecurityDiagnosticsArrayState Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsArrayState)
    /// <summary>
    /// Stores an instance of the SessionSecurityDiagnosticsArrayType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsArrayState : BaseDataVariableState<SessionSecurityDiagnosticsDataType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionSecurityDiagnosticsArrayState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsArrayType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionSecurityDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneDimension;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAKwAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzQXJyYXlUeXBlSW5z" +
           "dGFuY2UBAMMIAQDDCAEAZAMBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SessionSecurityDiagnosticsState Class
    #if (!OPCUA_EXCLUDE_SessionSecurityDiagnosticsState)
    /// <summary>
    /// Stores an instance of the SessionSecurityDiagnosticsType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SessionSecurityDiagnosticsState : BaseDataVariableState<SessionSecurityDiagnosticsDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SessionSecurityDiagnosticsState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.SessionSecurityDiagnosticsType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.SessionSecurityDiagnosticsDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAJgAAAFNlc3Npb25TZWN1cml0eURpYWdub3N0aWNzVHlwZUluc3RhbmNl" +
           "AQDECAEAxAgBAGQD/////wEB/////wkAAAAVYIkKAgAAAAAACQAAAFNlc3Npb25JZAEAxQgALwA/xQgA" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAAFQAAAENsaWVudFVzZXJJZE9mU2Vzc2lvbgEAxggALwA/" +
           "xggAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAENsaWVudFVzZXJJZEhpc3RvcnkBAMcIAC8A" +
           "P8cIAAAADAEAAAABAf////8AAAAAFWCJCgIAAAAAABcAAABBdXRoZW50aWNhdGlvbk1lY2hhbmlzbQEA" +
           "yAgALwA/yAgAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEVuY29kaW5nAQDJCAAvAD/JCAAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAARAAAAVHJhbnNwb3J0UHJvdG9jb2wBAMoIAC8AP8oIAAAA" +
           "DP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZWN1cml0eU1vZGUBAMsIAC8AP8sIAAABAC4B////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEQAAAFNlY3VyaXR5UG9saWN5VXJpAQDMCAAvAD/MCAAAAAz/////" +
           "AQH/////AAAAABVgiQoCAAAAAAARAAAAQ2xpZW50Q2VydGlmaWNhdGUBAPILAC8AP/ILAAAAD/////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public BaseDataVariableState<NodeId> SessionId
        {
            get
            {
                return m_sessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sessionId = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> ClientUserIdOfSession
        {
            get
            {
                return m_clientUserIdOfSession;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserIdOfSession, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserIdOfSession = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string[]> ClientUserIdHistory
        {
            get
            {
                return m_clientUserIdHistory;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserIdHistory, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserIdHistory = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> AuthenticationMechanism
        {
            get
            {
                return m_authenticationMechanism;
            }

            set
            {
                if (!Object.ReferenceEquals(m_authenticationMechanism, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_authenticationMechanism = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> Encoding
        {
            get
            {
                return m_encoding;
            }

            set
            {
                if (!Object.ReferenceEquals(m_encoding, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_encoding = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> TransportProtocol
        {
            get
            {
                return m_transportProtocol;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transportProtocol, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transportProtocol = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<MessageSecurityMode> SecurityMode
        {
            get
            {
                return m_securityMode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityMode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityMode = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<string> SecurityPolicyUri
        {
            get
            {
                return m_securityPolicyUri;
            }

            set
            {
                if (!Object.ReferenceEquals(m_securityPolicyUri, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_securityPolicyUri = value;
            }
        }

        /// <remarks />
        public BaseDataVariableState<byte[]> ClientCertificate
        {
            get
            {
                return m_clientCertificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientCertificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientCertificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sessionId != null)
            {
                children.Add(m_sessionId);
            }

            if (m_clientUserIdOfSession != null)
            {
                children.Add(m_clientUserIdOfSession);
            }

            if (m_clientUserIdHistory != null)
            {
                children.Add(m_clientUserIdHistory);
            }

            if (m_authenticationMechanism != null)
            {
                children.Add(m_authenticationMechanism);
            }

            if (m_encoding != null)
            {
                children.Add(m_encoding);
            }

            if (m_transportProtocol != null)
            {
                children.Add(m_transportProtocol);
            }

            if (m_securityMode != null)
            {
                children.Add(m_securityMode);
            }

            if (m_securityPolicyUri != null)
            {
                children.Add(m_securityPolicyUri);
            }

            if (m_clientCertificate != null)
            {
                children.Add(m_clientCertificate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SessionId:
                {
                    if (createOrReplace)
                    {
                        if (SessionId == null)
                        {
                            if (replacement == null)
                            {
                                SessionId = new BaseDataVariableState<NodeId>(this);
                            }
                            else
                            {
                                SessionId = (BaseDataVariableState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserIdOfSession:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserIdOfSession == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserIdOfSession = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                ClientUserIdOfSession = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserIdOfSession;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserIdHistory:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserIdHistory == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserIdHistory = new BaseDataVariableState<string[]>(this);
                            }
                            else
                            {
                                ClientUserIdHistory = (BaseDataVariableState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ClientUserIdHistory;
                    break;
                }

                case Opc.Ua.BrowseNames.AuthenticationMechanism:
                {
                    if (createOrReplace)
                    {
                        if (AuthenticationMechanism == null)
                        {
                            if (replacement == null)
                            {
                                AuthenticationMechanism = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                AuthenticationMechanism = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = AuthenticationMechanism;
                    break;
                }

                case Opc.Ua.BrowseNames.Encoding:
                {
                    if (createOrReplace)
                    {
                        if (Encoding == null)
                        {
                            if (replacement == null)
                            {
                                Encoding = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                Encoding = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = Encoding;
                    break;
                }

                case Opc.Ua.BrowseNames.TransportProtocol:
                {
                    if (createOrReplace)
                    {
                        if (TransportProtocol == null)
                        {
                            if (replacement == null)
                            {
                                TransportProtocol = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                TransportProtocol = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = TransportProtocol;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityMode:
                {
                    if (createOrReplace)
                    {
                        if (SecurityMode == null)
                        {
                            if (replacement == null)
                            {
                                SecurityMode = new BaseDataVariableState<MessageSecurityMode>(this);
                            }
                            else
                            {
                                SecurityMode = (BaseDataVariableState<MessageSecurityMode>)replacement;
                            }
                        }
                    }

                    instance = SecurityMode;
                    break;
                }

                case Opc.Ua.BrowseNames.SecurityPolicyUri:
                {
                    if (createOrReplace)
                    {
                        if (SecurityPolicyUri == null)
                        {
                            if (replacement == null)
                            {
                                SecurityPolicyUri = new BaseDataVariableState<string>(this);
                            }
                            else
                            {
                                SecurityPolicyUri = (BaseDataVariableState<string>)replacement;
                            }
                        }
                    }

                    instance = SecurityPolicyUri;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientCertificate:
                {
                    if (createOrReplace)
                    {
                        if (ClientCertificate == null)
                        {
                            if (replacement == null)
                            {
                                ClientCertificate = new BaseDataVariableState<byte[]>(this);
                            }
                            else
                            {
                                ClientCertificate = (BaseDataVariableState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = ClientCertificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private BaseDataVariableState<NodeId> m_sessionId;
        private BaseDataVariableState<string> m_clientUserIdOfSession;
        private BaseDataVariableState<string[]> m_clientUserIdHistory;
        private BaseDataVariableState<string> m_authenticationMechanism;
        private BaseDataVariableState<string> m_encoding;
        private BaseDataVariableState<string> m_transportProtocol;
        private BaseDataVariableState<MessageSecurityMode> m_securityMode;
        private BaseDataVariableState<string> m_securityPolicyUri;
        private BaseDataVariableState<byte[]> m_clientCertificate;
        #endregion
    }

    #region SessionSecurityDiagnosticsValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class SessionSecurityDiagnosticsValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public SessionSecurityDiagnosticsValue(SessionSecurityDiagnosticsState variable, SessionSecurityDiagnosticsDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new SessionSecurityDiagnosticsDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public SessionSecurityDiagnosticsState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public SessionSecurityDiagnosticsDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(SessionSecurityDiagnosticsState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.SessionId;
                instance.OnReadValue = OnRead_SessionId;
                instance.OnSimpleWriteValue = OnWrite_SessionId;
                updateList.Add(instance);
                instance = m_variable.ClientUserIdOfSession;
                instance.OnReadValue = OnRead_ClientUserIdOfSession;
                instance.OnSimpleWriteValue = OnWrite_ClientUserIdOfSession;
                updateList.Add(instance);
                instance = m_variable.ClientUserIdHistory;
                instance.OnReadValue = OnRead_ClientUserIdHistory;
                instance.OnSimpleWriteValue = OnWrite_ClientUserIdHistory;
                updateList.Add(instance);
                instance = m_variable.AuthenticationMechanism;
                instance.OnReadValue = OnRead_AuthenticationMechanism;
                instance.OnSimpleWriteValue = OnWrite_AuthenticationMechanism;
                updateList.Add(instance);
                instance = m_variable.Encoding;
                instance.OnReadValue = OnRead_Encoding;
                instance.OnSimpleWriteValue = OnWrite_Encoding;
                updateList.Add(instance);
                instance = m_variable.TransportProtocol;
                instance.OnReadValue = OnRead_TransportProtocol;
                instance.OnSimpleWriteValue = OnWrite_TransportProtocol;
                updateList.Add(instance);
                instance = m_variable.SecurityMode;
                instance.OnReadValue = OnRead_SecurityMode;
                instance.OnSimpleWriteValue = OnWrite_SecurityMode;
                updateList.Add(instance);
                instance = m_variable.SecurityPolicyUri;
                instance.OnReadValue = OnRead_SecurityPolicyUri;
                instance.OnSimpleWriteValue = OnWrite_SecurityPolicyUri;
                updateList.Add(instance);
                instance = m_variable.ClientCertificate;
                instance.OnReadValue = OnRead_ClientCertificate;
                instance.OnSimpleWriteValue = OnWrite_ClientCertificate;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (SessionSecurityDiagnosticsDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region SessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientUserIdOfSession Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientUserIdOfSession(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientUserIdOfSession;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientUserIdOfSession(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientUserIdOfSession = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientUserIdHistory Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientUserIdHistory(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientUserIdHistory;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientUserIdHistory(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientUserIdHistory = (StringCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region AuthenticationMechanism Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_AuthenticationMechanism(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.AuthenticationMechanism;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_AuthenticationMechanism(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.AuthenticationMechanism = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region Encoding Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_Encoding(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.Encoding;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_Encoding(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.Encoding = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region TransportProtocol Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_TransportProtocol(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.TransportProtocol;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_TransportProtocol(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.TransportProtocol = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityMode Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityMode(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityMode;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityMode(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityMode = (MessageSecurityMode)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region SecurityPolicyUri Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_SecurityPolicyUri(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.SecurityPolicyUri;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_SecurityPolicyUri(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.SecurityPolicyUri = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region ClientCertificate Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_ClientCertificate(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.ClientCertificate;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_ClientCertificate(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.ClientCertificate = (byte[])Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private SessionSecurityDiagnosticsDataType m_value;
        private SessionSecurityDiagnosticsState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region OptionSetState Class
    #if (!OPCUA_EXCLUDE_OptionSetState)
    /// <summary>
    /// Stores an instance of the OptionSetType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OptionSetState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OptionSetState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.OptionSetType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (BitMask != null)
            {
                BitMask.Initialize(context, BitMask_InitializationString);
            }
        }

        #region Initialization String
        private const string BitMask_InitializationString =
           "//////////8VYIkKAgAAAAAABwAAAEJpdE1hc2sBALUtAC4ARLUtAAAAAQEAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAFQAAAE9wdGlvblNldFR5cGVJbnN0YW5jZQEA3ywBAN8sABj/////AQH/" +
           "////AgAAABVgiQoCAAAAAAAPAAAAT3B0aW9uU2V0VmFsdWVzAQDgLAAuAETgLAAAABUBAAAAAQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAAQml0TWFzawEAtS0ALgBEtS0AAAABAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText[]> OptionSetValues
        {
            get
            {
                return m_optionSetValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_optionSetValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_optionSetValues = value;
            }
        }

        /// <remarks />
        public PropertyState<bool[]> BitMask
        {
            get
            {
                return m_bitMask;
            }

            set
            {
                if (!Object.ReferenceEquals(m_bitMask, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_bitMask = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_optionSetValues != null)
            {
                children.Add(m_optionSetValues);
            }

            if (m_bitMask != null)
            {
                children.Add(m_bitMask);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.OptionSetValues:
                {
                    if (createOrReplace)
                    {
                        if (OptionSetValues == null)
                        {
                            if (replacement == null)
                            {
                                OptionSetValues = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                OptionSetValues = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = OptionSetValues;
                    break;
                }

                case Opc.Ua.BrowseNames.BitMask:
                {
                    if (createOrReplace)
                    {
                        if (BitMask == null)
                        {
                            if (replacement == null)
                            {
                                BitMask = new PropertyState<bool[]>(this);
                            }
                            else
                            {
                                BitMask = (PropertyState<bool[]>)replacement;
                            }
                        }
                    }

                    instance = BitMask;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText[]> m_optionSetValues;
        private PropertyState<bool[]> m_bitMask;
        #endregion
    }

    #region OptionSetState<T> Class
    /// <summary>
    /// A typed version of the OptionSetType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class OptionSetState<T> : OptionSetState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public OptionSetState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region GetMonitoredItemsMethodState Class
    #if (!OPCUA_EXCLUDE_GetMonitoredItemsMethodState)
    /// <summary>
    /// Stores an instance of the GetMonitoredItemsMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetMonitoredItemsMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GetMonitoredItemsMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new GetMonitoredItemsMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAEdldE1vbml0b3JlZEl0ZW1zTWV0aG9kVHlwZQEA5ywALwEA5yzn" +
           "LAAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgsAC4AROgsAACWAQAAAAEA" +
           "KgEBHQAAAA4AAABTdWJzY3JpcHRpb25JZAAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIA" +
           "AAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAOksAC4AROksAACWAgAAAAEAKgEBHAAAAA0AAABTZXJ2ZXJI" +
           "YW5kbGVzAAcBAAAAAAAAAAABACoBARwAAAANAAAAQ2xpZW50SGFuZGxlcwAHAQAAAAAAAAAAAQAoAQEA" +
           "AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public GetMonitoredItemsMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            uint[] serverHandles = (uint[])_outputArguments[0];
            uint[] clientHandles = (uint[])_outputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    ref serverHandles,
                    ref clientHandles);
            }

            _outputArguments[0] = serverHandles;
            _outputArguments[1] = clientHandles;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult GetMonitoredItemsMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint subscriptionId,
        ref uint[] serverHandles,
        ref uint[] clientHandles);
    #endif
    #endregion

    #region ResendDataMethodState Class
    #if (!OPCUA_EXCLUDE_ResendDataMethodState)
    /// <summary>
    /// Stores an instance of the ResendDataMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ResendDataMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ResendDataMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ResendDataMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAFJlc2VuZERhdGFNZXRob2RUeXBlAQBLMgAvAQBLMksyAAABAf//" +
           "//8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEATDIALgBETDIAAJYBAAAAAQAqAQEdAAAA" +
           "DgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ResendDataMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ResendDataMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint subscriptionId);
    #endif
    #endregion

    #region SetSubscriptionDurableMethodState Class
    #if (!OPCUA_EXCLUDE_SetSubscriptionDurableMethodState)
    /// <summary>
    /// Stores an instance of the SetSubscriptionDurableMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetSubscriptionDurableMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SetSubscriptionDurableMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new SetSubscriptionDurableMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIAAAAFNldFN1YnNjcmlwdGlvbkR1cmFibGVNZXRob2RUeXBlAQDQMQAv" +
           "AQDQMdAxAAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA0TEALgBE0TEAAJYC" +
           "AAAAAQAqAQEdAAAADgAAAFN1YnNjcmlwdGlvbklkAAf/////AAAAAAABACoBAR4AAAAPAAAATGlmZXRp" +
           "bWVJbkhvdXJzAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFy" +
           "Z3VtZW50cwEA0jEALgBE0jEAAJYBAAAAAQAqAQElAAAAFgAAAFJldmlzZWRMaWZldGltZUluSG91cnMA" +
           "B/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public SetSubscriptionDurableMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];
            uint lifetimeInHours = (uint)_inputArguments[1];

            uint revisedLifetimeInHours = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    lifetimeInHours,
                    ref revisedLifetimeInHours);
            }

            _outputArguments[0] = revisedLifetimeInHours;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult SetSubscriptionDurableMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint subscriptionId,
        uint lifetimeInHours,
        ref uint revisedLifetimeInHours);
    #endif
    #endregion

    #region RequestServerStateChangeMethodState Class
    #if (!OPCUA_EXCLUDE_RequestServerStateChangeMethodState)
    /// <summary>
    /// Stores an instance of the RequestServerStateChangeMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RequestServerStateChangeMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RequestServerStateChangeMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new RequestServerStateChangeMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAIgAAAFJlcXVlc3RTZXJ2ZXJTdGF0ZUNoYW5nZU1ldGhvZFR5cGUBAFgy" +
           "AC8BAFgyWDIAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBZMgAuAERZMgAA" +
           "lgUAAAABACoBARYAAAAFAAAAU3RhdGUBAFQD/////wAAAAAAAQAqAQEiAAAAEwAAAEVzdGltYXRlZFJl" +
           "dHVyblRpbWUADf////8AAAAAAAEAKgEBIgAAABMAAABTZWNvbmRzVGlsbFNodXRkb3duAAf/////AAAA" +
           "AAABACoBARUAAAAGAAAAUmVhc29uABX/////AAAAAAABACoBARYAAAAHAAAAUmVzdGFydAAB/////wAA" +
           "AAAAAQAoAQEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public RequestServerStateChangeMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            ServerState state = (ServerState)_inputArguments[0];
            DateTime estimatedReturnTime = (DateTime)_inputArguments[1];
            uint secondsTillShutdown = (uint)_inputArguments[2];
            LocalizedText reason = (LocalizedText)_inputArguments[3];
            bool restart = (bool)_inputArguments[4];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    state,
                    estimatedReturnTime,
                    secondsTillShutdown,
                    reason,
                    restart);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult RequestServerStateChangeMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        ServerState state,
        DateTime estimatedReturnTime,
        uint secondsTillShutdown,
        LocalizedText reason,
        bool restart);
    #endif
    #endregion

    #region StateMachineState Class
    #if (!OPCUA_EXCLUDE_StateMachineState)
    /// <summary>
    /// Stores an instance of the StateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastTransition != null)
            {
                LastTransition.Initialize(context, LastTransition_InitializationString);
            }
        }

        #region Initialization String
        private const string LastTransition_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDSCgAvAQDKCtIKAAAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAEAjA4ALgBEjA4AAAAY/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGAAAAFN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA+wgBAPsI/////wIA" +
           "AAAVYIkKAgAAAAAADAAAAEN1cnJlbnRTdGF0ZQEA0QoALwEAwwrRCgAAABX/////AQH/////AQAAABVg" +
           "iQoCAAAAAAACAAAASWQBAIgOAC4ARIgOAAAAGP////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0" +
           "VHJhbnNpdGlvbgEA0goALwEAygrSCgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBAIwO" +
           "AC4ARIwOAAAAGP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public StateVariableState CurrentState
        {
            get
            {
                return m_currentState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_currentState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_currentState = value;
            }
        }

        /// <remarks />
        public TransitionVariableState LastTransition
        {
            get
            {
                return m_lastTransition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_currentState != null)
            {
                children.Add(m_currentState);
            }

            if (m_lastTransition != null)
            {
                children.Add(m_lastTransition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentState:
                {
                    if (createOrReplace)
                    {
                        if (CurrentState == null)
                        {
                            if (replacement == null)
                            {
                                CurrentState = new StateVariableState(this);
                            }
                            else
                            {
                                CurrentState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentState;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransition:
                {
                    if (createOrReplace)
                    {
                        if (LastTransition == null)
                        {
                            if (replacement == null)
                            {
                                LastTransition = new TransitionVariableState(this);
                            }
                            else
                            {
                                LastTransition = (TransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = LastTransition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private StateVariableState m_currentState;
        private TransitionVariableState m_lastTransition;
        #endregion
    }
    #endif
    #endregion

    #region StateVariableState Class
    #if (!OPCUA_EXCLUDE_StateVariableState)
    /// <summary>
    /// Stores an instance of the StateVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.StateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Name != null)
            {
                Name.Initialize(context, Name_InitializationString);
            }

            if (Number != null)
            {
                Number.Initialize(context, Number_InitializationString);
            }

            if (EffectiveDisplayName != null)
            {
                EffectiveDisplayName.Initialize(context, EffectiveDisplayName_InitializationString);
            }
        }

        #region Initialization String
        private const string Name_InitializationString =
           "//////////8VYIkKAgAAAAAABAAAAE5hbWUBAMUKAC4ARMUKAAAAFP////8BAf////8AAAAA";

        private const string Number_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAE51bWJlcgEAxgoALgBExgoAAAAH/////wEB/////wAAAAA=";

        private const string EffectiveDisplayName_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlOYW1lAQDHCgAuAETHCgAAABX/////" +
           "AQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAGQAAAFN0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBAMMKAQDDCgAV////" +
           "/wEB/////wQAAAAVYIkKAgAAAAAAAgAAAElkAQDECgAuAETECgAAABj/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAEAAAATmFtZQEAxQoALgBExQoAAAAU/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAE51bWJl" +
           "cgEAxgoALgBExgoAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAEVmZmVjdGl2ZURpc3BsYXlO" +
           "YW1lAQDHCgAuAETHCgAAABX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName> Name
        {
            get
            {
                return m_name;
            }

            set
            {
                if (!Object.ReferenceEquals(m_name, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_name = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Number
        {
            get
            {
                return m_number;
            }

            set
            {
                if (!Object.ReferenceEquals(m_number, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_number = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> EffectiveDisplayName
        {
            get
            {
                return m_effectiveDisplayName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveDisplayName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveDisplayName = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_name != null)
            {
                children.Add(m_name);
            }

            if (m_number != null)
            {
                children.Add(m_number);
            }

            if (m_effectiveDisplayName != null)
            {
                children.Add(m_effectiveDisplayName);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState(this);
                            }
                            else
                            {
                                Id = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Name:
                {
                    if (createOrReplace)
                    {
                        if (Name == null)
                        {
                            if (replacement == null)
                            {
                                Name = new PropertyState<QualifiedName>(this);
                            }
                            else
                            {
                                Name = (PropertyState<QualifiedName>)replacement;
                            }
                        }
                    }

                    instance = Name;
                    break;
                }

                case Opc.Ua.BrowseNames.Number:
                {
                    if (createOrReplace)
                    {
                        if (Number == null)
                        {
                            if (replacement == null)
                            {
                                Number = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Number = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Number;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveDisplayName:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveDisplayName == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveDisplayName = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                EffectiveDisplayName = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = EffectiveDisplayName;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_id;
        private PropertyState<QualifiedName> m_name;
        private PropertyState<uint> m_number;
        private PropertyState<LocalizedText> m_effectiveDisplayName;
        #endregion
    }
    #endif
    #endregion

    #region TransitionVariableState Class
    #if (!OPCUA_EXCLUDE_TransitionVariableState)
    /// <summary>
    /// Stores an instance of the TransitionVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransitionVariableState : BaseDataVariableState<LocalizedText>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TransitionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TransitionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Name != null)
            {
                Name.Initialize(context, Name_InitializationString);
            }

            if (Number != null)
            {
                Number.Initialize(context, Number_InitializationString);
            }

            if (TransitionTime != null)
            {
                TransitionTime.Initialize(context, TransitionTime_InitializationString);
            }

            if (EffectiveTransitionTime != null)
            {
                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
            }
        }

        #region Initialization String
        private const string Name_InitializationString =
           "//////////8VYIkKAgAAAAAABAAAAE5hbWUBAMwKAC4ARMwKAAAAFP////8BAf////8AAAAA";

        private const string Number_InitializationString =
           "//////////8VYIkKAgAAAAAABgAAAE51bWJlcgEAzQoALgBEzQoAAAAH/////wEB/////wAAAAA=";

        private const string TransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQDOCgAuAETOCgAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string EffectiveTransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQDALAAuAETALAAAAQAm" +
           "Af////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAHgAAAFRyYW5zaXRpb25WYXJpYWJsZVR5cGVJbnN0YW5jZQEAygoBAMoK" +
           "ABX/////AQH/////BQAAABVgiQoCAAAAAAACAAAASWQBAMsKAC4ARMsKAAAAGP////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAQAAABOYW1lAQDMCgAuAETMCgAAABT/////AQH/////AAAAABVgiQoCAAAAAAAGAAAA" +
           "TnVtYmVyAQDNCgAuAETNCgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRp" +
           "bWUBAM4KAC4ARM4KAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5z" +
           "aXRpb25UaW1lAQDALAAuAETALAAAAQAmAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState Id
        {
            get
            {
                return m_id;
            }

            set
            {
                if (!Object.ReferenceEquals(m_id, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_id = value;
            }
        }

        /// <remarks />
        public PropertyState<QualifiedName> Name
        {
            get
            {
                return m_name;
            }

            set
            {
                if (!Object.ReferenceEquals(m_name, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_name = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> Number
        {
            get
            {
                return m_number;
            }

            set
            {
                if (!Object.ReferenceEquals(m_number, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_number = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> TransitionTime
        {
            get
            {
                return m_transitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EffectiveTransitionTime
        {
            get
            {
                return m_effectiveTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveTransitionTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_id != null)
            {
                children.Add(m_id);
            }

            if (m_name != null)
            {
                children.Add(m_name);
            }

            if (m_number != null)
            {
                children.Add(m_number);
            }

            if (m_transitionTime != null)
            {
                children.Add(m_transitionTime);
            }

            if (m_effectiveTransitionTime != null)
            {
                children.Add(m_effectiveTransitionTime);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState(this);
                            }
                            else
                            {
                                Id = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.Name:
                {
                    if (createOrReplace)
                    {
                        if (Name == null)
                        {
                            if (replacement == null)
                            {
                                Name = new PropertyState<QualifiedName>(this);
                            }
                            else
                            {
                                Name = (PropertyState<QualifiedName>)replacement;
                            }
                        }
                    }

                    instance = Name;
                    break;
                }

                case Opc.Ua.BrowseNames.Number:
                {
                    if (createOrReplace)
                    {
                        if (Number == null)
                        {
                            if (replacement == null)
                            {
                                Number = new PropertyState<uint>(this);
                            }
                            else
                            {
                                Number = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = Number;
                    break;
                }

                case Opc.Ua.BrowseNames.TransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (TransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                TransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EffectiveTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EffectiveTransitionTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_id;
        private PropertyState<QualifiedName> m_name;
        private PropertyState<uint> m_number;
        private PropertyState<DateTime> m_transitionTime;
        private PropertyState<DateTime> m_effectiveTransitionTime;
        #endregion
    }
    #endif
    #endregion

    #region FiniteStateMachineState Class
    #if (!OPCUA_EXCLUDE_FiniteStateMachineState)
    /// <summary>
    /// Stores an instance of the FiniteStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteStateMachineState : StateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FiniteStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.FiniteStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (LastTransition != null)
            {
                LastTransition.Initialize(context, LastTransition_InitializationString);
            }
        }

        #region Initialization String
        private const string LastTransition_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDVCgAvAQDPCtUKAAAAFf////8BAf//" +
           "//8BAAAAFWCJCgIAAAAAAAIAAABJZAEAlA4ALgBElA4AAAAR/////wEB/////wAAAAA=";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHgAAAEZpbml0ZVN0YXRlTWFjaGluZVR5cGVJbnN0YW5jZQEA0woBANMK" +
           "/////wIAAAAVYIkKAgAAAAAADAAAAEN1cnJlbnRTdGF0ZQEA1AoALwEAyArUCgAAABX/////AQH/////" +
           "AQAAABVgiQoCAAAAAAACAAAASWQBAJAOAC4ARJAOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA4A" +
           "AABMYXN0VHJhbnNpdGlvbgEA1QoALwEAzwrVCgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAA" +
           "SWQBAJQOAC4ARJQOAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new FiniteStateVariableState CurrentState
        {
            get { return (FiniteStateVariableState)base.CurrentState; }
            set { base.CurrentState = value; }
        }

        /// <remarks />
        public new FiniteTransitionVariableState LastTransition
        {
            get { return (FiniteTransitionVariableState)base.LastTransition; }
            set { base.LastTransition = value; }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CurrentState:
                {
                    if (createOrReplace)
                    {
                        if (CurrentState == null)
                        {
                            if (replacement == null)
                            {
                                CurrentState = new FiniteStateVariableState(this);
                            }
                            else
                            {
                                CurrentState = (FiniteStateVariableState)replacement;
                            }
                        }
                    }

                    instance = CurrentState;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransition:
                {
                    if (createOrReplace)
                    {
                        if (LastTransition == null)
                        {
                            if (replacement == null)
                            {
                                LastTransition = new FiniteTransitionVariableState(this);
                            }
                            else
                            {
                                LastTransition = (FiniteTransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = LastTransition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region FiniteStateVariableState Class
    #if (!OPCUA_EXCLUDE_FiniteStateVariableState)
    /// <summary>
    /// Stores an instance of the FiniteStateVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteStateVariableState : StateVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FiniteStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FiniteStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAHwAAAEZpbml0ZVN0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBAMgKAQDI" +
           "CgAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQDJCgAuAETJCgAAABH/////AQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<NodeId> Id
        {
            get { return (PropertyState<NodeId>)base.Id; }
            set { base.Id = value; }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                Id = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region FiniteTransitionVariableState Class
    #if (!OPCUA_EXCLUDE_FiniteTransitionVariableState)
    /// <summary>
    /// Stores an instance of the FiniteTransitionVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class FiniteTransitionVariableState : TransitionVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public FiniteTransitionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.FiniteTransitionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAJAAAAEZpbml0ZVRyYW5zaXRpb25WYXJpYWJsZVR5cGVJbnN0YW5jZQEA" +
           "zwoBAM8KABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBANAKAC4ARNAKAAAAEf////8BAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<NodeId> Id
        {
            get { return (PropertyState<NodeId>)base.Id; }
            set { base.Id = value; }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                Id = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StateMachineStateState Class
    #if (!OPCUA_EXCLUDE_StateMachineStateState)
    /// <summary>
    /// Stores an instance of the StateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineStateState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineStateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.StateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAEQAAAFN0YXRlVHlwZUluc3RhbmNlAQADCQEAAwn/////AQAAABVgiQoC" +
           "AAAAAAALAAAAU3RhdGVOdW1iZXIBAAQJAC4ARAQJAAAAB/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> StateNumber
        {
            get
            {
                return m_stateNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_stateNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_stateNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_stateNumber != null)
            {
                children.Add(m_stateNumber);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.StateNumber:
                {
                    if (createOrReplace)
                    {
                        if (StateNumber == null)
                        {
                            if (replacement == null)
                            {
                                StateNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                StateNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = StateNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_stateNumber;
        #endregion
    }
    #endif
    #endregion

    #region StateMachineInitialStateState Class
    #if (!OPCUA_EXCLUDE_StateMachineInitialStateState)
    /// <summary>
    /// Stores an instance of the InitialStateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineInitialStateState : StateMachineStateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineInitialStateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.InitialStateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGAAAAEluaXRpYWxTdGF0ZVR5cGVJbnN0YW5jZQEABQkBAAUJ/////wEA" +
           "AAAVYIkKAgAAAAAACwAAAFN0YXRlTnVtYmVyAQCYDgAuAESYDgAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region StateMachineTransitionState Class
    #if (!OPCUA_EXCLUDE_StateMachineTransitionState)
    /// <summary>
    /// Stores an instance of the TransitionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class StateMachineTransitionState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public StateMachineTransitionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransitionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFgAAAFRyYW5zaXRpb25UeXBlSW5zdGFuY2UBAAYJAQAGCf////8BAAAA" +
           "FWCJCgIAAAAAABAAAABUcmFuc2l0aW9uTnVtYmVyAQAICQAuAEQICQAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> TransitionNumber
        {
            get
            {
                return m_transitionNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionNumber != null)
            {
                children.Add(m_transitionNumber);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TransitionNumber:
                {
                    if (createOrReplace)
                    {
                        if (TransitionNumber == null)
                        {
                            if (replacement == null)
                            {
                                TransitionNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                TransitionNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransitionNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_transitionNumber;
        #endregion
    }
    #endif
    #endregion

    #region TransitionEventState Class
    #if (!OPCUA_EXCLUDE_TransitionEventState)
    /// <summary>
    /// Stores an instance of the TransitionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TransitionEventState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGwAAAFRyYW5zaXRpb25FdmVudFR5cGVJbnN0YW5jZQEABwkBAAcJ////" +
           "/wwAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAJkOAC4ARJkOAAAAD/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAkAAABFdmVudFR5cGUBAJoOAC4ARJoOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOb2RlAQCbDgAuAESbDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFt" +
           "ZQEAnA4ALgBEnA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAJ0OAC4ARJ0OAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCeDgAuAESeDgAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJ8OAC4ARJ8OAAABANAi/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAKAOAC4ARKAOAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABTZXZlcml0eQEAoQ4ALgBEoQ4AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFRy" +
           "YW5zaXRpb24BANYKAC8BAMoK1goAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAAAgAAAElkAQCqDgAu" +
           "AESqDgAAABj/////AQH/////AAAAABVgiQoCAAAAAAAJAAAARnJvbVN0YXRlAQDXCgAvAQDDCtcKAAAA" +
           "Ff////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEAog4ALgBEog4AAAAY/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABwAAAFRvU3RhdGUBANgKAC8BAMMK2AoAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQCmDgAuAESmDgAAABj/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TransitionVariableState Transition
        {
            get
            {
                return m_transition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transition = value;
            }
        }

        /// <remarks />
        public StateVariableState FromState
        {
            get
            {
                return m_fromState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_fromState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_fromState = value;
            }
        }

        /// <remarks />
        public StateVariableState ToState
        {
            get
            {
                return m_toState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_toState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_toState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transition != null)
            {
                children.Add(m_transition);
            }

            if (m_fromState != null)
            {
                children.Add(m_fromState);
            }

            if (m_toState != null)
            {
                children.Add(m_toState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Transition:
                {
                    if (createOrReplace)
                    {
                        if (Transition == null)
                        {
                            if (replacement == null)
                            {
                                Transition = new TransitionVariableState(this);
                            }
                            else
                            {
                                Transition = (TransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = Transition;
                    break;
                }

                case Opc.Ua.BrowseNames.FromState:
                {
                    if (createOrReplace)
                    {
                        if (FromState == null)
                        {
                            if (replacement == null)
                            {
                                FromState = new StateVariableState(this);
                            }
                            else
                            {
                                FromState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = FromState;
                    break;
                }

                case Opc.Ua.BrowseNames.ToState:
                {
                    if (createOrReplace)
                    {
                        if (ToState == null)
                        {
                            if (replacement == null)
                            {
                                ToState = new StateVariableState(this);
                            }
                            else
                            {
                                ToState = (StateVariableState)replacement;
                            }
                        }
                    }

                    instance = ToState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TransitionVariableState m_transition;
        private StateVariableState m_fromState;
        private StateVariableState m_toState;
        #endregion
    }
    #endif
    #endregion

    #region AuditUpdateStateEventState Class
    #if (!OPCUA_EXCLUDE_AuditUpdateStateEventState)
    /// <summary>
    /// Stores an instance of the AuditUpdateStateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditUpdateStateEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditUpdateStateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditUpdateStateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAEF1ZGl0VXBkYXRlU3RhdGVFdmVudFR5cGVJbnN0YW5jZQEACwkB" +
           "AAsJ/////xIAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAK4OAC4ARK4OAAAAD/////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAK8OAC4ARK8OAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOb2RlAQCwDgAuAESwDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTmFtZQEAsQ4ALgBEsQ4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBALIOAC4A" +
           "RLIOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCzDgAuAESzDgAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBALQOAC4ARLQOAAABANAi////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBALUOAC4ARLUOAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAgAAABTZXZlcml0eQEAtg4ALgBEtg4AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DwAAAEFjdGlvblRpbWVTdGFtcAEAtw4ALgBEtw4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAAU3RhdHVzAQC4DgAuAES4DgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2VydmVySWQB" +
           "ALkOAC4ARLkOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVudHJ5SWQB" +
           "ALoOAC4ARLoOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBALsOAC4A" +
           "RLsOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAvA4ALgBEvA4AAAAR////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQC9DgAuAES9DgAAABgBAAAAAQH/" +
           "////AAAAABVgiQoCAAAAAAAKAAAAT2xkU3RhdGVJZAEA2QoALgBE2QoAAAAY/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAE5ld1N0YXRlSWQBANoKAC4ARNoKAAAAGP////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState OldStateId
        {
            get
            {
                return m_oldStateId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldStateId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldStateId = value;
            }
        }

        /// <remarks />
        public PropertyState NewStateId
        {
            get
            {
                return m_newStateId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newStateId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newStateId = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_oldStateId != null)
            {
                children.Add(m_oldStateId);
            }

            if (m_newStateId != null)
            {
                children.Add(m_newStateId);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.OldStateId:
                {
                    if (createOrReplace)
                    {
                        if (OldStateId == null)
                        {
                            if (replacement == null)
                            {
                                OldStateId = new PropertyState(this);
                            }
                            else
                            {
                                OldStateId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = OldStateId;
                    break;
                }

                case Opc.Ua.BrowseNames.NewStateId:
                {
                    if (createOrReplace)
                    {
                        if (NewStateId == null)
                        {
                            if (replacement == null)
                            {
                                NewStateId = new PropertyState(this);
                            }
                            else
                            {
                                NewStateId = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = NewStateId;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_oldStateId;
        private PropertyState m_newStateId;
        #endregion
    }
    #endif
    #endregion

    #region OpenMethodState Class
    #if (!OPCUA_EXCLUDE_OpenMethodState)
    /// <summary>
    /// Stores an instance of the OpenMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OpenMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OpenMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new OpenMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAE9wZW5NZXRob2RUeXBlAQDaLQAvAQDaLdotAAABAf////8CAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA2y0ALgBE2y0AAJYBAAAAAQAqAQETAAAABAAAAE1v" +
           "ZGUAA/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRz" +
           "AQDcLQAuAETcLQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAAB" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public OpenMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte mode = (byte)_inputArguments[0];

            uint fileHandle = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    mode,
                    ref fileHandle);
            }

            _outputArguments[0] = fileHandle;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult OpenMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        byte mode,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseMethodState Class
    #if (!OPCUA_EXCLUDE_CloseMethodState)
    /// <summary>
    /// Stores an instance of the CloseMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CloseMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAENsb3NlTWV0aG9kVHlwZQEA3S0ALwEA3S3dLQAAAQH/////AQAA" +
           "ABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAN4tAC4ARN4tAACWAQAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CloseMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CloseMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint fileHandle);
    #endif
    #endregion

    #region ReadMethodState Class
    #if (!OPCUA_EXCLUDE_ReadMethodState)
    /// <summary>
    /// Stores an instance of the ReadMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ReadMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ReadMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ReadMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAFJlYWRNZXRob2RUeXBlAQDfLQAvAQDfLd8tAAABAf////8CAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4C0ALgBE4C0AAJYCAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQH/" +
           "////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQDhLQAuAEThLQAAlgEAAAABACoBARMA" +
           "AAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ReadMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];
            int length = (int)_inputArguments[1];

            byte[] data = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    length,
                    ref data);
            }

            _outputArguments[0] = data;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ReadMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint fileHandle,
        int length,
        ref byte[] data);
    #endif
    #endregion

    #region WriteMethodState Class
    #if (!OPCUA_EXCLUDE_WriteMethodState)
    /// <summary>
    /// Stores an instance of the WriteMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class WriteMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public WriteMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new WriteMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAADwAAAFdyaXRlTWV0aG9kVHlwZQEA4i0ALwEA4i3iLQAAAQH/////AQAA" +
           "ABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOMtAC4AROMtAACWAgAAAAEAKgEBGQAAAAoAAABG" +
           "aWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public WriteMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];
            byte[] data = (byte[])_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    data);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult WriteMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint fileHandle,
        byte[] data);
    #endif
    #endregion

    #region GetPositionMethodState Class
    #if (!OPCUA_EXCLUDE_GetPositionMethodState)
    /// <summary>
    /// Stores an instance of the GetPositionMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetPositionMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GetPositionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new GetPositionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAEdldFBvc2l0aW9uTWV0aG9kVHlwZQEA5C0ALwEA5C3kLQAAAQH/" +
           "////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOUtAC4AROUtAACWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91" +
           "dHB1dEFyZ3VtZW50cwEA5i0ALgBE5i0AAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAA" +
           "AAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public GetPositionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];

            ulong position = (ulong)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref position);
            }

            _outputArguments[0] = position;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult GetPositionMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint fileHandle,
        ref ulong position);
    #endif
    #endregion

    #region SetPositionMethodState Class
    #if (!OPCUA_EXCLUDE_SetPositionMethodState)
    /// <summary>
    /// Stores an instance of the SetPositionMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SetPositionMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SetPositionMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new SetPositionMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFNldFBvc2l0aW9uTWV0aG9kVHlwZQEA5y0ALwEA5y3nLQAAAQH/" +
           "////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgtAC4AROgtAACWAgAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEA" +
           "KAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public SetPositionMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];
            ulong position = (ulong)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    position);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult SetPositionMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint fileHandle,
        ulong position);
    #endif
    #endregion

    #region DataItemState Class
    #if (!OPCUA_EXCLUDE_DataItemState)
    /// <summary>
    /// Stores an instance of the DataItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DataItemState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DataItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.DataItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Any;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (Definition != null)
            {
                Definition.Initialize(context, Definition_InitializationString);
            }

            if (ValuePrecision != null)
            {
                ValuePrecision.Initialize(context, ValuePrecision_InitializationString);
            }
        }

        #region Initialization String
        private const string Definition_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERlZmluaXRpb24BAD4JAC4ARD4JAAAADP////8BAf////8AAAAA";

        private const string ValuePrecision_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFZhbHVlUHJlY2lzaW9uAQA/CQAuAEQ/CQAAAAv/////AQH/////" +
           "AAAAAA==";

        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAFAAAAERhdGFJdGVtVHlwZUluc3RhbmNlAQA9CQEAPQkAGAEB/////wIA" +
           "AAAVYIkKAgAAAAAACgAAAERlZmluaXRpb24BAD4JAC4ARD4JAAAADP////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABWYWx1ZVByZWNpc2lvbgEAPwkALgBEPwkAAAAL/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<string> Definition
        {
            get
            {
                return m_definition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_definition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_definition = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ValuePrecision
        {
            get
            {
                return m_valuePrecision;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valuePrecision, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valuePrecision = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_definition != null)
            {
                children.Add(m_definition);
            }

            if (m_valuePrecision != null)
            {
                children.Add(m_valuePrecision);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Definition:
                {
                    if (createOrReplace)
                    {
                        if (Definition == null)
                        {
                            if (replacement == null)
                            {
                                Definition = new PropertyState<string>(this);
                            }
                            else
                            {
                                Definition = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Definition;
                    break;
                }

                case Opc.Ua.BrowseNames.ValuePrecision:
                {
                    if (createOrReplace)
                    {
                        if (ValuePrecision == null)
                        {
                            if (replacement == null)
                            {
                                ValuePrecision = new PropertyState<double>(this);
                            }
                            else
                            {
                                ValuePrecision = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ValuePrecision;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<string> m_definition;
        private PropertyState<double> m_valuePrecision;
        #endregion
    }

    #region DataItemState<T> Class
    /// <summary>
    /// A typed version of the DataItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class DataItemState<T> : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public DataItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region AnalogItemState Class
    #if (!OPCUA_EXCLUDE_AnalogItemState)
    /// <summary>
    /// Stores an instance of the AnalogItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AnalogItemState : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AnalogItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.AnalogItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InstrumentRange != null)
            {
                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
            }

            if (EngineeringUnits != null)
            {
                EngineeringUnits.Initialize(context, EngineeringUnits_InitializationString);
            }
        }

        #region Initialization String
        private const string InstrumentRange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEAQgkALgBEQgkAAAEAdAP/////AQH/" +
           "////AAAAAA==";

        private const string EngineeringUnits_InitializationString =
           "//////////8VYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBAEMJAC4AREMJAAABAHcD/////wEB" +
           "/////wAAAAA=";

        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAFgAAAEFuYWxvZ0l0ZW1UeXBlSW5zdGFuY2UBAEAJAQBACQAaAQH/////" +
           "AwAAABVgiQoCAAAAAAAPAAAASW5zdHJ1bWVudFJhbmdlAQBCCQAuAERCCQAAAQB0A/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABFVVJhbmdlAQBBCQAuAERBCQAAAQB0A/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABAAAABFbmdpbmVlcmluZ1VuaXRzAQBDCQAuAERDCQAAAQB3A/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<Range> InstrumentRange
        {
            get
            {
                return m_instrumentRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_instrumentRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_instrumentRange = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eURange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eURange = value;
            }
        }

        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_instrumentRange != null)
            {
                children.Add(m_instrumentRange);
            }

            if (m_eURange != null)
            {
                children.Add(m_eURange);
            }

            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InstrumentRange:
                {
                    if (createOrReplace)
                    {
                        if (InstrumentRange == null)
                        {
                            if (replacement == null)
                            {
                                InstrumentRange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                InstrumentRange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = InstrumentRange;
                    break;
                }

                case Opc.Ua.BrowseNames.EURange:
                {
                    if (createOrReplace)
                    {
                        if (EURange == null)
                        {
                            if (replacement == null)
                            {
                                EURange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                EURange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = EURange;
                    break;
                }

                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<Range> m_instrumentRange;
        private PropertyState<Range> m_eURange;
        private PropertyState<EUInformation> m_engineeringUnits;
        #endregion
    }

    #region AnalogItemState<T> Class
    /// <summary>
    /// A typed version of the AnalogItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class AnalogItemState<T> : AnalogItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public AnalogItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region DiscreteItemState Class
    #if (!OPCUA_EXCLUDE_DiscreteItemState)
    /// <summary>
    /// Stores an instance of the DiscreteItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscreteItemState : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DiscreteItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.DiscreteItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAGAAAAERpc2NyZXRlSXRlbVR5cGVJbnN0YW5jZQEARAkBAEQJABgBAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region DiscreteItemState<T> Class
    /// <summary>
    /// A typed version of the DiscreteItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class DiscreteItemState<T> : DiscreteItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public DiscreteItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region TwoStateDiscreteState Class
    #if (!OPCUA_EXCLUDE_TwoStateDiscreteState)
    /// <summary>
    /// Stores an instance of the TwoStateDiscreteType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TwoStateDiscreteState : DiscreteItemState<bool>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TwoStateDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TwoStateDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Boolean, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAHAAAAFR3b1N0YXRlRGlzY3JldGVUeXBlSW5zdGFuY2UBAEUJAQBFCQAB" +
           "AQH/////AgAAABVgiQoCAAAAAAAKAAAARmFsc2VTdGF0ZQEARgkALgBERgkAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAFRydWVTdGF0ZQEARwkALgBERwkAAAAV/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> FalseState
        {
            get
            {
                return m_falseState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_falseState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_falseState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> TrueState
        {
            get
            {
                return m_trueState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trueState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trueState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_falseState != null)
            {
                children.Add(m_falseState);
            }

            if (m_trueState != null)
            {
                children.Add(m_trueState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.FalseState:
                {
                    if (createOrReplace)
                    {
                        if (FalseState == null)
                        {
                            if (replacement == null)
                            {
                                FalseState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                FalseState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = FalseState;
                    break;
                }

                case Opc.Ua.BrowseNames.TrueState:
                {
                    if (createOrReplace)
                    {
                        if (TrueState == null)
                        {
                            if (replacement == null)
                            {
                                TrueState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                TrueState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = TrueState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_falseState;
        private PropertyState<LocalizedText> m_trueState;
        #endregion
    }
    #endif
    #endregion

    #region MultiStateDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateDiscreteState)
    /// <summary>
    /// Stores an instance of the MultiStateDiscreteType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateDiscreteState : DiscreteItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MultiStateDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.UInteger, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAHgAAAE11bHRpU3RhdGVEaXNjcmV0ZVR5cGVJbnN0YW5jZQEASAkBAEgJ" +
           "ABwBAf////8BAAAAFWCJCgIAAAAAAAsAAABFbnVtU3RyaW5ncwEASQkALgBESQkAAAAVAQAAAAEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }

    #region MultiStateDiscreteState<T> Class
    /// <summary>
    /// A typed version of the MultiStateDiscreteType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateDiscreteState<T> : MultiStateDiscreteState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public MultiStateDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region MultiStateValueDiscreteState Class
    #if (!OPCUA_EXCLUDE_MultiStateValueDiscreteState)
    /// <summary>
    /// Stores an instance of the MultiStateValueDiscreteType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MultiStateValueDiscreteState : DiscreteItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MultiStateValueDiscreteState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.MultiStateValueDiscreteType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.Number, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAIwAAAE11bHRpU3RhdGVWYWx1ZURpc2NyZXRlVHlwZUluc3RhbmNlAQDm" +
           "KwEA5isAGgEB/////wIAAAAVYIkKAgAAAAAACgAAAEVudW1WYWx1ZXMBAOkrAC4AROkrAAABAKodAQAA" +
           "AAEB/////wAAAAAVYIkKAgAAAAAACwAAAFZhbHVlQXNUZXh0AQDFLAAuAETFLAAAABX/////AQH/////" +
           "AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<EnumValueType[]> EnumValues
        {
            get
            {
                return m_enumValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enumValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enumValues = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> ValueAsText
        {
            get
            {
                return m_valueAsText;
            }

            set
            {
                if (!Object.ReferenceEquals(m_valueAsText, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_valueAsText = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_enumValues != null)
            {
                children.Add(m_enumValues);
            }

            if (m_valueAsText != null)
            {
                children.Add(m_valueAsText);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EnumValues:
                {
                    if (createOrReplace)
                    {
                        if (EnumValues == null)
                        {
                            if (replacement == null)
                            {
                                EnumValues = new PropertyState<EnumValueType[]>(this);
                            }
                            else
                            {
                                EnumValues = (PropertyState<EnumValueType[]>)replacement;
                            }
                        }
                    }

                    instance = EnumValues;
                    break;
                }

                case Opc.Ua.BrowseNames.ValueAsText:
                {
                    if (createOrReplace)
                    {
                        if (ValueAsText == null)
                        {
                            if (replacement == null)
                            {
                                ValueAsText = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                ValueAsText = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ValueAsText;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<EnumValueType[]> m_enumValues;
        private PropertyState<LocalizedText> m_valueAsText;
        #endregion
    }

    #region MultiStateValueDiscreteState<T> Class
    /// <summary>
    /// A typed version of the MultiStateValueDiscreteType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class MultiStateValueDiscreteState<T> : MultiStateValueDiscreteState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public MultiStateValueDiscreteState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ArrayItemState Class
    #if (!OPCUA_EXCLUDE_ArrayItemState)
    /// <summary>
    /// Stores an instance of the ArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ArrayItemState : DataItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneOrMoreDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (InstrumentRange != null)
            {
                InstrumentRange.Initialize(context, InstrumentRange_InitializationString);
            }
        }

        #region Initialization String
        private const string InstrumentRange_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEluc3RydW1lbnRSYW5nZQEA+C4ALgBE+C4AAAEAdAP/////AQH/" +
           "////AAAAAA==";

        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAFQAAAEFycmF5SXRlbVR5cGVJbnN0YW5jZQEA9S4BAPUuABgAAAAAAQH/" +
           "////BQAAABVgiQoCAAAAAAAPAAAASW5zdHJ1bWVudFJhbmdlAQD4LgAuAET4LgAAAQB0A/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAcAAABFVVJhbmdlAQD5LgAuAET5LgAAAQB0A/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABAAAABFbmdpbmVlcmluZ1VuaXRzAQD6LgAuAET6LgAAAQB3A/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAUAAABUaXRsZQEA+y4ALgBE+y4AAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAEF4" +
           "aXNTY2FsZVR5cGUBAPwuAC4ARPwuAAABAC0v/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<Range> InstrumentRange
        {
            get
            {
                return m_instrumentRange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_instrumentRange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_instrumentRange = value;
            }
        }

        /// <remarks />
        public PropertyState<Range> EURange
        {
            get
            {
                return m_eURange;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eURange, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eURange = value;
            }
        }

        /// <remarks />
        public PropertyState<EUInformation> EngineeringUnits
        {
            get
            {
                return m_engineeringUnits;
            }

            set
            {
                if (!Object.ReferenceEquals(m_engineeringUnits, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_engineeringUnits = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Title
        {
            get
            {
                return m_title;
            }

            set
            {
                if (!Object.ReferenceEquals(m_title, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_title = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisScaleEnumeration> AxisScaleType
        {
            get
            {
                return m_axisScaleType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_axisScaleType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_axisScaleType = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_instrumentRange != null)
            {
                children.Add(m_instrumentRange);
            }

            if (m_eURange != null)
            {
                children.Add(m_eURange);
            }

            if (m_engineeringUnits != null)
            {
                children.Add(m_engineeringUnits);
            }

            if (m_title != null)
            {
                children.Add(m_title);
            }

            if (m_axisScaleType != null)
            {
                children.Add(m_axisScaleType);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.InstrumentRange:
                {
                    if (createOrReplace)
                    {
                        if (InstrumentRange == null)
                        {
                            if (replacement == null)
                            {
                                InstrumentRange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                InstrumentRange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = InstrumentRange;
                    break;
                }

                case Opc.Ua.BrowseNames.EURange:
                {
                    if (createOrReplace)
                    {
                        if (EURange == null)
                        {
                            if (replacement == null)
                            {
                                EURange = new PropertyState<Range>(this);
                            }
                            else
                            {
                                EURange = (PropertyState<Range>)replacement;
                            }
                        }
                    }

                    instance = EURange;
                    break;
                }

                case Opc.Ua.BrowseNames.EngineeringUnits:
                {
                    if (createOrReplace)
                    {
                        if (EngineeringUnits == null)
                        {
                            if (replacement == null)
                            {
                                EngineeringUnits = new PropertyState<EUInformation>(this);
                            }
                            else
                            {
                                EngineeringUnits = (PropertyState<EUInformation>)replacement;
                            }
                        }
                    }

                    instance = EngineeringUnits;
                    break;
                }

                case Opc.Ua.BrowseNames.Title:
                {
                    if (createOrReplace)
                    {
                        if (Title == null)
                        {
                            if (replacement == null)
                            {
                                Title = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Title = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Title;
                    break;
                }

                case Opc.Ua.BrowseNames.AxisScaleType:
                {
                    if (createOrReplace)
                    {
                        if (AxisScaleType == null)
                        {
                            if (replacement == null)
                            {
                                AxisScaleType = new PropertyState<AxisScaleEnumeration>(this);
                            }
                            else
                            {
                                AxisScaleType = (PropertyState<AxisScaleEnumeration>)replacement;
                            }
                        }
                    }

                    instance = AxisScaleType;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<Range> m_instrumentRange;
        private PropertyState<Range> m_eURange;
        private PropertyState<EUInformation> m_engineeringUnits;
        private PropertyState<LocalizedText> m_title;
        private PropertyState<AxisScaleEnumeration> m_axisScaleType;
        #endregion
    }

    #region ArrayItemState<T> Class
    /// <summary>
    /// A typed version of the ArrayItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ArrayItemState<T> : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region YArrayItemState Class
    #if (!OPCUA_EXCLUDE_YArrayItemState)
    /// <summary>
    /// Stores an instance of the YArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class YArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public YArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.YArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.TwoDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkAAgAAAAAAFgAAAFlBcnJheUl0ZW1UeXBlSW5zdGFuY2UBAP0uAQD9LgAYAQAAAAEA" +
           "AAAAAAAAAQH/////BQAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEAAS8ALgBEAS8AAAEAdAP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAAi8ALgBEAi8AAAEAdwP/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAFAAAAVGl0bGUBAAMvAC4ARAMvAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA0AAABBeGlzU2NhbGVUeXBlAQAELwAuAEQELwAAAQAtL/////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA8AAABYQXhpc0RlZmluaXRpb24BAAUvAC4ARAUvAAABAC8v/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        #endregion
    }

    #region YArrayItemState<T> Class
    /// <summary>
    /// A typed version of the YArrayItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class YArrayItemState<T> : YArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public YArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region XYArrayItemState Class
    #if (!OPCUA_EXCLUDE_XYArrayItemState)
    /// <summary>
    /// Stores an instance of the XYArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class XYArrayItemState : ArrayItemState<XVType[]>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public XYArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.XYArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.XVType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.TwoDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkAAgAAAAAAFwAAAFhZQXJyYXlJdGVtVHlwZUluc3RhbmNlAQAGLwEABi8BADAvAQAA" +
           "AAEAAAAAAAAAAQH/////BQAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEACi8ALgBECi8AAAEAdAP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEACy8ALgBECy8AAAEAdwP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAFAAAAVGl0bGUBAAwvAC4ARAwvAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABBeGlzU2NhbGVUeXBlAQANLwAuAEQNLwAAAQAtL/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABYQXhpc0RlZmluaXRpb24BAA4vAC4ARA4vAAABAC8v/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        #endregion
    }
    #endif
    #endregion

    #region ImageItemState Class
    #if (!OPCUA_EXCLUDE_ImageItemState)
    /// <summary>
    /// Stores an instance of the ImageItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ImageItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ImageItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ImageItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return 3;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkAAgAAAAAAFQAAAEltYWdlSXRlbVR5cGVJbnN0YW5jZQEADy8BAA8vABgCAAAAAgAA" +
           "AAAAAAAAAAAAAQH/////BgAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEAEy8ALgBEEy8AAAEAdAP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAFC8ALgBEFC8AAAEAdwP/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAFAAAAVGl0bGUBABUvAC4ARBUvAAAAFf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA0AAABBeGlzU2NhbGVUeXBlAQAWLwAuAEQWLwAAAQAtL/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABYQXhpc0RlZmluaXRpb24BABcvAC4ARBcvAAABAC8v/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADwAAAFlBeGlzRGVmaW5pdGlvbgEAGC8ALgBEGC8AAAEALy//////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> YAxisDefinition
        {
            get
            {
                return m_yAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_yAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_yAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            if (m_yAxisDefinition != null)
            {
                children.Add(m_yAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.YAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (YAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                YAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                YAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = YAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        private PropertyState<AxisInformation> m_yAxisDefinition;
        #endregion
    }

    #region ImageItemState<T> Class
    /// <summary>
    /// A typed version of the ImageItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ImageItemState<T> : ImageItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ImageItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region CubeItemState Class
    #if (!OPCUA_EXCLUDE_CubeItemState)
    /// <summary>
    /// Stores an instance of the CubeItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CubeItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CubeItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.CubeItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return 4;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8XYIkAAgAAAAAAFAAAAEN1YmVJdGVtVHlwZUluc3RhbmNlAQAZLwEAGS8AGAMAAAADAAAA" +
           "AAAAAAAAAAAAAAAAAQH/////BwAAABVgiQoCAAAAAAAHAAAARVVSYW5nZQEAHS8ALgBEHS8AAAEAdAP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAQAAAARW5naW5lZXJpbmdVbml0cwEAHi8ALgBEHi8AAAEAdwP/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAFAAAAVGl0bGUBAB8vAC4ARB8vAAAAFf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA0AAABBeGlzU2NhbGVUeXBlAQAgLwAuAEQgLwAAAQAtL/////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABYQXhpc0RlZmluaXRpb24BACEvAC4ARCEvAAABAC8v/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAFlBeGlzRGVmaW5pdGlvbgEAIi8ALgBEIi8AAAEALy//////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAWkF4aXNEZWZpbml0aW9uAQAjLwAuAEQjLwAAAQAvL/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation> XAxisDefinition
        {
            get
            {
                return m_xAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_xAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_xAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> YAxisDefinition
        {
            get
            {
                return m_yAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_yAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_yAxisDefinition = value;
            }
        }

        /// <remarks />
        public PropertyState<AxisInformation> ZAxisDefinition
        {
            get
            {
                return m_zAxisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_zAxisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_zAxisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_xAxisDefinition != null)
            {
                children.Add(m_xAxisDefinition);
            }

            if (m_yAxisDefinition != null)
            {
                children.Add(m_yAxisDefinition);
            }

            if (m_zAxisDefinition != null)
            {
                children.Add(m_zAxisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.XAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (XAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                XAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                XAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = XAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.YAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (YAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                YAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                YAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = YAxisDefinition;
                    break;
                }

                case Opc.Ua.BrowseNames.ZAxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (ZAxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                ZAxisDefinition = new PropertyState<AxisInformation>(this);
                            }
                            else
                            {
                                ZAxisDefinition = (PropertyState<AxisInformation>)replacement;
                            }
                        }
                    }

                    instance = ZAxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation> m_xAxisDefinition;
        private PropertyState<AxisInformation> m_yAxisDefinition;
        private PropertyState<AxisInformation> m_zAxisDefinition;
        #endregion
    }

    #region CubeItemState<T> Class
    /// <summary>
    /// A typed version of the CubeItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class CubeItemState<T> : CubeItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public CubeItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region NDimensionArrayItemState Class
    #if (!OPCUA_EXCLUDE_NDimensionArrayItemState)
    /// <summary>
    /// Stores an instance of the NDimensionArrayItemType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NDimensionArrayItemState : ArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NDimensionArrayItemState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.NDimensionArrayItemType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.OneOrMoreDimensions;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAHwAAAE5EaW1lbnNpb25BcnJheUl0ZW1UeXBlSW5zdGFuY2UBACQvAQAk" +
           "LwAYAAAAAAEB/////wUAAAAVYIkKAgAAAAAABwAAAEVVUmFuZ2UBACgvAC4ARCgvAAABAHQD/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAAEAAAAEVuZ2luZWVyaW5nVW5pdHMBACkvAC4ARCkvAAABAHcD/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAABQAAAFRpdGxlAQAqLwAuAEQqLwAAABX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAANAAAAQXhpc1NjYWxlVHlwZQEAKy8ALgBEKy8AAAEALS//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAAQXhpc0RlZmluaXRpb24BACwvAC4ARCwvAAABAC8vAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<AxisInformation[]> AxisDefinition
        {
            get
            {
                return m_axisDefinition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_axisDefinition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_axisDefinition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_axisDefinition != null)
            {
                children.Add(m_axisDefinition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AxisDefinition:
                {
                    if (createOrReplace)
                    {
                        if (AxisDefinition == null)
                        {
                            if (replacement == null)
                            {
                                AxisDefinition = new PropertyState<AxisInformation[]>(this);
                            }
                            else
                            {
                                AxisDefinition = (PropertyState<AxisInformation[]>)replacement;
                            }
                        }
                    }

                    instance = AxisDefinition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<AxisInformation[]> m_axisDefinition;
        #endregion
    }

    #region NDimensionArrayItemState<T> Class
    /// <summary>
    /// A typed version of the NDimensionArrayItemType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class NDimensionArrayItemState<T> : NDimensionArrayItemState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public NDimensionArrayItemState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region TwoStateVariableState Class
    #if (!OPCUA_EXCLUDE_TwoStateVariableState)
    /// <summary>
    /// Stores an instance of the TwoStateVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TwoStateVariableState : StateVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TwoStateVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.TwoStateVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.LocalizedText, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (TransitionTime != null)
            {
                TransitionTime.Initialize(context, TransitionTime_InitializationString);
            }

            if (EffectiveTransitionTime != null)
            {
                EffectiveTransitionTime.Initialize(context, EffectiveTransitionTime_InitializationString);
            }

            if (TrueState != null)
            {
                TrueState.Initialize(context, TrueState_InitializationString);
            }

            if (FalseState != null)
            {
                FalseState.Initialize(context, FalseState_InitializationString);
            }
        }

        #region Initialization String
        private const string TransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQAoIwAuAEQoIwAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string EffectiveTransitionTime_InitializationString =
           "//////////8VYIkKAgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQApIwAuAEQpIwAAAQAm" +
           "Af////8BAf////8AAAAA";

        private const string TrueState_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAFRydWVTdGF0ZQEAZisALgBEZisAAAAV/////wEB/////wAAAAA=";

        private const string FalseState_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAEZhbHNlU3RhdGUBAGcrAC4ARGcrAAAAFf////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAHAAAAFR3b1N0YXRlVmFyaWFibGVUeXBlSW5zdGFuY2UBACMjAQAjIwAV" +
           "/////wEB/////wUAAAAVYIkKAgAAAAAAAgAAAElkAQAkIwAuAEQkIwAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBACgjAC4ARCgjAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAFwAAAEVmZmVjdGl2ZVRyYW5zaXRpb25UaW1lAQApIwAuAEQpIwAAAQAmAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABUcnVlU3RhdGUBAGYrAC4ARGYrAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABGYWxzZVN0YXRlAQBnKwAuAERnKwAAABX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public new PropertyState<bool> Id
        {
            get { return (PropertyState<bool>)base.Id; }
            set { base.Id = value; }
        }

        /// <remarks />
        public PropertyState<DateTime> TransitionTime
        {
            get
            {
                return m_transitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EffectiveTransitionTime
        {
            get
            {
                return m_effectiveTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_effectiveTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_effectiveTransitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> TrueState
        {
            get
            {
                return m_trueState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trueState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trueState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> FalseState
        {
            get
            {
                return m_falseState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_falseState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_falseState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionTime != null)
            {
                children.Add(m_transitionTime);
            }

            if (m_effectiveTransitionTime != null)
            {
                children.Add(m_effectiveTransitionTime);
            }

            if (m_trueState != null)
            {
                children.Add(m_trueState);
            }

            if (m_falseState != null)
            {
                children.Add(m_falseState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Id:
                {
                    if (createOrReplace)
                    {
                        if (Id == null)
                        {
                            if (replacement == null)
                            {
                                Id = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Id = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Id;
                    break;
                }

                case Opc.Ua.BrowseNames.TransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (TransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                TransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                TransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = TransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EffectiveTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (EffectiveTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                EffectiveTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EffectiveTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EffectiveTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.TrueState:
                {
                    if (createOrReplace)
                    {
                        if (TrueState == null)
                        {
                            if (replacement == null)
                            {
                                TrueState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                TrueState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = TrueState;
                    break;
                }

                case Opc.Ua.BrowseNames.FalseState:
                {
                    if (createOrReplace)
                    {
                        if (FalseState == null)
                        {
                            if (replacement == null)
                            {
                                FalseState = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                FalseState = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = FalseState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_transitionTime;
        private PropertyState<DateTime> m_effectiveTransitionTime;
        private PropertyState<LocalizedText> m_trueState;
        private PropertyState<LocalizedText> m_falseState;
        #endregion
    }
    #endif
    #endregion

    #region ConditionVariableState Class
    #if (!OPCUA_EXCLUDE_ConditionVariableState)
    /// <summary>
    /// Stores an instance of the ConditionVariableType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionVariableState : BaseDataVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionVariableState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ConditionVariableType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.BaseDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIEAAgAAAAAAHQAAAENvbmRpdGlvblZhcmlhYmxlVHlwZUluc3RhbmNlAQAqIwEAKiMA" +
           "GAEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAKyMALgBEKyMAAAEAJgH/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> SourceTimestamp
        {
            get
            {
                return m_sourceTimestamp;
            }

            set
            {
                if (!Object.ReferenceEquals(m_sourceTimestamp, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_sourceTimestamp = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_sourceTimestamp != null)
            {
                children.Add(m_sourceTimestamp);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SourceTimestamp:
                {
                    if (createOrReplace)
                    {
                        if (SourceTimestamp == null)
                        {
                            if (replacement == null)
                            {
                                SourceTimestamp = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                SourceTimestamp = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = SourceTimestamp;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_sourceTimestamp;
        #endregion
    }

    #region ConditionVariableState<T> Class
    /// <summary>
    /// A typed version of the ConditionVariableType variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ConditionVariableState<T> : ConditionVariableState
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ConditionVariableState(NodeState parent) : base(parent)
        {
            Value = default(T);
        }

        /// <summary>
        /// Initializes the instance with the default values.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            base.Initialize(context);

            Value = default(T);
            DataType = TypeInfo.GetDataTypeId(typeof(T));
            ValueRank = TypeInfo.GetValueRank(typeof(T));
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The value of the variable.
        /// </summary>
        public new T Value
        {
            get
            {
                return CheckTypeBeforeCast<T>(base.Value, true);
            }

            set
            {
                base.Value = value;
            }
        }
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region ConditionState Class
    #if (!OPCUA_EXCLUDE_ConditionState)
    /// <summary>
    /// Stores an instance of the ConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionState : BaseEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFQAAAENvbmRpdGlvblR5cGVJbnN0YW5jZQEA3goBAN4K/////xYAAAAV" +
           "YIkKAgAAAAAABwAAAEV2ZW50SWQBABkPAC4ARBkPAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkA" +
           "AABFdmVudFR5cGUBABoPAC4ARBoPAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "b2RlAQAbDwAuAEQbDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQEAHA8A" +
           "LgBEHA8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAB0PAC4ARB0PAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAeDwAuAEQeDwAAAQAmAf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAB8PAC4ARB8PAAABANAi/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABwAAAE1lc3NhZ2UBACAPAC4ARCAPAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXZlcml0eQEAIQ8ALgBEIQ8AAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlv" +
           "bkNsYXNzSWQBAGgrAC4ARGgrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25D" +
           "bGFzc05hbWUBAGkrAC4ARGkrAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABDb25kaXRpb25O" +
           "YW1lAQAxIwAuAEQxIwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAQnJhbmNoSWQBADIjAC4A" +
           "RDIjAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BACIPAC4ARCIPAAAAAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBADMjAC8BACMjMyMAAAAV/////wEB////" +
           "/wQAAAAVYIkKAgAAAAAAAgAAAElkAQA0IwAuAEQ0IwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAU" +
           "AAAARWZmZWN0aXZlRGlzcGxheU5hbWUBADcjAC4ARDcjAAAAFf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA4AAABUcmFuc2l0aW9uVGltZQEAOCMALgBEOCMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAX" +
           "AAAARWZmZWN0aXZlVHJhbnNpdGlvblRpbWUBADkjAC4ARDkjAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABwAAAFF1YWxpdHkBADwjAC8BACojPCMAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAA" +
           "AFNvdXJjZVRpbWVzdGFtcAEAPSMALgBEPSMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAA" +
           "TGFzdFNldmVyaXR5AQA+IwAvAQAqIz4jAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAD8jAC4ARD8jAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1l" +
           "bnQBAEAjAC8BACojQCMAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFt" +
           "cAEAQSMALgBEQSMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQBC" +
           "IwAuAERCIwAAAAz/////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEARCMALwEARCNEIwAA" +
           "AQEBAAAAAQD5CwABAPMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAQBDIwAvAQBDI0MjAAABAQEAAAAB" +
           "APkLAAEA8woAAAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AQBFIwAvAQBFI0UjAAABAQEAAAABAPkL" +
           "AAEADQsBAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEARiMALgBERiMAAJYCAAAAAQAqAQFG" +
           "AAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVu" +
           "dCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21t" +
           "ZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> ConditionClassId
        {
            get
            {
                return m_conditionClassId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionClassId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionClassId = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> ConditionClassName
        {
            get
            {
                return m_conditionClassName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionClassName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionClassName = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ConditionName
        {
            get
            {
                return m_conditionName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_conditionName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_conditionName = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> BranchId
        {
            get
            {
                return m_branchId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_branchId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_branchId = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Retain
        {
            get
            {
                return m_retain;
            }

            set
            {
                if (!Object.ReferenceEquals(m_retain, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_retain = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState EnabledState
        {
            get
            {
                return m_enabledState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enabledState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enabledState = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<StatusCode> Quality
        {
            get
            {
                return m_quality;
            }

            set
            {
                if (!Object.ReferenceEquals(m_quality, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_quality = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<ushort> LastSeverity
        {
            get
            {
                return m_lastSeverity;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastSeverity, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastSeverity = value;
            }
        }

        /// <remarks />
        public ConditionVariableState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }

        /// <remarks />
        public PropertyState<string> ClientUserId
        {
            get
            {
                return m_clientUserId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_clientUserId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_clientUserId = value;
            }
        }

        /// <remarks />
        public MethodState Disable
        {
            get
            {
                return m_disableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_disableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_disableMethod = value;
            }
        }

        /// <remarks />
        public MethodState Enable
        {
            get
            {
                return m_enableMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_enableMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_enableMethod = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState AddComment
        {
            get
            {
                return m_addCommentMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addCommentMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addCommentMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_conditionClassId != null)
            {
                children.Add(m_conditionClassId);
            }

            if (m_conditionClassName != null)
            {
                children.Add(m_conditionClassName);
            }

            if (m_conditionName != null)
            {
                children.Add(m_conditionName);
            }

            if (m_branchId != null)
            {
                children.Add(m_branchId);
            }

            if (m_retain != null)
            {
                children.Add(m_retain);
            }

            if (m_enabledState != null)
            {
                children.Add(m_enabledState);
            }

            if (m_quality != null)
            {
                children.Add(m_quality);
            }

            if (m_lastSeverity != null)
            {
                children.Add(m_lastSeverity);
            }

            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            if (m_clientUserId != null)
            {
                children.Add(m_clientUserId);
            }

            if (m_disableMethod != null)
            {
                children.Add(m_disableMethod);
            }

            if (m_enableMethod != null)
            {
                children.Add(m_enableMethod);
            }

            if (m_addCommentMethod != null)
            {
                children.Add(m_addCommentMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ConditionClassId:
                {
                    if (createOrReplace)
                    {
                        if (ConditionClassId == null)
                        {
                            if (replacement == null)
                            {
                                ConditionClassId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                ConditionClassId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = ConditionClassId;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionClassName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionClassName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionClassName = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                ConditionClassName = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = ConditionClassName;
                    break;
                }

                case Opc.Ua.BrowseNames.ConditionName:
                {
                    if (createOrReplace)
                    {
                        if (ConditionName == null)
                        {
                            if (replacement == null)
                            {
                                ConditionName = new PropertyState<string>(this);
                            }
                            else
                            {
                                ConditionName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ConditionName;
                    break;
                }

                case Opc.Ua.BrowseNames.BranchId:
                {
                    if (createOrReplace)
                    {
                        if (BranchId == null)
                        {
                            if (replacement == null)
                            {
                                BranchId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                BranchId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = BranchId;
                    break;
                }

                case Opc.Ua.BrowseNames.Retain:
                {
                    if (createOrReplace)
                    {
                        if (Retain == null)
                        {
                            if (replacement == null)
                            {
                                Retain = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Retain = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Retain;
                    break;
                }

                case Opc.Ua.BrowseNames.EnabledState:
                {
                    if (createOrReplace)
                    {
                        if (EnabledState == null)
                        {
                            if (replacement == null)
                            {
                                EnabledState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                EnabledState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = EnabledState;
                    break;
                }

                case Opc.Ua.BrowseNames.Quality:
                {
                    if (createOrReplace)
                    {
                        if (Quality == null)
                        {
                            if (replacement == null)
                            {
                                Quality = new ConditionVariableState<StatusCode>(this);
                            }
                            else
                            {
                                Quality = (ConditionVariableState<StatusCode>)replacement;
                            }
                        }
                    }

                    instance = Quality;
                    break;
                }

                case Opc.Ua.BrowseNames.LastSeverity:
                {
                    if (createOrReplace)
                    {
                        if (LastSeverity == null)
                        {
                            if (replacement == null)
                            {
                                LastSeverity = new ConditionVariableState<ushort>(this);
                            }
                            else
                            {
                                LastSeverity = (ConditionVariableState<ushort>)replacement;
                            }
                        }
                    }

                    instance = LastSeverity;
                    break;
                }

                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new ConditionVariableState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (ConditionVariableState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }

                case Opc.Ua.BrowseNames.ClientUserId:
                {
                    if (createOrReplace)
                    {
                        if (ClientUserId == null)
                        {
                            if (replacement == null)
                            {
                                ClientUserId = new PropertyState<string>(this);
                            }
                            else
                            {
                                ClientUserId = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = ClientUserId;
                    break;
                }

                case Opc.Ua.BrowseNames.Disable:
                {
                    if (createOrReplace)
                    {
                        if (Disable == null)
                        {
                            if (replacement == null)
                            {
                                Disable = new MethodState(this);
                            }
                            else
                            {
                                Disable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Disable;
                    break;
                }

                case Opc.Ua.BrowseNames.Enable:
                {
                    if (createOrReplace)
                    {
                        if (Enable == null)
                        {
                            if (replacement == null)
                            {
                                Enable = new MethodState(this);
                            }
                            else
                            {
                                Enable = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Enable;
                    break;
                }

                case Opc.Ua.BrowseNames.AddComment:
                {
                    if (createOrReplace)
                    {
                        if (AddComment == null)
                        {
                            if (replacement == null)
                            {
                                AddComment = new AddCommentMethodState(this);
                            }
                            else
                            {
                                AddComment = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = AddComment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_conditionClassId;
        private PropertyState<LocalizedText> m_conditionClassName;
        private PropertyState<string> m_conditionName;
        private PropertyState<NodeId> m_branchId;
        private PropertyState<bool> m_retain;
        private TwoStateVariableState m_enabledState;
        private ConditionVariableState<StatusCode> m_quality;
        private ConditionVariableState<ushort> m_lastSeverity;
        private ConditionVariableState<LocalizedText> m_comment;
        private PropertyState<string> m_clientUserId;
        private MethodState m_disableMethod;
        private MethodState m_enableMethod;
        private AddCommentMethodState m_addCommentMethod;
        #endregion
    }
    #endif
    #endregion

    #region ConditionRefresh2MethodState Class
    #if (!OPCUA_EXCLUDE_ConditionRefresh2MethodState)
    /// <summary>
    /// Stores an instance of the ConditionRefresh2MethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionRefresh2MethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionRefresh2MethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ConditionRefresh2MethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAENvbmRpdGlvblJlZnJlc2gyTWV0aG9kVHlwZQEAcjIALwEAcjJy" +
           "MgAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAHMyAC4ARHMyAACWAgAAAAEA" +
           "KgEBVQAAAA4AAABTdWJzY3JpcHRpb25JZAEAIAH/////AAAAAAMAAAAALgAAAFRoZSBpZGVudGlmaWVy" +
           "IGZvciB0aGUgc3VzY3JpcHRpb24gdG8gcmVmcmVzaC4BACoBAVkAAAAPAAAATW9uaXRvcmVkSXRlbUlk" +
           "AQAgAf////8AAAAAAwAAAAAxAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBtb25pdG9yZWQgaXRlbSB0" +
           "byByZWZyZXNoLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ConditionRefresh2MethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];
            uint monitoredItemId = (uint)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId,
                    monitoredItemId);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ConditionRefresh2MethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint subscriptionId,
        uint monitoredItemId);
    #endif
    #endregion

    #region ConditionRefreshMethodState Class
    #if (!OPCUA_EXCLUDE_ConditionRefreshMethodState)
    /// <summary>
    /// Stores an instance of the ConditionRefreshMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ConditionRefreshMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ConditionRefreshMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new ConditionRefreshMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGgAAAENvbmRpdGlvblJlZnJlc2hNZXRob2RUeXBlAQAvIwAvAQAvIy8j" +
           "AAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMCMALgBEMCMAAJYBAAAAAQAq" +
           "AQFVAAAADgAAAFN1YnNjcmlwdGlvbklkAQAgAf////8AAAAAAwAAAAAuAAAAVGhlIGlkZW50aWZpZXIg" +
           "Zm9yIHRoZSBzdXNjcmlwdGlvbiB0byByZWZyZXNoLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public ConditionRefreshMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint subscriptionId = (uint)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    subscriptionId);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult ConditionRefreshMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint subscriptionId);
    #endif
    #endregion

    #region AddCommentMethodState Class
    #if (!OPCUA_EXCLUDE_AddCommentMethodState)
    /// <summary>
    /// Stores an instance of the AddCommentMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddCommentMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AddCommentMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new AddCommentMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFAAAAEFkZENvbW1lbnRNZXRob2RUeXBlAQAXDwAvAQAXDxcPAAABAf//" +
           "//8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAGA8ALgBEGA8AAJYCAAAAAQAqAQFGAAAA" +
           "BwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0" +
           "byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50" +
           "IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public AddCommentMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte[] eventId = (byte[])_inputArguments[0];
            LocalizedText comment = (LocalizedText)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    eventId,
                    comment);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult AddCommentMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        byte[] eventId,
        LocalizedText comment);
    #endif
    #endregion

    #region DialogConditionState Class
    #if (!OPCUA_EXCLUDE_DialogConditionState)
    /// <summary>
    /// Stores an instance of the DialogConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogConditionState : ConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DialogConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DialogConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGwAAAERpYWxvZ0NvbmRpdGlvblR5cGVJbnN0YW5jZQEADgsBAA4L////" +
           "/x4AAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAFwQAC4ARFwQAAAAD/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAkAAABFdmVudFR5cGUBAF0QAC4ARF0QAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOb2RlAQBeEAAuAEReEAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFt" +
           "ZQEAXxAALgBEXxAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAGAQAC4ARGAQAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBhEAAuAERhEAAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAGIQAC4ARGIQAAABANAi/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAGMQAC4ARGMQAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABTZXZlcml0eQEAZBAALgBEZBAAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENv" +
           "bmRpdGlvbkNsYXNzSWQBAGorAC4ARGorAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25k" +
           "aXRpb25DbGFzc05hbWUBAGsrAC4ARGsrAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABDb25k" +
           "aXRpb25OYW1lAQBJIwAuAERJIwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAQnJhbmNoSWQB" +
           "AEojAC4AREojAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BAGUQAC4ARGUQAAAA" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAEsjAC8BACMjSyMAAAAV////" +
           "/wEBAQAAAAEALCMAAQBfIwEAAAAVYIkKAgAAAAAAAgAAAElkAQBMIwAuAERMIwAAAAH/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQEAVCMALwEAKiNUIwAAABP/////AQH/////AQAAABVgiQoC" +
           "AAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQBVIwAuAERVIwAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAwAAABMYXN0U2V2ZXJpdHkBAFYjAC8BACojViMAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAA" +
           "DwAAAFNvdXJjZVRpbWVzdGFtcAEAVyMALgBEVyMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAH" +
           "AAAAQ29tbWVudAEAWCMALwEAKiNYIwAAABX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNl" +
           "VGltZXN0YW1wAQBZIwAuAERZIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRV" +
           "c2VySWQBAFojAC4ARFojAAAADP////8BAf////8AAAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQBcIwAv" +
           "AQBEI1wjAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABFbmFibGUBAFsjAC8BAEMjWyMA" +
           "AAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1lbnQBAF0jAC8BAEUjXSMAAAEB" +
           "AQAAAAEA+QsAAQANCwEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBeIwAuAEReIwAAlgIA" +
           "AAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3Ig" +
           "dGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAA" +
           "VGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8AAAAAFWCJCgIA" +
           "AAAAAAsAAABEaWFsb2dTdGF0ZQEAXyMALwEAIyNfIwAAABX/////AQEBAAAAAQAsIwEBAEsjAgAAABVg" +
           "iQoCAAAAAAACAAAASWQBAGAjAC4ARGAjAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABUcmFu" +
           "c2l0aW9uVGltZQEAZCMALgBEZCMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUHJvbXB0" +
           "AQAPCwAuAEQPCwAAABX/////AQH/////AAAAABVgiQoCAAAAAAARAAAAUmVzcG9uc2VPcHRpb25TZXQB" +
           "AGgjAC4ARGgjAAAAFQEAAAABAf////8AAAAAFWCJCgIAAAAAAA8AAABEZWZhdWx0UmVzcG9uc2UBAGkj" +
           "AC4ARGkjAAAABv////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABPa1Jlc3BvbnNlAQBqIwAuAERqIwAA" +
           "AAb/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAQ2FuY2VsUmVzcG9uc2UBAGsjAC4ARGsjAAAABv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0UmVzcG9uc2UBAGwjAC4ARGwjAAAABv////8BAf//" +
           "//8AAAAABGGCCgQAAAAAAAcAAABSZXNwb25kAQBtIwAvAQBtI20jAAABAQEAAAABAPkLAAEA3yIBAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbiMALgBEbiMAAJYBAAAAAQAqAQFMAAAAEAAAAFNl" +
           "bGVjdGVkUmVzcG9uc2UABv////8AAAAAAwAAAAAlAAAAVGhlIHJlc3BvbnNlIHRvIHRoZSBkaWFsb2cg" +
           "Y29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState DialogState
        {
            get
            {
                return m_dialogState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_dialogState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_dialogState = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText> Prompt
        {
            get
            {
                return m_prompt;
            }

            set
            {
                if (!Object.ReferenceEquals(m_prompt, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_prompt = value;
            }
        }

        /// <remarks />
        public PropertyState<LocalizedText[]> ResponseOptionSet
        {
            get
            {
                return m_responseOptionSet;
            }

            set
            {
                if (!Object.ReferenceEquals(m_responseOptionSet, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_responseOptionSet = value;
            }
        }

        /// <remarks />
        public PropertyState<int> DefaultResponse
        {
            get
            {
                return m_defaultResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> OkResponse
        {
            get
            {
                return m_okResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_okResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_okResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> CancelResponse
        {
            get
            {
                return m_cancelResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_cancelResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_cancelResponse = value;
            }
        }

        /// <remarks />
        public PropertyState<int> LastResponse
        {
            get
            {
                return m_lastResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastResponse = value;
            }
        }

        /// <remarks />
        public DialogResponseMethodState Respond
        {
            get
            {
                return m_respondMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_respondMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_respondMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_dialogState != null)
            {
                children.Add(m_dialogState);
            }

            if (m_prompt != null)
            {
                children.Add(m_prompt);
            }

            if (m_responseOptionSet != null)
            {
                children.Add(m_responseOptionSet);
            }

            if (m_defaultResponse != null)
            {
                children.Add(m_defaultResponse);
            }

            if (m_okResponse != null)
            {
                children.Add(m_okResponse);
            }

            if (m_cancelResponse != null)
            {
                children.Add(m_cancelResponse);
            }

            if (m_lastResponse != null)
            {
                children.Add(m_lastResponse);
            }

            if (m_respondMethod != null)
            {
                children.Add(m_respondMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DialogState:
                {
                    if (createOrReplace)
                    {
                        if (DialogState == null)
                        {
                            if (replacement == null)
                            {
                                DialogState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                DialogState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = DialogState;
                    break;
                }

                case Opc.Ua.BrowseNames.Prompt:
                {
                    if (createOrReplace)
                    {
                        if (Prompt == null)
                        {
                            if (replacement == null)
                            {
                                Prompt = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Prompt = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Prompt;
                    break;
                }

                case Opc.Ua.BrowseNames.ResponseOptionSet:
                {
                    if (createOrReplace)
                    {
                        if (ResponseOptionSet == null)
                        {
                            if (replacement == null)
                            {
                                ResponseOptionSet = new PropertyState<LocalizedText[]>(this);
                            }
                            else
                            {
                                ResponseOptionSet = (PropertyState<LocalizedText[]>)replacement;
                            }
                        }
                    }

                    instance = ResponseOptionSet;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultResponse:
                {
                    if (createOrReplace)
                    {
                        if (DefaultResponse == null)
                        {
                            if (replacement == null)
                            {
                                DefaultResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                DefaultResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = DefaultResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.OkResponse:
                {
                    if (createOrReplace)
                    {
                        if (OkResponse == null)
                        {
                            if (replacement == null)
                            {
                                OkResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                OkResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = OkResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.CancelResponse:
                {
                    if (createOrReplace)
                    {
                        if (CancelResponse == null)
                        {
                            if (replacement == null)
                            {
                                CancelResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                CancelResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = CancelResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.LastResponse:
                {
                    if (createOrReplace)
                    {
                        if (LastResponse == null)
                        {
                            if (replacement == null)
                            {
                                LastResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                LastResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = LastResponse;
                    break;
                }

                case Opc.Ua.BrowseNames.Respond:
                {
                    if (createOrReplace)
                    {
                        if (Respond == null)
                        {
                            if (replacement == null)
                            {
                                Respond = new DialogResponseMethodState(this);
                            }
                            else
                            {
                                Respond = (DialogResponseMethodState)replacement;
                            }
                        }
                    }

                    instance = Respond;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_dialogState;
        private PropertyState<LocalizedText> m_prompt;
        private PropertyState<LocalizedText[]> m_responseOptionSet;
        private PropertyState<int> m_defaultResponse;
        private PropertyState<int> m_okResponse;
        private PropertyState<int> m_cancelResponse;
        private PropertyState<int> m_lastResponse;
        private DialogResponseMethodState m_respondMethod;
        #endregion
    }
    #endif
    #endregion

    #region DialogResponseMethodState Class
    #if (!OPCUA_EXCLUDE_DialogResponseMethodState)
    /// <summary>
    /// Stores an instance of the DialogResponseMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DialogResponseMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DialogResponseMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new DialogResponseMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAERpYWxvZ1Jlc3BvbnNlTWV0aG9kVHlwZQEARyMALwEARyNHIwAA" +
           "AQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEgjAC4AREgjAACWAQAAAAEAKgEB" +
           "TAAAABAAAABTZWxlY3RlZFJlc3BvbnNlAAb/////AAAAAAMAAAAAJQAAAFRoZSByZXNwb25zZSB0byB0" +
           "aGUgZGlhbG9nIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public DialogResponseMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            int selectedResponse = (int)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    selectedResponse);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult DialogResponseMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        int selectedResponse);
    #endif
    #endregion

    #region AcknowledgeableConditionState Class
    #if (!OPCUA_EXCLUDE_AcknowledgeableConditionState)
    /// <summary>
    /// Stores an instance of the AcknowledgeableConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AcknowledgeableConditionState : ConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AcknowledgeableConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AcknowledgeableConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ConfirmedState != null)
            {
                ConfirmedState.Initialize(context, ConfirmedState_InitializationString);
            }

            if (Confirm != null)
            {
                Confirm.Initialize(context, Confirm_InitializationString);
            }
        }

        #region Initialization String
        private const string ConfirmedState_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAENvbmZpcm1lZFN0YXRlAQCOIwAvAQAjI44jAAAAFf////8BAQEA" +
           "AAABACwjAQEAcSMCAAAAFWCJCgIAAAAAAAIAAABJZAEAjyMALgBEjyMAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQCTIwAuAESTIwAAAQAmAf////8BAf////8AAAAA";

        private const string Confirm_InitializationString =
           "//////////8EYYIKBAAAAAAABwAAAENvbmZpcm0BAJkjAC8BAJkjmSMAAAEBAQAAAAEA+QsAAQABIwEA" +
           "AAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCaIwAuAESaIwAAlgIAAAABACoBAUYAAAAHAAAA" +
           "RXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNv" +
           "bW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8g" +
           "YWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJAAAAEFja25vd2xlZGdlYWJsZUNvbmRpdGlvblR5cGVJbnN0YW5jZQEA" +
           "QQsBAEEL/////xoAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAPkTAC4ARPkTAAAAD/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAPoTAC4ARPoTAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOb2RlAQD7EwAuAET7EwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAA" +
           "U291cmNlTmFtZQEA/BMALgBE/BMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAP0T" +
           "AC4ARP0TAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQD+EwAuAET+" +
           "EwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAP8TAC4ARP8TAAABANAi" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAAAUAC4ARAAUAAAAFf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAARQALgBEARQAAAAF/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEAAAAENvbmRpdGlvbkNsYXNzSWQBAGwrAC4ARGwrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABIAAABDb25kaXRpb25DbGFzc05hbWUBAG0rAC4ARG0rAAAAFf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AA0AAABDb25kaXRpb25OYW1lAQBvIwAuAERvIwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "QnJhbmNoSWQBAHAjAC4ARHAjAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BAAIU" +
           "AC4ARAIUAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAHEjAC8BACMj" +
           "cSMAAAAV/////wEBAgAAAAEALCMAAQCFIwEALCMAAQCOIwEAAAAVYIkKAgAAAAAAAgAAAElkAQByIwAu" +
           "AERyIwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQEAeiMALwEAKiN6IwAAABP/" +
           "////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQB7IwAuAER7IwAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkBAHwjAC8BACojfCMAAAAF/////wEB" +
           "/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAfSMALgBEfSMAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEAfiMALwEAKiN+IwAAABX/////AQH/////AQAAABVg" +
           "iQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQB/IwAuAER/IwAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAwAAABDbGllbnRVc2VySWQBAIAjAC4ARIAjAAAADP////8BAf////8AAAAABGGCCgQAAAAA" +
           "AAcAAABEaXNhYmxlAQCCIwAvAQBEI4IjAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAAAAYAAABF" +
           "bmFibGUBAIEjAC8BAEMjgSMAAAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAACgAAAEFkZENvbW1l" +
           "bnQBAIMjAC8BAEUjgyMAAAEBAQAAAAEA+QsAAQANCwEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQCEIwAuAESEIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABU" +
           "aGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQA" +
           "Ff////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEA" +
           "AAABAf////8AAAAAFWCJCgIAAAAAAAoAAABBY2tlZFN0YXRlAQCFIwAvAQAjI4UjAAAAFf////8BAQEA" +
           "AAABACwjAQEAcSMCAAAAFWCJCgIAAAAAAAIAAABJZAEAhiMALgBEhiMAAAAB/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQCKIwAuAESKIwAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA4AAABDb25maXJtZWRTdGF0ZQEAjiMALwEAIyOOIwAAABX/////AQEBAAAAAQAsIwEBAHEj" +
           "AgAAABVgiQoCAAAAAAACAAAASWQBAI8jAC4ARI8jAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4A" +
           "AABUcmFuc2l0aW9uVGltZQEAkyMALgBEkyMAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAALAAAA" +
           "QWNrbm93bGVkZ2UBAJcjAC8BAJcjlyMAAAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAQCYIwAuAESYIwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAAD" +
           "AAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAA" +
           "AENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRp" +
           "b24uAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAcAAABDb25maXJtAQCZIwAvAQCZI5kjAAABAQEA" +
           "AAABAPkLAAEAASMBAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAmiMALgBEmiMAAJYCAAAA" +
           "AQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRo" +
           "ZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRo" +
           "ZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState AckedState
        {
            get
            {
                return m_ackedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_ackedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_ackedState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState ConfirmedState
        {
            get
            {
                return m_confirmedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_confirmedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_confirmedState = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState Acknowledge
        {
            get
            {
                return m_acknowledgeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_acknowledgeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_acknowledgeMethod = value;
            }
        }

        /// <remarks />
        public AddCommentMethodState Confirm
        {
            get
            {
                return m_confirmMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_confirmMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_confirmMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_ackedState != null)
            {
                children.Add(m_ackedState);
            }

            if (m_confirmedState != null)
            {
                children.Add(m_confirmedState);
            }

            if (m_acknowledgeMethod != null)
            {
                children.Add(m_acknowledgeMethod);
            }

            if (m_confirmMethod != null)
            {
                children.Add(m_confirmMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AckedState:
                {
                    if (createOrReplace)
                    {
                        if (AckedState == null)
                        {
                            if (replacement == null)
                            {
                                AckedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                AckedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = AckedState;
                    break;
                }

                case Opc.Ua.BrowseNames.ConfirmedState:
                {
                    if (createOrReplace)
                    {
                        if (ConfirmedState == null)
                        {
                            if (replacement == null)
                            {
                                ConfirmedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                ConfirmedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = ConfirmedState;
                    break;
                }

                case Opc.Ua.BrowseNames.Acknowledge:
                {
                    if (createOrReplace)
                    {
                        if (Acknowledge == null)
                        {
                            if (replacement == null)
                            {
                                Acknowledge = new AddCommentMethodState(this);
                            }
                            else
                            {
                                Acknowledge = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Acknowledge;
                    break;
                }

                case Opc.Ua.BrowseNames.Confirm:
                {
                    if (createOrReplace)
                    {
                        if (Confirm == null)
                        {
                            if (replacement == null)
                            {
                                Confirm = new AddCommentMethodState(this);
                            }
                            else
                            {
                                Confirm = (AddCommentMethodState)replacement;
                            }
                        }
                    }

                    instance = Confirm;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_ackedState;
        private TwoStateVariableState m_confirmedState;
        private AddCommentMethodState m_acknowledgeMethod;
        private AddCommentMethodState m_confirmMethod;
        #endregion
    }
    #endif
    #endregion

    #region AlarmConditionState Class
    #if (!OPCUA_EXCLUDE_AlarmConditionState)
    /// <summary>
    /// Stores an instance of the AlarmConditionType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AlarmConditionState : AcknowledgeableConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AlarmConditionState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AlarmConditionType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (SuppressedState != null)
            {
                SuppressedState.Initialize(context, SuppressedState_InitializationString);
            }

            if (ShelvingState != null)
            {
                ShelvingState.Initialize(context, ShelvingState_InitializationString);
            }

            if (MaxTimeShelved != null)
            {
                MaxTimeShelved.Initialize(context, MaxTimeShelved_InitializationString);
            }
        }

        #region Initialization String
        private const string SuppressedState_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAFN1cHByZXNzZWRTdGF0ZQEA0SMALwEAIyPRIwAAABX/////AQEB" +
           "AAAAAQAsIwEBAJ4jAgAAABVgiQoCAAAAAAACAAAASWQBANIjAC4ARNIjAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEA1iMALgBE1iMAAAEAJgH/////AQH/////AAAAAA==";

        private const string ShelvingState_InitializationString =
           "//////////8EYIAKAQAAAAAADQAAAFNoZWx2aW5nU3RhdGUBANojAC8BAHEL2iMAAAEAAAABACwjAQEA" +
           "niMGAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBANsjAC8BAMgK2yMAAAAV/////wEB/////wEA" +
           "AAAVYIkKAgAAAAAAAgAAAElkAQDcIwAuAETcIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAA" +
           "TGFzdFRyYW5zaXRpb24BAOAjAC8BAM8K4CMAAAAV/////wEB/////wIAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQDhIwAuAEThIwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAOQj" +
           "AC4AROQjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVuc2hlbHZlVGltZQEA5SMALgBE" +
           "5SMAAAEAIgH/////AQH/////AAAAAARhggoEAAAAAAAIAAAAVW5zaGVsdmUBAPsjAC8BAIML+yMAAAEB" +
           "AQAAAAEA+QsAAQBVKwAAAAAEYYIKBAAAAAAADQAAAE9uZVNob3RTaGVsdmUBAPwjAC8BAIQL/CMAAAEB" +
           "AQAAAAEA+QsAAQBVKwAAAAAEYYIKBAAAAAAACwAAAFRpbWVkU2hlbHZlAQD9IwAvAQCFC/0jAAABAQEA" +
           "AAABAPkLAAEAVSsBAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA/iMALgBE/iMAAJYBAAAA" +
           "AQAqAQF6AAAADAAAAFNoZWx2aW5nVGltZQEAIgH/////AAAAAAMAAAAAVQAAAElmIG5vdCAwLCB0aGlz" +
           "IHBhcmFtZXRlciBzcGVjaWZpZXMgYSBmaXhlZCB0aW1lIGZvciB3aGljaCB0aGUgQWxhcm0gaXMgdG8g" +
           "YmUgc2hlbHZlZC4BACgBAQAAAAEB/////wAAAAA=";

        private const string MaxTimeShelved_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAE1heFRpbWVTaGVsdmVkAQAAJAAuAEQAJAAAAQAiAf////8BAf//" +
           "//8AAAAA";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGgAAAEFsYXJtQ29uZGl0aW9uVHlwZUluc3RhbmNlAQBjCwEAYwv/////" +
           "HgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEApBUALgBEpBUAAAAP/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEV2ZW50VHlwZQEApRUALgBEpRUAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5vZGUBAKYVAC4ARKYVAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1l" +
           "AQCnFQAuAESnFQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAqBUALgBEqBUAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAKkVAC4ARKkVAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAqhUALgBEqhUAAAEA0CL/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAqxUALgBEqxUAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFNldmVyaXR5AQCsFQAuAESsFQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29u" +
           "ZGl0aW9uQ2xhc3NJZAEAbisALgBEbisAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRp" +
           "dGlvbkNsYXNzTmFtZQEAbysALgBEbysAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAENvbmRp" +
           "dGlvbk5hbWUBAJwjAC4ARJwjAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFuY2hJZAEA" +
           "nSMALgBEnSMAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEArRUALgBErRUAAAAB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAniMALwEAIyOeIwAAABX/////" +
           "AQEFAAAAAQAsIwABALIjAQAsIwABALsjAQAsIwABAMgjAQAsIwABANEjAQAsIwABANojAQAAABVgiQoC" +
           "AAAAAAACAAAASWQBAJ8jAC4ARJ8jAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5" +
           "AQCnIwAvAQAqI6cjAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXAB" +
           "AKgjAC4ARKgjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQEAqSMA" +
           "LwEAKiOpIwAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQCqIwAu" +
           "AESqIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQCrIwAvAQAqI6sjAAAA" +
           "Ff////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAKwjAC4ARKwjAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEArSMALgBErSMAAAAM/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAK8jAC8BAEQjryMAAAEBAQAAAAEA+QsAAQDzCgAA" +
           "AAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAriMALwEAQyOuIwAAAQEBAAAAAQD5CwABAPMKAAAAAARhggoE" +
           "AAAAAAAKAAAAQWRkQ29tbWVudAEAsCMALwEARSOwIwAAAQEBAAAAAQD5CwABAA0LAQAAABVgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBALEjAC4ARLEjAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//" +
           "////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoB" +
           "AUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhl" +
           "IGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUBALIjAC8B" +
           "ACMjsiMAAAAV/////wEBAQAAAAEALCMBAQCeIwEAAAAVYIkKAgAAAAAAAgAAAElkAQCzIwAuAESzIwAA" +
           "AAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAMQjAC8BAJcjxCMAAAEBAQAA" +
           "AAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDFIwAuAETFIwAAlgIAAAAB" +
           "ACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhl" +
           "IGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhl" +
           "IGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABBY3RpdmVTdGF0ZQEAyCMALwEAIyPIIwAAABX/////AQEBAAAAAQAsIwEBAJ4jBAAAABVgiQoC" +
           "AAAAAAACAAAASWQBAMkjAC4ARMkjAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAABQAAABFZmZlY3Rp" +
           "dmVEaXNwbGF5TmFtZQEAzCMALgBEzCMAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5z" +
           "aXRpb25UaW1lAQDNIwAuAETNIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAABcAAABFZmZlY3Rp" +
           "dmVUcmFuc2l0aW9uVGltZQEAziMALgBEziMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAA" +
           "SW5wdXROb2RlAQBwKwAuAERwKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAU3VwcHJlc3Nl" +
           "ZFN0YXRlAQDRIwAvAQAjI9EjAAAAFf////8BAQEAAAABACwjAQEAniMCAAAAFWCJCgIAAAAAAAIAAABJ" +
           "ZAEA0iMALgBE0iMAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQDW" +
           "IwAuAETWIwAAAQAmAf////8BAf////8AAAAABGCACgEAAAAAAA0AAABTaGVsdmluZ1N0YXRlAQDaIwAv" +
           "AQBxC9ojAAABAAAAAQAsIwEBAJ4jBgAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQDbIwAvAQDI" +
           "CtsjAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEA3CMALgBE3CMAAAAR/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQDgIwAvAQDPCuAjAAAAFf////8BAf////8C" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAEA4SMALgBE4SMAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAA" +
           "AFRyYW5zaXRpb25UaW1lAQDkIwAuAETkIwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABV" +
           "bnNoZWx2ZVRpbWUBAOUjAC4AROUjAAABACIB/////wEB/////wAAAAAEYYIKBAAAAAAACAAAAFVuc2hl" +
           "bHZlAQD7IwAvAQCDC/sjAAABAQEAAAABAPkLAAEAVSsAAAAABGGCCgQAAAAAAA0AAABPbmVTaG90U2hl" +
           "bHZlAQD8IwAvAQCEC/wjAAABAQEAAAABAPkLAAEAVSsAAAAABGGCCgQAAAAAAAsAAABUaW1lZFNoZWx2" +
           "ZQEA/SMALwEAhQv9IwAAAQEBAAAAAQD5CwABAFUrAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVu" +
           "dHMBAP4jAC4ARP4jAACWAQAAAAEAKgEBegAAAAwAAABTaGVsdmluZ1RpbWUBACIB/////wAAAAADAAAA" +
           "AFUAAABJZiBub3QgMCwgdGhpcyBwYXJhbWV0ZXIgc3BlY2lmaWVzIGEgZml4ZWQgdGltZSBmb3Igd2hp" +
           "Y2ggdGhlIEFsYXJtIGlzIHRvIGJlIHNoZWx2ZWQuAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAAABMA" +
           "AABTdXBwcmVzc2VkT3JTaGVsdmVkAQD/IwAuAET/IwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAO" +
           "AAAATWF4VGltZVNoZWx2ZWQBAAAkAC4ARAAkAAABACIB/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState ActiveState
        {
            get
            {
                return m_activeState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_activeState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_activeState = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> InputNode
        {
            get
            {
                return m_inputNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_inputNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_inputNode = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState SuppressedState
        {
            get
            {
                return m_suppressedState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressedState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressedState = value;
            }
        }

        /// <remarks />
        public ShelvedStateMachineState ShelvingState
        {
            get
            {
                return m_shelvingState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shelvingState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shelvingState = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> SuppressedOrShelved
        {
            get
            {
                return m_suppressedOrShelved;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suppressedOrShelved, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suppressedOrShelved = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeShelved
        {
            get
            {
                return m_maxTimeShelved;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeShelved, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeShelved = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_activeState != null)
            {
                children.Add(m_activeState);
            }

            if (m_inputNode != null)
            {
                children.Add(m_inputNode);
            }

            if (m_suppressedState != null)
            {
                children.Add(m_suppressedState);
            }

            if (m_shelvingState != null)
            {
                children.Add(m_shelvingState);
            }

            if (m_suppressedOrShelved != null)
            {
                children.Add(m_suppressedOrShelved);
            }

            if (m_maxTimeShelved != null)
            {
                children.Add(m_maxTimeShelved);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ActiveState:
                {
                    if (createOrReplace)
                    {
                        if (ActiveState == null)
                        {
                            if (replacement == null)
                            {
                                ActiveState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                ActiveState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = ActiveState;
                    break;
                }

                case Opc.Ua.BrowseNames.InputNode:
                {
                    if (createOrReplace)
                    {
                        if (InputNode == null)
                        {
                            if (replacement == null)
                            {
                                InputNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                InputNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = InputNode;
                    break;
                }

                case Opc.Ua.BrowseNames.SuppressedState:
                {
                    if (createOrReplace)
                    {
                        if (SuppressedState == null)
                        {
                            if (replacement == null)
                            {
                                SuppressedState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                SuppressedState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = SuppressedState;
                    break;
                }

                case Opc.Ua.BrowseNames.ShelvingState:
                {
                    if (createOrReplace)
                    {
                        if (ShelvingState == null)
                        {
                            if (replacement == null)
                            {
                                ShelvingState = new ShelvedStateMachineState(this);
                            }
                            else
                            {
                                ShelvingState = (ShelvedStateMachineState)replacement;
                            }
                        }
                    }

                    instance = ShelvingState;
                    break;
                }

                case Opc.Ua.BrowseNames.SuppressedOrShelved:
                {
                    if (createOrReplace)
                    {
                        if (SuppressedOrShelved == null)
                        {
                            if (replacement == null)
                            {
                                SuppressedOrShelved = new PropertyState<bool>(this);
                            }
                            else
                            {
                                SuppressedOrShelved = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = SuppressedOrShelved;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeShelved:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeShelved == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeShelved = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeShelved = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeShelved;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_activeState;
        private PropertyState<NodeId> m_inputNode;
        private TwoStateVariableState m_suppressedState;
        private ShelvedStateMachineState m_shelvingState;
        private PropertyState<bool> m_suppressedOrShelved;
        private PropertyState<double> m_maxTimeShelved;
        #endregion
    }
    #endif
    #endregion

    #region ShelvedStateMachineState Class
    #if (!OPCUA_EXCLUDE_ShelvedStateMachineState)
    /// <summary>
    /// Stores an instance of the ShelvedStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ShelvedStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ShelvedStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ShelvedStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAFNoZWx2ZWRTdGF0ZU1hY2hpbmVUeXBlSW5zdGFuY2UBAHELAQBx" +
           "C/////8FAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBAMgXAC8BAMgKyBcAAAAV/////wEB////" +
           "/wEAAAAVYIkKAgAAAAAAAgAAAElkAQDJFwAuAETJFwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAM" +
           "AAAAVW5zaGVsdmVUaW1lAQCbIwAuAESbIwAAAQAiAf////8BAf////8AAAAABGGCCgQAAAAAAAgAAABV" +
           "bnNoZWx2ZQEAgwsALwEAgwuDCwAAAQEDAAAAADUBAQB8CwA1AQEAfwsBAPkLAAEAVSsAAAAABGGCCgQA" +
           "AAAAAA0AAABPbmVTaG90U2hlbHZlAQCECwAvAQCEC4QLAAABAQMAAAAANQEBAHgLADUBAQB+CwEA+QsA" +
           "AQBVKwAAAAAEYYIKBAAAAAAACwAAAFRpbWVkU2hlbHZlAQCFCwAvAQCFC4ULAAABAQMAAAAANQEBAHcL" +
           "ADUBAQCBCwEA+QsAAQBVKwEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQCvCwAuAESvCwAA" +
           "lgEAAAABACoBAXoAAAAMAAAAU2hlbHZpbmdUaW1lAQAiAf////8AAAAAAwAAAABVAAAASWYgbm90IDAs" +
           "IHRoaXMgcGFyYW1ldGVyIHNwZWNpZmllcyBhIGZpeGVkIHRpbWUgZm9yIHdoaWNoIHRoZSBBbGFybSBp" +
           "cyB0byBiZSBzaGVsdmVkLgEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> UnshelveTime
        {
            get
            {
                return m_unshelveTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelveTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelveTime = value;
            }
        }

        /// <remarks />
        public MethodState Unshelve
        {
            get
            {
                return m_unshelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_unshelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_unshelveMethod = value;
            }
        }

        /// <remarks />
        public MethodState OneShotShelve
        {
            get
            {
                return m_oneShotShelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oneShotShelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oneShotShelveMethod = value;
            }
        }

        /// <remarks />
        public TimedShelveMethodState TimedShelve
        {
            get
            {
                return m_timedShelveMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_timedShelveMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_timedShelveMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_unshelveTime != null)
            {
                children.Add(m_unshelveTime);
            }

            if (m_unshelveMethod != null)
            {
                children.Add(m_unshelveMethod);
            }

            if (m_oneShotShelveMethod != null)
            {
                children.Add(m_oneShotShelveMethod);
            }

            if (m_timedShelveMethod != null)
            {
                children.Add(m_timedShelveMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UnshelveTime:
                {
                    if (createOrReplace)
                    {
                        if (UnshelveTime == null)
                        {
                            if (replacement == null)
                            {
                                UnshelveTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                UnshelveTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = UnshelveTime;
                    break;
                }

                case Opc.Ua.BrowseNames.Unshelve:
                {
                    if (createOrReplace)
                    {
                        if (Unshelve == null)
                        {
                            if (replacement == null)
                            {
                                Unshelve = new MethodState(this);
                            }
                            else
                            {
                                Unshelve = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Unshelve;
                    break;
                }

                case Opc.Ua.BrowseNames.OneShotShelve:
                {
                    if (createOrReplace)
                    {
                        if (OneShotShelve == null)
                        {
                            if (replacement == null)
                            {
                                OneShotShelve = new MethodState(this);
                            }
                            else
                            {
                                OneShotShelve = (MethodState)replacement;
                            }
                        }
                    }

                    instance = OneShotShelve;
                    break;
                }

                case Opc.Ua.BrowseNames.TimedShelve:
                {
                    if (createOrReplace)
                    {
                        if (TimedShelve == null)
                        {
                            if (replacement == null)
                            {
                                TimedShelve = new TimedShelveMethodState(this);
                            }
                            else
                            {
                                TimedShelve = (TimedShelveMethodState)replacement;
                            }
                        }
                    }

                    instance = TimedShelve;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_unshelveTime;
        private MethodState m_unshelveMethod;
        private MethodState m_oneShotShelveMethod;
        private TimedShelveMethodState m_timedShelveMethod;
        #endregion
    }
    #endif
    #endregion

    #region TimedShelveMethodState Class
    #if (!OPCUA_EXCLUDE_TimedShelveMethodState)
    /// <summary>
    /// Stores an instance of the TimedShelveMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TimedShelveMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TimedShelveMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new TimedShelveMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFQAAAFRpbWVkU2hlbHZlTWV0aG9kVHlwZQEA1hcALwEA1hfWFwAAAQH/" +
           "////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBANcXAC4ARNcXAACWAQAAAAEAKgEBegAA" +
           "AAwAAABTaGVsdmluZ1RpbWUBACIB/////wAAAAADAAAAAFUAAABJZiBub3QgMCwgdGhpcyBwYXJhbWV0" +
           "ZXIgc3BlY2lmaWVzIGEgZml4ZWQgdGltZSBmb3Igd2hpY2ggdGhlIEFsYXJtIGlzIHRvIGJlIHNoZWx2" +
           "ZWQuAQAoAQEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public TimedShelveMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            double shelvingTime = (double)_inputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    shelvingTime);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult TimedShelveMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        double shelvingTime);
    #endif
    #endregion

    #region LimitAlarmState Class
    #if (!OPCUA_EXCLUDE_LimitAlarmState)
    /// <summary>
    /// Stores an instance of the LimitAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class LimitAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public LimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.LimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (HighHighLimit != null)
            {
                HighHighLimit.Initialize(context, HighHighLimit_InitializationString);
            }

            if (HighLimit != null)
            {
                HighLimit.Initialize(context, HighLimit_InitializationString);
            }

            if (LowLimit != null)
            {
                LowLimit.Initialize(context, LowLimit_InitializationString);
            }

            if (LowLowLimit != null)
            {
                LowLowLimit.Initialize(context, LowLowLimit_InitializationString);
            }
        }

        #region Initialization String
        private const string HighHighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEhpZ2hIaWdoTGltaXQBAHQrAC4ARHQrAAAAC/////8BAf////8A" +
           "AAAA";

        private const string HighLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEhpZ2hMaW1pdAEAdSsALgBEdSsAAAAL/////wEB/////wAAAAA=";

        private const string LowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAExvd0xpbWl0AQB2KwAuAER2KwAAAAv/////AQH/////AAAAAA==";

        private const string LowLowLimit_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0xvd0xpbWl0AQB3KwAuAER3KwAAAAv/////AQH/////AAAA" +
           "AA==";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFgAAAExpbWl0QWxhcm1UeXBlSW5zdGFuY2UBAIsLAQCLC/////8fAAAA" +
           "FWCJCgIAAAAAAAcAAABFdmVudElkAQDkFwAuAETkFwAAAA//////AQH/////AAAAABVgiQoCAAAAAAAJ" +
           "AAAARXZlbnRUeXBlAQDlFwAuAETlFwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNl" +
           "Tm9kZQEA5hcALgBE5hcAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUBAOcX" +
           "AC4AROcXAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQDoFwAuAEToFwAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA6RcALgBE6RcAAAEAJgH/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDqFwAuAETqFwAAAQDQIv////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAcAAABNZXNzYWdlAQDrFwAuAETrFwAAABX/////AQH/////AAAAABVgiQoCAAAAAAAI" +
           "AAAAU2V2ZXJpdHkBAOwXAC4AROwXAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25kaXRp" +
           "b25DbGFzc0lkAQBxKwAuAERxKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0aW9u" +
           "Q2xhc3NOYW1lAQByKwAuAERyKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQ29uZGl0aW9u" +
           "TmFtZQEAASQALgBEASQAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5jaElkAQACJAAu" +
           "AEQCJAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQDtFwAuAETtFwAAAAH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQADJAAvAQAjIwMkAAAAFf////8BAQUA" +
           "AAABACwjAAEAFyQBACwjAAEAICQBACwjAAEALSQBACwjAAEANiQBACwjAAEAPyQBAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAEABCQALgBEBCQAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkBAAwk" +
           "AC8BACojDCQAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEADSQA" +
           "LgBEDSQAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AQAOJAAvAQAq" +
           "Iw4kAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAA8kAC4ARA8k" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBABAkAC8BACojECQAAAAV////" +
           "/wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAESQALgBEESQAAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQASJAAuAEQSJAAAAAz/////AQH/////" +
           "AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEAFCQALwEARCMUJAAAAQEBAAAAAQD5CwABAPMKAAAAAARh" +
           "ggoEAAAAAAAGAAAARW5hYmxlAQATJAAvAQBDIxMkAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQAAAAA" +
           "AAoAAABBZGRDb21tZW50AQAVJAAvAQBFIxUkAAABAQEAAAABAPkLAAEADQsBAAAAFWCpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEAFiQALgBEFiQAAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD/////8A" +
           "AAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEBQgAA" +
           "AAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUgY29u" +
           "ZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0ZQEAFyQALwEAIyMX" +
           "JAAAABX/////AQEBAAAAAQAsIwEBAAMkAQAAABVgiQoCAAAAAAACAAAASWQBABgkAC4ARBgkAAAAAf//" +
           "//8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAKSQALwEAlyMpJAAAAQEBAAAAAQD5" +
           "CwABAPAiAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACokAC4ARCokAACWAgAAAAEAKgEB" +
           "RgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZl" +
           "bnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29t" +
           "bWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACwAA" +
           "AEFjdGl2ZVN0YXRlAQAtJAAvAQAjIy0kAAAAFf////8BAQEAAAABACwjAQEAAyQBAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAEALiQALgBELiQAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEA" +
           "cysALgBEcysAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQB" +
           "AGQkAC4ARGQkAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABIaWdoSGlnaExpbWl0AQB0KwAu" +
           "AER0KwAAAAv/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASGlnaExpbWl0AQB1KwAuAER1KwAAAAv/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAIAAAATG93TGltaXQBAHYrAC4ARHYrAAAAC/////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABMb3dMb3dMaW1pdAEAdysALgBEdysAAAAL/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> HighHighLimit
        {
            get
            {
                return m_highHighLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> HighLimit
        {
            get
            {
                return m_highLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLimit
        {
            get
            {
                return m_lowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<double> LowLowLimit
        {
            get
            {
                return m_lowLowLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowLimit = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highHighLimit != null)
            {
                children.Add(m_highHighLimit);
            }

            if (m_highLimit != null)
            {
                children.Add(m_highLimit);
            }

            if (m_lowLimit != null)
            {
                children.Add(m_lowLimit);
            }

            if (m_lowLowLimit != null)
            {
                children.Add(m_lowLowLimit);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighHighLimit:
                {
                    if (createOrReplace)
                    {
                        if (HighHighLimit == null)
                        {
                            if (replacement == null)
                            {
                                HighHighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighHighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighHighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.HighLimit:
                {
                    if (createOrReplace)
                    {
                        if (HighLimit == null)
                        {
                            if (replacement == null)
                            {
                                HighLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                HighLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = HighLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLimit:
                {
                    if (createOrReplace)
                    {
                        if (LowLimit == null)
                        {
                            if (replacement == null)
                            {
                                LowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowLimit:
                {
                    if (createOrReplace)
                    {
                        if (LowLowLimit == null)
                        {
                            if (replacement == null)
                            {
                                LowLowLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                LowLowLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = LowLowLimit;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_highHighLimit;
        private PropertyState<double> m_highLimit;
        private PropertyState<double> m_lowLimit;
        private PropertyState<double> m_lowLowLimit;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLimitStateMachineState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLimitStateMachineState)
    /// <summary>
    /// Stores an instance of the ExclusiveLimitStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLimitStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveLimitStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLimitStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAEV4Y2x1c2l2ZUxpbWl0U3RhdGVNYWNoaW5lVHlwZUluc3RhbmNl" +
           "AQBmJAEAZiT/////AQAAABVgiQoCAAAAAAAMAAAAQ3VycmVudFN0YXRlAQBnJAAvAQDICmckAAAAFf//" +
           "//8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEAaCQALgBEaCQAAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLimitAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLimitAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveLimitAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLimitAlarmState : LimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveLimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAEV4Y2x1c2l2ZUxpbWl0QWxhcm1UeXBlSW5zdGFuY2UBAH0kAQB9" +
           "JP////8cAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQB+JAAuAER+JAAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQB/JAAuAER/JAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEAgCQALgBEgCQAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAIEkAC4ARIEkAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCCJAAuAESC" +
           "JAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAgyQALgBEgyQAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCEJAAuAESEJAAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCFJAAuAESFJAAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAIYkAC4ARIYkAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAA" +
           "AABDb25kaXRpb25DbGFzc0lkAQB4KwAuAER4KwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAA" +
           "Q29uZGl0aW9uQ2xhc3NOYW1lAQB5KwAuAER5KwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAA" +
           "Q29uZGl0aW9uTmFtZQEAhyQALgBEhyQAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5j" +
           "aElkAQCIJAAuAESIJAAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQCJJAAuAESJ" +
           "JAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQCKJAAvAQAjI4okAAAA" +
           "Ff////8BAQUAAAABACwjAAEAoCQBACwjAAEAqSQBACwjAAEAtiQBACwjAAEAvyQBACwjAAEAyCQBAAAA" +
           "FWCJCgIAAAAAAAIAAABJZAEAiyQALgBEiyQAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1" +
           "YWxpdHkBAJMkAC8BACojkyQAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVz" +
           "dGFtcAEAlCQALgBElCQAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5" +
           "AQCVJAAvAQAqI5UkAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXAB" +
           "AJYkAC4ARJYkAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAJckAC8BACoj" +
           "lyQAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAmCQALgBEmCQA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQCZJAAuAESZJAAAAAz/" +
           "////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEAmyQALwEARCObJAAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAQCaJAAvAQBDI5okAAABAQEAAAABAPkLAAEA8woAAAAA" +
           "BGGCCgQAAAAAAAoAAABBZGRDb21tZW50AQCcJAAvAQBFI5wkAAABAQEAAAABAPkLAAEADQsBAAAAFWCp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAnSQALgBEnSQAAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50" +
           "SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50" +
           "LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0" +
           "byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0ZQEA" +
           "oCQALwEAIyOgJAAAABX/////AQEBAAAAAQAsIwEBAIokAQAAABVgiQoCAAAAAAACAAAASWQBAKEkAC4A" +
           "RKEkAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAsiQALwEAlyOyJAAA" +
           "AQEBAAAAAQD5CwABAPAiAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBALMkAC4ARLMkAACW" +
           "AgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZv" +
           "ciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQA" +
           "AABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAACwAAAEFjdGl2ZVN0YXRlAQC2JAAvAQAjI7YkAAAAFf////8BAQIAAAABACwjAQEAiiQBACwj" +
           "AAEA7yQBAAAAFWCJCgIAAAAAAAIAAABJZAEAtyQALgBEtyQAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAElucHV0Tm9kZQEAeisALgBEeisAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1" +
           "cHByZXNzZWRPclNoZWx2ZWQBAO0kAC4ARO0kAAAAAf////8BAf////8AAAAABGCACgEAAAAAAAoAAABM" +
           "aW1pdFN0YXRlAQDvJAAvAQBmJO8kAAABAAAAAQAsIwEBALYkAgAAABVgiQoCAAAAAAAMAAAAQ3VycmVu" +
           "dFN0YXRlAQDwJAAvAQDICvAkAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEA8SQALgBE" +
           "8SQAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RUcmFuc2l0aW9uAQD1JAAvAQDPCvUk" +
           "AAAAFf////8BAf////8CAAAAFWCJCgIAAAAAAAIAAABJZAEA9iQALgBE9iQAAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQD5JAAuAET5JAAAAQAmAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public ExclusiveLimitStateMachineState LimitState
        {
            get
            {
                return m_limitState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_limitState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_limitState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_limitState != null)
            {
                children.Add(m_limitState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LimitState:
                {
                    if (createOrReplace)
                    {
                        if (LimitState == null)
                        {
                            if (replacement == null)
                            {
                                LimitState = new ExclusiveLimitStateMachineState(this);
                            }
                            else
                            {
                                LimitState = (ExclusiveLimitStateMachineState)replacement;
                            }
                        }
                    }

                    instance = LimitState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private ExclusiveLimitStateMachineState m_limitState;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveLimitAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveLimitAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveLimitAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveLimitAlarmState : LimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveLimitAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveLimitAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (HighHighState != null)
            {
                HighHighState.Initialize(context, HighHighState_InitializationString);
            }

            if (HighState != null)
            {
                HighState.Initialize(context, HighState_InitializationString);
            }

            if (LowState != null)
            {
                LowState.Initialize(context, LowState_InitializationString);
            }

            if (LowLowState != null)
            {
                LowLowState.Initialize(context, LowLowState_InitializationString);
            }
        }

        #region Initialization String
        private const string HighHighState_InitializationString =
           "//////////8VYIkKAgAAAAAADQAAAEhpZ2hIaWdoU3RhdGUBACQnAC8BACMjJCcAAAAV/////wEBAQAA" +
           "AAEALCMBAQDrJgIAAAAVYIkKAgAAAAAAAgAAAElkAQAlJwAuAEQlJwAAAAH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBACknAC4ARCknAAABACYB/////wEB/////wAAAAA=";

        private const string HighState_InitializationString =
           "//////////8VYIkKAgAAAAAACQAAAEhpZ2hTdGF0ZQEALScALwEAIyMtJwAAABX/////AQEBAAAAAQAs" +
           "IwEBAOsmAgAAABVgiQoCAAAAAAACAAAASWQBAC4nAC4ARC4nAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA4AAABUcmFuc2l0aW9uVGltZQEAMicALgBEMicAAAEAJgH/////AQH/////AAAAAA==";

        private const string LowState_InitializationString =
           "//////////8VYIkKAgAAAAAACAAAAExvd1N0YXRlAQA2JwAvAQAjIzYnAAAAFf////8BAQEAAAABACwj" +
           "AQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEANycALgBENycAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAFRyYW5zaXRpb25UaW1lAQA7JwAuAEQ7JwAAAQAmAf////8BAf////8AAAAA";

        private const string LowLowState_InitializationString =
           "//////////8VYIkKAgAAAAAACwAAAExvd0xvd1N0YXRlAQA/JwAvAQAjIz8nAAAAFf////8BAQEAAAAB" +
           "ACwjAQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEAQCcALgBEQCcAAAAB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQBEJwAuAEREJwAAAQAmAf////8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAE5vbkV4Y2x1c2l2ZUxpbWl0QWxhcm1UeXBlSW5zdGFuY2UBALIm" +
           "AQCyJv////8fAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCzJgAuAESzJgAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQC0JgAuAES0JgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEAtSYALgBEtSYAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBALYmAC4ARLYmAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQC3JgAu" +
           "AES3JgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAuCYALgBEuCYA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQC5JgAuAES5JgAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQC6JgAuAES6JgAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBALsmAC4ARLsmAAAABf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABAAAABDb25kaXRpb25DbGFzc0lkAQCEKwAuAESEKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAS" +
           "AAAAQ29uZGl0aW9uQ2xhc3NOYW1lAQCFKwAuAESFKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAAN" +
           "AAAAQ29uZGl0aW9uTmFtZQEAvCYALgBEvCYAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJy" +
           "YW5jaElkAQC9JgAuAES9JgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQC+JgAu" +
           "AES+JgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQC/JgAvAQAjI78m" +
           "AAAAFf////8BAQUAAAABACwjAAEA1SYBACwjAAEA3iYBACwjAAEA6yYBACwjAAEA9CYBACwjAAEA/SYB" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAEAwCYALgBEwCYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AFF1YWxpdHkBAMgmAC8BACojyCYAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRp" +
           "bWVzdGFtcAEAySYALgBEySYAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVy" +
           "aXR5AQDKJgAvAQAqI8omAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3Rh" +
           "bXABAMsmAC4ARMsmAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAMwmAC8B" +
           "ACojzCYAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAzSYALgBE" +
           "zSYAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQDOJgAuAETOJgAA" +
           "AAz/////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEA0CYALwEARCPQJgAAAQEBAAAAAQD5" +
           "CwABAPMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAQDPJgAvAQBDI88mAAABAQEAAAABAPkLAAEA8woA" +
           "AAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AQDRJgAvAQBFI9EmAAABAQEAAAABAPkLAAEADQsBAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA0iYALgBE0iYAAJYCAAAAAQAqAQFGAAAABwAAAEV2" +
           "ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21t" +
           "ZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFk" +
           "ZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0" +
           "ZQEA1SYALwEAIyPVJgAAABX/////AQEBAAAAAQAsIwEBAL8mAQAAABVgiQoCAAAAAAACAAAASWQBANYm" +
           "AC4ARNYmAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEA5yYALwEAlyPn" +
           "JgAAAQEBAAAAAQD5CwABAPAiAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOgmAC4AROgm" +
           "AACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVy" +
           "IGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAA" +
           "ACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQDrJgAvAQAjI+smAAAAFf////8BAQUAAAABACwjAQEAvyYB" +
           "ACwjAAEAJCcBACwjAAEALScBACwjAAEANicBACwjAAEAPycBAAAAFWCJCgIAAAAAAAIAAABJZAEA7CYA" +
           "LgBE7CYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEAhisALgBEhisAAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBACInAC4ARCInAAAA" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABIaWdoSGlnaFN0YXRlAQAkJwAvAQAjIyQnAAAAFf//" +
           "//8BAQEAAAABACwjAQEA6yYCAAAAFWCJCgIAAAAAAAIAAABJZAEAJScALgBEJScAAAAB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1lAQApJwAuAEQpJwAAAQAmAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAkAAABIaWdoU3RhdGUBAC0nAC8BACMjLScAAAAV/////wEBAQAAAAEALCMBAQDr" +
           "JgIAAAAVYIkKAgAAAAAAAgAAAElkAQAuJwAuAEQuJwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAO" +
           "AAAAVHJhbnNpdGlvblRpbWUBADInAC4ARDInAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACAAA" +
           "AExvd1N0YXRlAQA2JwAvAQAjIzYnAAAAFf////8BAQEAAAABACwjAQEA6yYCAAAAFWCJCgIAAAAAAAIA" +
           "AABJZAEANycALgBENycAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAFRyYW5zaXRpb25UaW1l" +
           "AQA7JwAuAEQ7JwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABMb3dMb3dTdGF0ZQEAPycA" +
           "LwEAIyM/JwAAABX/////AQEBAAAAAQAsIwEBAOsmAgAAABVgiQoCAAAAAAACAAAASWQBAEAnAC4AREAn" +
           "AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABUcmFuc2l0aW9uVGltZQEARCcALgBERCcAAAEA" +
           "JgH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TwoStateVariableState HighHighState
        {
            get
            {
                return m_highHighState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highHighState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highHighState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState HighState
        {
            get
            {
                return m_highState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_highState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_highState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LowState
        {
            get
            {
                return m_lowState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowState = value;
            }
        }

        /// <remarks />
        public TwoStateVariableState LowLowState
        {
            get
            {
                return m_lowLowState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lowLowState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lowLowState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_highHighState != null)
            {
                children.Add(m_highHighState);
            }

            if (m_highState != null)
            {
                children.Add(m_highState);
            }

            if (m_lowState != null)
            {
                children.Add(m_lowState);
            }

            if (m_lowLowState != null)
            {
                children.Add(m_lowLowState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.HighHighState:
                {
                    if (createOrReplace)
                    {
                        if (HighHighState == null)
                        {
                            if (replacement == null)
                            {
                                HighHighState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                HighHighState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = HighHighState;
                    break;
                }

                case Opc.Ua.BrowseNames.HighState:
                {
                    if (createOrReplace)
                    {
                        if (HighState == null)
                        {
                            if (replacement == null)
                            {
                                HighState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                HighState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = HighState;
                    break;
                }

                case Opc.Ua.BrowseNames.LowState:
                {
                    if (createOrReplace)
                    {
                        if (LowState == null)
                        {
                            if (replacement == null)
                            {
                                LowState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LowState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LowState;
                    break;
                }

                case Opc.Ua.BrowseNames.LowLowState:
                {
                    if (createOrReplace)
                    {
                        if (LowLowState == null)
                        {
                            if (replacement == null)
                            {
                                LowLowState = new TwoStateVariableState(this);
                            }
                            else
                            {
                                LowLowState = (TwoStateVariableState)replacement;
                            }
                        }
                    }

                    instance = LowLowState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TwoStateVariableState m_highHighState;
        private TwoStateVariableState m_highState;
        private TwoStateVariableState m_lowState;
        private TwoStateVariableState m_lowLowState;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveLevelAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveLevelAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveLevelAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveLevelAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveLevelAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveLevelAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAE5vbkV4Y2x1c2l2ZUxldmVsQWxhcm1UeXBlSW5zdGFuY2UBAEwn" +
           "AQBMJ/////8bAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBNJwAuAERNJwAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBOJwAuAEROJwAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEATycALgBETycAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBAFAnAC4ARFAnAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQBRJwAu" +
           "AERRJwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAUicALgBEUicA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBTJwAuAERTJwAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBUJwAuAERUJwAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAFUnAC4ARFUnAAAABf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABAAAABDb25kaXRpb25DbGFzc0lkAQCHKwAuAESHKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAS" +
           "AAAAQ29uZGl0aW9uQ2xhc3NOYW1lAQCIKwAuAESIKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAAN" +
           "AAAAQ29uZGl0aW9uTmFtZQEAVicALgBEVicAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJy" +
           "YW5jaElkAQBXJwAuAERXJwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQBYJwAu" +
           "AERYJwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQBZJwAvAQAjI1kn" +
           "AAAAFf////8BAQUAAAABACwjAAEAbycBACwjAAEAeCcBACwjAAEAhScBACwjAAEAjicBACwjAAEAlycB" +
           "AAAAFWCJCgIAAAAAAAIAAABJZAEAWicALgBEWicAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAA" +
           "AFF1YWxpdHkBAGInAC8BACojYicAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRp" +
           "bWVzdGFtcAEAYycALgBEYycAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVy" +
           "aXR5AQBkJwAvAQAqI2QnAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3Rh" +
           "bXABAGUnAC4ARGUnAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBAGYnAC8B" +
           "ACojZicAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAZycALgBE" +
           "ZycAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQBoJwAuAERoJwAA" +
           "AAz/////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEAaicALwEARCNqJwAAAQEBAAAAAQD5" +
           "CwABAPMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAQBpJwAvAQBDI2knAAABAQEAAAABAPkLAAEA8woA" +
           "AAAABGGCCgQAAAAAAAoAAABBZGRDb21tZW50AQBrJwAvAQBFI2snAAABAQEAAAABAPkLAAEADQsBAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAbCcALgBEbCcAAJYCAAAAAQAqAQFGAAAABwAAAEV2" +
           "ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21t" +
           "ZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFk" +
           "ZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0" +
           "ZQEAbycALwEAIyNvJwAAABX/////AQEBAAAAAQAsIwEBAFknAQAAABVgiQoCAAAAAAACAAAASWQBAHAn" +
           "AC4ARHAnAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAgScALwEAlyOB" +
           "JwAAAQEBAAAAAQD5CwABAPAiAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAIInAC4ARIIn" +
           "AACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVy" +
           "IGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAA" +
           "ACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAV" +
           "YIkKAgAAAAAACwAAAEFjdGl2ZVN0YXRlAQCFJwAvAQAjI4UnAAAAFf////8BAQUAAAABACwjAQEAWScB" +
           "ACwjAAEAvicBACwjAAEAxycBACwjAAEA0CcBACwjAAEA2ScBAAAAFWCJCgIAAAAAAAIAAABJZAEAhicA" +
           "LgBEhicAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9kZQEAiSsALgBEiSsAAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2ZWQBALwnAC4ARLwnAAAA" +
           "Af////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveLevelAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveLevelAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveLevelAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveLevelAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveLevelAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveLevelAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAEV4Y2x1c2l2ZUxldmVsQWxhcm1UeXBlSW5zdGFuY2UBAAolAQAK" +
           "Jf////8cAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQALJQAuAEQLJQAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQAMJQAuAEQMJQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEADSUALgBEDSUAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAA4lAC4ARA4lAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQAPJQAuAEQP" +
           "JQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAECUALgBEECUAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQARJQAuAEQRJQAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQASJQAuAEQSJQAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBABMlAC4ARBMlAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAA" +
           "AABDb25kaXRpb25DbGFzc0lkAQB7KwAuAER7KwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAA" +
           "Q29uZGl0aW9uQ2xhc3NOYW1lAQB8KwAuAER8KwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAA" +
           "Q29uZGl0aW9uTmFtZQEAFCUALgBEFCUAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5j" +
           "aElkAQAVJQAuAEQVJQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQAWJQAuAEQW" +
           "JQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQAXJQAvAQAjIxclAAAA" +
           "Ff////8BAQUAAAABACwjAAEALSUBACwjAAEANiUBACwjAAEAQyUBACwjAAEATCUBACwjAAEAVSUBAAAA" +
           "FWCJCgIAAAAAAAIAAABJZAEAGCUALgBEGCUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1" +
           "YWxpdHkBACAlAC8BACojICUAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVz" +
           "dGFtcAEAISUALgBEISUAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5" +
           "AQAiJQAvAQAqIyIlAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXAB" +
           "ACMlAC4ARCMlAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBACQlAC8BACoj" +
           "JCUAAAAV/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAJSUALgBEJSUA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQAmJQAuAEQmJQAAAAz/" +
           "////AQH/////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEAKCUALwEARCMoJQAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAGAAAARW5hYmxlAQAnJQAvAQBDIyclAAABAQEAAAABAPkLAAEA8woAAAAA" +
           "BGGCCgQAAAAAAAoAAABBZGRDb21tZW50AQApJQAvAQBFIyklAAABAQEAAAABAPkLAAEADQsBAAAAFWCp" +
           "CgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAKiUALgBEKiUAAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50" +
           "SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50" +
           "LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0" +
           "byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0ZQEA" +
           "LSUALwEAIyMtJQAAABX/////AQEBAAAAAQAsIwEBABclAQAAABVgiQoCAAAAAAACAAAASWQBAC4lAC4A" +
           "RC4lAAAAAf////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAPyUALwEAlyM/JQAA" +
           "AQEBAAAAAQD5CwABAPAiAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEAlAC4AREAlAACW" +
           "AgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZv" +
           "ciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQA" +
           "AABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkK" +
           "AgAAAAAACwAAAEFjdGl2ZVN0YXRlAQBDJQAvAQAjI0MlAAAAFf////8BAQIAAAABACwjAQEAFyUBACwj" +
           "AAEAfCUBAAAAFWCJCgIAAAAAAAIAAABJZAEARCUALgBERCUAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAElucHV0Tm9kZQEAfSsALgBEfSsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1" +
           "cHByZXNzZWRPclNoZWx2ZWQBAHolAC4ARHolAAAAAf////8BAf////8AAAAABGCACgEAAAAAAAoAAABM" +
           "aW1pdFN0YXRlAQB8JQAvAQBmJHwlAAABAAAAAQAsIwEBAEMlAQAAABVgiQoCAAAAAAAMAAAAQ3VycmVu" +
           "dFN0YXRlAQB9JQAvAQDICn0lAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJZAEAfiUALgBE" +
           "fiUAAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveDeviationAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveDeviationAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveDeviationAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveDeviationAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveDeviationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveDeviationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAE5vbkV4Y2x1c2l2ZURldmlhdGlvbkFsYXJtVHlwZUluc3RhbmNl" +
           "AQCAKAEAgCj/////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAgSgALgBEgSgAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAgigALgBEgigAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAIMoAC4ARIMoAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQCEKAAuAESEKAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "hSgALgBEhSgAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAIYoAC4A" +
           "RIYoAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAhygALgBEhygAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAiCgALgBEiCgAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCJKAAuAESJKAAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAjSsALgBEjSsAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAjisALgBEjisAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUBAIooAC4ARIooAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABCcmFuY2hJZAEAiygALgBEiygAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA" +
           "jCgALgBEjCgAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAjSgALwEA" +
           "IyONKAAAABX/////AQEFAAAAAQAsIwABAKMoAQAsIwABAKwoAQAsIwABALkoAQAsIwABAMIoAQAsIwAB" +
           "AMsoAQAAABVgiQoCAAAAAAACAAAASWQBAI4oAC4ARI4oAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABRdWFsaXR5AQCWKAAvAQAqI5YoAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAJcoAC4ARJcoAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RT" +
           "ZXZlcml0eQEAmCgALwEAKiOYKAAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQCZKAAuAESZKAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQCa" +
           "KAAvAQAqI5ooAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAJso" +
           "AC4ARJsoAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAnCgALgBE" +
           "nCgAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAJ4oAC8BAEQjnigAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAnSgALwEAQyOdKAAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAnygALwEARSOfKAAAAQEBAAAAAQD5CwABAA0L" +
           "AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKAoAC4ARKAoAACWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2Vk" +
           "U3RhdGUBAKMoAC8BACMjoygAAAAV/////wEBAQAAAAEALCMBAQCNKAEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQCkKAAuAESkKAAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBALUoAC8B" +
           "AJcjtSgAAAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQC2KAAu" +
           "AES2KAAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRp" +
           "ZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAA" +
           "AwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEAuSgALwEAIyO5KAAAABX/////AQEFAAAAAQAsIwEB" +
           "AI0oAQAsIwABAPIoAQAsIwABAPsoAQAsIwABAAQpAQAsIwABAA0pAQAAABVgiQoCAAAAAAACAAAASWQB" +
           "ALooAC4ARLooAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5vZGUBAI8rAC4ARI8r" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBwcmVzc2VkT3JTaGVsdmVkAQDwKAAuAETw" +
           "KAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAU2V0cG9pbnROb2RlAQAaKQAuAEQaKQAAABH/" +
           "////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SetpointNode
        {
            get
            {
                return m_setpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setpointNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setpointNode != null)
            {
                children.Add(m_setpointNode);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (SetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                SetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SetpointNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_setpointNode;
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveDeviationAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveDeviationAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveDeviationAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveDeviationAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveDeviationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveDeviationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEV4Y2x1c2l2ZURldmlhdGlvbkFsYXJtVHlwZUluc3RhbmNlAQAk" +
           "JgEAJCb/////HQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAJSYALgBEJSYAAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAJiYALgBEJiYAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBACcmAC4ARCcmAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQAoJgAuAEQoJgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAKSYA" +
           "LgBEKSYAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAComAC4ARCom" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAKyYALgBEKyYAAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEALCYALgBELCYAAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAtJgAuAEQtJgAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAgSsALgBEgSsAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAgisALgBEgisAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "DQAAAENvbmRpdGlvbk5hbWUBAC4mAC4ARC4mAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABC" +
           "cmFuY2hJZAEALyYALgBELyYAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEAMCYA" +
           "LgBEMCYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAMSYALwEAIyMx" +
           "JgAAABX/////AQEFAAAAAQAsIwABAEcmAQAsIwABAFAmAQAsIwABAF0mAQAsIwABAGYmAQAsIwABAG8m" +
           "AQAAABVgiQoCAAAAAAACAAAASWQBADImAC4ARDImAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcA" +
           "AABRdWFsaXR5AQA6JgAvAQAqIzomAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VU" +
           "aW1lc3RhbXABADsmAC4ARDsmAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZl" +
           "cml0eQEAPCYALwEAKiM8JgAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0" +
           "YW1wAQA9JgAuAEQ9JgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQA+JgAv" +
           "AQAqIz4mAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAD8mAC4A" +
           "RD8mAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAQCYALgBEQCYA" +
           "AAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAEImAC8BAEQjQiYAAAEBAQAAAAEA" +
           "+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAQSYALwEAQyNBJgAAAQEBAAAAAQD5CwABAPMK" +
           "AAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAQyYALwEARSNDJgAAAQEBAAAAAQD5CwABAA0LAQAA" +
           "ABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEQmAC4AREQmAACWAgAAAAEAKgEBRgAAAAcAAABF" +
           "dmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29t" +
           "bWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBh" +
           "ZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2VkU3Rh" +
           "dGUBAEcmAC8BACMjRyYAAAAV/////wEBAQAAAAEALCMBAQAxJgEAAAAVYIkKAgAAAAAAAgAAAElkAQBI" +
           "JgAuAERIJgAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAFkmAC8BAJcj" +
           "WSYAAAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBaJgAuAERa" +
           "JgAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmll" +
           "ciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAA" +
           "AAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8AAAAA" +
           "FWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEAXSYALwEAIyNdJgAAABX/////AQECAAAAAQAsIwEBADEm" +
           "AQAsIwABAJYmAQAAABVgiQoCAAAAAAACAAAASWQBAF4mAC4ARF4mAAAAAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAkAAABJbnB1dE5vZGUBAIMrAC4ARIMrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMA" +
           "AABTdXBwcmVzc2VkT3JTaGVsdmVkAQCUJgAuAESUJgAAAAH/////AQH/////AAAAAARggAoBAAAAAAAK" +
           "AAAATGltaXRTdGF0ZQEAliYALwEAZiSWJgAAAQAAAAEALCMBAQBdJgEAAAAVYIkKAgAAAAAADAAAAEN1" +
           "cnJlbnRTdGF0ZQEAlyYALwEAyAqXJgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBAJgm" +
           "AC4ARJgmAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABTZXRwb2ludE5vZGUBALEmAC4ARLEm" +
           "AAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> SetpointNode
        {
            get
            {
                return m_setpointNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_setpointNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_setpointNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_setpointNode != null)
            {
                children.Add(m_setpointNode);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SetpointNode:
                {
                    if (createOrReplace)
                    {
                        if (SetpointNode == null)
                        {
                            if (replacement == null)
                            {
                                SetpointNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                SetpointNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = SetpointNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_setpointNode;
        #endregion
    }
    #endif
    #endregion

    #region NonExclusiveRateOfChangeAlarmState Class
    #if (!OPCUA_EXCLUDE_NonExclusiveRateOfChangeAlarmState)
    /// <summary>
    /// Stores an instance of the NonExclusiveRateOfChangeAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class NonExclusiveRateOfChangeAlarmState : NonExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public NonExclusiveRateOfChangeAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.NonExclusiveRateOfChangeAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKQAAAE5vbkV4Y2x1c2l2ZVJhdGVPZkNoYW5nZUFsYXJtVHlwZUluc3Rh" +
           "bmNlAQDmJwEA5if/////GwAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA5ycALgBE5ycAAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA6CcALgBE6CcAAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAOknAC4AROknAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAQDqJwAuAETqJwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQEA6ycALgBE6ycAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAOwn" +
           "AC4AROwnAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA7ScALgBE7ScA" +
           "AAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA7icALgBE7icAAAAV/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDvJwAuAETvJwAAAAX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAiisALgBEiisAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAiysALgBEiysAAAAV/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADQAAAENvbmRpdGlvbk5hbWUBAPAnAC4ARPAnAAAADP////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAgAAABCcmFuY2hJZAEA8ScALgBE8ScAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFp" +
           "bgEA8icALgBE8icAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEA8ycA" +
           "LwEAIyPzJwAAABX/////AQEFAAAAAQAsIwABAAkoAQAsIwABABIoAQAsIwABAB8oAQAsIwABACgoAQAs" +
           "IwABADEoAQAAABVgiQoCAAAAAAACAAAASWQBAPQnAC4ARPQnAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAcAAABRdWFsaXR5AQD8JwAvAQAqI/wnAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABT" +
           "b3VyY2VUaW1lc3RhbXABAP0nAC4ARP0nAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExh" +
           "c3RTZXZlcml0eQEA/icALwEAKiP+JwAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNl" +
           "VGltZXN0YW1wAQD/JwAuAET/JwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50" +
           "AQAAKAAvAQAqIwAoAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXAB" +
           "AAEoAC4ARAEoAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAAigA" +
           "LgBEAigAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAAQoAC8BAEQjBCgAAAEB" +
           "AQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAAygALwEAQyMDKAAAAQEBAAAAAQD5" +
           "CwABAPMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEABSgALwEARSMFKAAAAQEBAAAAAQD5CwAB" +
           "AA0LAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAYoAC4ARAYoAACWAgAAAAEAKgEBRgAA" +
           "AAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQg" +
           "dG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVu" +
           "dCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFj" +
           "a2VkU3RhdGUBAAkoAC8BACMjCSgAAAAV/////wEBAQAAAAEALCMBAQDzJwEAAAAVYIkKAgAAAAAAAgAA" +
           "AElkAQAKKAAuAEQKKAAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBABso" +
           "AC8BAJcjGygAAAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAc" +
           "KAAuAEQcKAAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRl" +
           "bnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8A" +
           "AAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf//" +
           "//8AAAAAFWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEAHygALwEAIyMfKAAAABX/////AQEFAAAAAQAs" +
           "IwEBAPMnAQAsIwABAFgoAQAsIwABAGEoAQAsIwABAGooAQAsIwABAHMoAQAAABVgiQoCAAAAAAACAAAA" +
           "SWQBACAoAC4ARCAoAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5vZGUBAIwrAC4A" +
           "RIwrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBwcmVzc2VkT3JTaGVsdmVkAQBWKAAu" +
           "AERWKAAAAAH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ExclusiveRateOfChangeAlarmState Class
    #if (!OPCUA_EXCLUDE_ExclusiveRateOfChangeAlarmState)
    /// <summary>
    /// Stores an instance of the ExclusiveRateOfChangeAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ExclusiveRateOfChangeAlarmState : ExclusiveLimitAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ExclusiveRateOfChangeAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ExclusiveRateOfChangeAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAEV4Y2x1c2l2ZVJhdGVPZkNoYW5nZUFsYXJtVHlwZUluc3RhbmNl" +
           "AQCXJQEAlyX/////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAmCUALgBEmCUAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAmSUALgBEmSUAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAJolAC4ARJolAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQCbJQAuAESbJQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "nCUALgBEnCUAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAJ0lAC4A" +
           "RJ0lAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAniUALgBEniUAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAnyUALgBEnyUAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCgJQAuAESgJQAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAfisALgBEfisAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAfysALgBEfysAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUBAKElAC4ARKElAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABCcmFuY2hJZAEAoiUALgBEoiUAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA" +
           "oyUALgBEoyUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEApCUALwEA" +
           "IyOkJQAAABX/////AQEFAAAAAQAsIwABALolAQAsIwABAMMlAQAsIwABANAlAQAsIwABANklAQAsIwAB" +
           "AOIlAQAAABVgiQoCAAAAAAACAAAASWQBAKUlAC4ARKUlAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABRdWFsaXR5AQCtJQAvAQAqI60lAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAK4lAC4ARK4lAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RT" +
           "ZXZlcml0eQEAryUALwEAKiOvJQAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQCwJQAuAESwJQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQCx" +
           "JQAvAQAqI7ElAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABALIl" +
           "AC4ARLIlAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAsyUALgBE" +
           "syUAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBALUlAC8BAEQjtSUAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAtCUALwEAQyO0JQAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAtiUALwEARSO2JQAAAQEBAAAAAQD5CwABAA0L" +
           "AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBALclAC4ARLclAACWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2Vk" +
           "U3RhdGUBALolAC8BACMjuiUAAAAV/////wEBAQAAAAEALCMBAQCkJQEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQC7JQAuAES7JQAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAMwlAC8B" +
           "AJcjzCUAAAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDNJQAu" +
           "AETNJQAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRp" +
           "ZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAA" +
           "AwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEA0CUALwEAIyPQJQAAABX/////AQECAAAAAQAsIwEB" +
           "AKQlAQAsIwABAAkmAQAAABVgiQoCAAAAAAACAAAASWQBANElAC4ARNElAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAkAAABJbnB1dE5vZGUBAIArAC4ARIArAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABMAAABTdXBwcmVzc2VkT3JTaGVsdmVkAQAHJgAuAEQHJgAAAAH/////AQH/////AAAAAARggAoBAAAA" +
           "AAAKAAAATGltaXRTdGF0ZQEACSYALwEAZiQJJgAAAQAAAAEALCMBAQDQJQEAAAAVYIkKAgAAAAAADAAA" +
           "AEN1cnJlbnRTdGF0ZQEACiYALwEAyAoKJgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQB" +
           "AAsmAC4ARAsmAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region DiscreteAlarmState Class
    #if (!OPCUA_EXCLUDE_DiscreteAlarmState)
    /// <summary>
    /// Stores an instance of the DiscreteAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class DiscreteAlarmState : AlarmConditionState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public DiscreteAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.DiscreteAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGQAAAERpc2NyZXRlQWxhcm1UeXBlSW5zdGFuY2UBABspAQAbKf////8b" +
           "AAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAcKQAuAEQcKQAAAA//////AQH/////AAAAABVgiQoCAAAA" +
           "AAAJAAAARXZlbnRUeXBlAQAdKQAuAEQdKQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291" +
           "cmNlTm9kZQEAHikALgBEHikAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJjZU5hbWUB" +
           "AB8pAC4ARB8pAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQAgKQAuAEQgKQAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAISkALgBEISkAAAEAJgH/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAiKQAuAEQiKQAAAQDQIv////8BAf////8A" +
           "AAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAjKQAuAEQjKQAAABX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAIAAAAU2V2ZXJpdHkBACQpAC4ARCQpAAAABf////8BAf////8AAAAAFWCJCgIAAAAAABAAAABDb25k" +
           "aXRpb25DbGFzc0lkAQCQKwAuAESQKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ29uZGl0" +
           "aW9uQ2xhc3NOYW1lAQCRKwAuAESRKwAAABX/////AQH/////AAAAABVgiQoCAAAAAAANAAAAQ29uZGl0" +
           "aW9uTmFtZQEAJSkALgBEJSkAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAEJyYW5jaElkAQAm" +
           "KQAuAEQmKQAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAAUmV0YWluAQAnKQAuAEQnKQAAAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAMAAAARW5hYmxlZFN0YXRlAQAoKQAvAQAjIygpAAAAFf////8B" +
           "AQUAAAABACwjAAEAPikBACwjAAEARykBACwjAAEAVCkBACwjAAEAXSkBACwjAAEAZikBAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAEAKSkALgBEKSkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAFF1YWxpdHkB" +
           "ADEpAC8BACojMSkAAAAT/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEA" +
           "MikALgBEMikAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAATGFzdFNldmVyaXR5AQAzKQAv" +
           "AQAqIzMpAAAABf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABADQpAC4A" +
           "RDQpAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAENvbW1lbnQBADUpAC8BACojNSkAAAAV" +
           "/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEANikALgBENikAAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQA3KQAuAEQ3KQAAAAz/////AQH/" +
           "////AAAAAARhggoEAAAAAAAHAAAARGlzYWJsZQEAOSkALwEARCM5KQAAAQEBAAAAAQD5CwABAPMKAAAA" +
           "AARhggoEAAAAAAAGAAAARW5hYmxlAQA4KQAvAQBDIzgpAAABAQEAAAABAPkLAAEA8woAAAAABGGCCgQA" +
           "AAAAAAoAAABBZGRDb21tZW50AQA6KQAvAQBFIzopAAABAQEAAAABAPkLAAEADQsBAAAAFWCpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAOykALgBEOykAAJYCAAAAAQAqAQFGAAAABwAAAEV2ZW50SWQAD///" +
           "//8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVudCB0byBjb21tZW50LgEAKgEB" +
           "QgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21tZW50IHRvIGFkZCB0byB0aGUg" +
           "Y29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAQWNrZWRTdGF0ZQEAPikALwEA" +
           "IyM+KQAAABX/////AQEBAAAAAQAsIwEBACgpAQAAABVgiQoCAAAAAAACAAAASWQBAD8pAC4ARD8pAAAA" +
           "Af////8BAf////8AAAAABGGCCgQAAAAAAAsAAABBY2tub3dsZWRnZQEAUCkALwEAlyNQKQAAAQEBAAAA" +
           "AQD5CwABAPAiAQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFEpAC4ARFEpAACWAgAAAAEA" +
           "KgEBRgAAAAcAAABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUg" +
           "ZXZlbnQgdG8gY29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUg" +
           "Y29tbWVudCB0byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAA" +
           "CwAAAEFjdGl2ZVN0YXRlAQBUKQAvAQAjI1QpAAAAFf////8BAQEAAAABACwjAQEAKCkBAAAAFWCJCgIA" +
           "AAAAAAIAAABJZAEAVSkALgBEVSkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAElucHV0Tm9k" +
           "ZQEAkisALgBEkisAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFN1cHByZXNzZWRPclNoZWx2" +
           "ZWQBAIspAC4ARIspAAAAAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region OffNormalAlarmState Class
    #if (!OPCUA_EXCLUDE_OffNormalAlarmState)
    /// <summary>
    /// Stores an instance of the OffNormalAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OffNormalAlarmState : DiscreteAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OffNormalAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.OffNormalAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGgAAAE9mZk5vcm1hbEFsYXJtVHlwZUluc3RhbmNlAQCNKQEAjSn/////" +
           "HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAjikALgBEjikAAAAP/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACQAAAEV2ZW50VHlwZQEAjykALgBEjykAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5vZGUBAJApAC4ARJApAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VOYW1l" +
           "AQCRKQAuAESRKQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAkikALgBEkikAAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAJMpAC4ARJMpAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAlCkALgBElCkAAAEA0CL/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAlSkALgBElSkAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACAAAAFNldmVyaXR5AQCWKQAuAESWKQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAQAAAAQ29u" +
           "ZGl0aW9uQ2xhc3NJZAEAkysALgBEkysAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENvbmRp" +
           "dGlvbkNsYXNzTmFtZQEAlCsALgBElCsAAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADQAAAENvbmRp" +
           "dGlvbk5hbWUBAJcpAC4ARJcpAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFuY2hJZAEA" +
           "mCkALgBEmCkAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEAmSkALgBEmSkAAAAB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAmikALwEAIyOaKQAAABX/////" +
           "AQEFAAAAAQAsIwABALApAQAsIwABALkpAQAsIwABAMYpAQAsIwABAM8pAQAsIwABANgpAQAAABVgiQoC" +
           "AAAAAAACAAAASWQBAJspAC4ARJspAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABRdWFsaXR5" +
           "AQCjKQAvAQAqI6MpAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXAB" +
           "AKQpAC4ARKQpAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0eQEApSkA" +
           "LwEAKiOlKQAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQCmKQAu" +
           "AESmKQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQCnKQAvAQAqI6cpAAAA" +
           "Ff////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAKgpAC4ARKgpAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAqSkALgBEqSkAAAAM/////wEB" +
           "/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAKspAC8BAEQjqykAAAEBAQAAAAEA+QsAAQDzCgAA" +
           "AAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAqikALwEAQyOqKQAAAQEBAAAAAQD5CwABAPMKAAAAAARhggoE" +
           "AAAAAAAKAAAAQWRkQ29tbWVudAEArCkALwEARSOsKQAAAQEBAAAAAQD5CwABAA0LAQAAABVgqQoCAAAA" +
           "AAAOAAAASW5wdXRBcmd1bWVudHMBAK0pAC4ARK0pAACWAgAAAAEAKgEBRgAAAAcAAABFdmVudElkAA//" +
           "////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVudC4BACoB" +
           "AUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQgdG8gdGhl" +
           "IGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUBALApAC8B" +
           "ACMjsCkAAAAV/////wEBAQAAAAEALCMBAQCaKQEAAAAVYIkKAgAAAAAAAgAAAElkAQCxKQAuAESxKQAA" +
           "AAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAMIpAC8BAJcjwikAAAEBAQAA" +
           "AAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDDKQAuAETDKQAAlgIAAAAB" +
           "ACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhl" +
           "IGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhl" +
           "IGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAA" +
           "AAsAAABBY3RpdmVTdGF0ZQEAxikALwEAIyPGKQAAABX/////AQEBAAAAAQAsIwEBAJopAQAAABVgiQoC" +
           "AAAAAAACAAAASWQBAMcpAC4ARMcpAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABJbnB1dE5v" +
           "ZGUBAJUrAC4ARJUrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBwcmVzc2VkT3JTaGVs" +
           "dmVkAQD9KQAuAET9KQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAALAAAATm9ybWFsU3RhdGUBAJYr" +
           "AC4ARJYrAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> NormalState
        {
            get
            {
                return m_normalState;
            }

            set
            {
                if (!Object.ReferenceEquals(m_normalState, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_normalState = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_normalState != null)
            {
                children.Add(m_normalState);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.NormalState:
                {
                    if (createOrReplace)
                    {
                        if (NormalState == null)
                        {
                            if (replacement == null)
                            {
                                NormalState = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                NormalState = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = NormalState;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_normalState;
        #endregion
    }
    #endif
    #endregion

    #region SystemOffNormalAlarmState Class
    #if (!OPCUA_EXCLUDE_SystemOffNormalAlarmState)
    /// <summary>
    /// Stores an instance of the SystemOffNormalAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemOffNormalAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemOffNormalAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemOffNormalAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIAAAAFN5c3RlbU9mZk5vcm1hbEFsYXJtVHlwZUluc3RhbmNlAQDpLQEA" +
           "6S3/////HAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA6i0ALgBE6i0AAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA6y0ALgBE6y0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUBAOwtAC4AROwtAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOYW1lAQDtLQAuAETtLQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA7i0ALgBE" +
           "7i0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAO8tAC4ARO8tAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA8C0ALgBE8C0AAAEA0CL/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA8S0ALgBE8S0AAAAV/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACAAAAFNldmVyaXR5AQDyLQAuAETyLQAAAAX/////AQH/////AAAAABVgiQoCAAAAAAAQ" +
           "AAAAQ29uZGl0aW9uQ2xhc3NJZAEA8y0ALgBE8y0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEgAA" +
           "AENvbmRpdGlvbkNsYXNzTmFtZQEA9C0ALgBE9C0AAAAV/////wEB/////wAAAAAVYIkKAgAAAAAADQAA" +
           "AENvbmRpdGlvbk5hbWUBAPUtAC4ARPUtAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABCcmFu" +
           "Y2hJZAEA9i0ALgBE9i0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA9y0ALgBE" +
           "9y0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEA+C0ALwEAIyP4LQAA" +
           "ABX/////AQEFAAAAAQAsIwABAA4uAQAsIwABABcuAQAsIwABACQuAQAsIwABAC4uAQAsIwABADcuAQAA" +
           "ABVgiQoCAAAAAAACAAAASWQBAPktAC4ARPktAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABR" +
           "dWFsaXR5AQABLgAvAQAqIwEuAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1l" +
           "c3RhbXABAAIuAC4ARAIuAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RTZXZlcml0" +
           "eQEAAy4ALwEAKiMDLgAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1w" +
           "AQAELgAuAEQELgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQAFLgAvAQAq" +
           "IwUuAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAAYuAC4ARAYu" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEABy4ALgBEBy4AAAAM" +
           "/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAAguAC8BAEQjCC4AAAEBAQAAAAEA+QsA" +
           "AQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEACS4ALwEAQyMJLgAAAQEBAAAAAQD5CwABAPMKAAAA" +
           "AARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEACi4ALwEARSMKLgAAAQEBAAAAAQD5CwABAA0LAQAAABVg" +
           "qQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAsuAC4ARAsuAACWAgAAAAEAKgEBRgAAAAcAAABFdmVu" +
           "dElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8gY29tbWVu" +
           "dC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0byBhZGQg" +
           "dG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2VkU3RhdGUB" +
           "AA4uAC8BACMjDi4AAAAV/////wEBAQAAAAEALCMBAQD4LQEAAAAVYIkKAgAAAAAAAgAAAElkAQAPLgAu" +
           "AEQPLgAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBACAuAC8BAJcjIC4A" +
           "AAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAhLgAuAEQhLgAA" +
           "lgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRpZmllciBm" +
           "b3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAk" +
           "AAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8AAAAAFWCJ" +
           "CgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEAJC4ALwEAIyMkLgAAABX/////AQEBAAAAAQAsIwEBAPgtAQAA" +
           "ABVgiQoCAAAAAAACAAAASWQBACUuAC4ARCUuAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABJ" +
           "bnB1dE5vZGUBAC0uAC4ARC0uAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBwcmVzc2Vk" +
           "T3JTaGVsdmVkAQBILgAuAERILgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAALAAAATm9ybWFsU3Rh" +
           "dGUBAEouAC4AREouAAAAEf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region CertificateExpirationAlarmState Class
    #if (!OPCUA_EXCLUDE_CertificateExpirationAlarmState)
    /// <summary>
    /// Stores an instance of the CertificateExpirationAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateExpirationAlarmState : SystemOffNormalAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateExpirationAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateExpirationAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ExpirationLimit != null)
            {
                ExpirationLimit.Initialize(context, ExpirationLimit_InitializationString);
            }
        }

        #region Initialization String
        private const string ExpirationLimit_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAEV4cGlyYXRpb25MaW1pdAEANDoALgBENDoAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAENlcnRpZmljYXRlRXhwaXJhdGlvbkFsYXJtVHlwZUluc3RhbmNl" +
           "AQCpMwEAqTP/////IAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAqjMALgBEqjMAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAqzMALgBEqzMAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAKwzAC4ARKwzAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQCtMwAuAEStMwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "rjMALgBErjMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAK8zAC4A" +
           "RK8zAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAsDMALgBEsDMAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAsTMALgBEsTMAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQCyMwAuAESyMwAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAQAAAAQ29uZGl0aW9uQ2xhc3NJZAEAszMALgBEszMAAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEgAAAENvbmRpdGlvbkNsYXNzTmFtZQEAtDMALgBEtDMAAAAV/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAADQAAAENvbmRpdGlvbk5hbWUBALUzAC4ARLUzAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABCcmFuY2hJZAEAtjMALgBEtjMAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAFJldGFpbgEA" +
           "tzMALgBEtzMAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAEVuYWJsZWRTdGF0ZQEAuDMALwEA" +
           "IyO4MwAAABX/////AQEFAAAAAQAsIwABANAzAQAsIwABANkzAQAsIwABAOYzAQAsIwABAPAzAQAsIwAB" +
           "APkzAQAAABVgiQoCAAAAAAACAAAASWQBALkzAC4ARLkzAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAcAAABRdWFsaXR5AQDBMwAvAQAqI8EzAAAAE/////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3Vy" +
           "Y2VUaW1lc3RhbXABAMIzAC4ARMIzAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAExhc3RT" +
           "ZXZlcml0eQEAwzMALwEAKiPDMwAAAAX/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGlt" +
           "ZXN0YW1wAQDEMwAuAETEMwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQDF" +
           "MwAvAQAqI8UzAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAA8AAABTb3VyY2VUaW1lc3RhbXABAMYz" +
           "AC4ARMYzAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEAxzMALgBE" +
           "xzMAAAAM/////wEB/////wAAAAAEYYIKBAAAAAAABwAAAERpc2FibGUBAMgzAC8BAEQjyDMAAAEBAQAA" +
           "AAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAABgAAAEVuYWJsZQEAyTMALwEAQyPJMwAAAQEBAAAAAQD5CwAB" +
           "APMKAAAAAARhggoEAAAAAAAKAAAAQWRkQ29tbWVudAEAyjMALwEARSPKMwAAAQEBAAAAAQD5CwABAA0L" +
           "AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMszAC4ARMszAACWAgAAAAEAKgEBRgAAAAcA" +
           "AABFdmVudElkAA//////AAAAAAMAAAAAKAAAAFRoZSBpZGVudGlmaWVyIGZvciB0aGUgZXZlbnQgdG8g" +
           "Y29tbWVudC4BACoBAUIAAAAHAAAAQ29tbWVudAAV/////wAAAAADAAAAACQAAABUaGUgY29tbWVudCB0" +
           "byBhZGQgdG8gdGhlIGNvbmRpdGlvbi4BACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAACgAAAEFja2Vk" +
           "U3RhdGUBANAzAC8BACMj0DMAAAAV/////wEBAQAAAAEALCMBAQC4MwEAAAAVYIkKAgAAAAAAAgAAAElk" +
           "AQDRMwAuAETRMwAAAAH/////AQH/////AAAAAARhggoEAAAAAAALAAAAQWNrbm93bGVkZ2UBAOIzAC8B" +
           "AJcj4jMAAAEBAQAAAAEA+QsAAQDwIgEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDjMwAu" +
           "AETjMwAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAAAAADAAAAACgAAABUaGUgaWRlbnRp" +
           "ZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAABwAAAENvbW1lbnQAFf////8AAAAA" +
           "AwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25kaXRpb24uAQAoAQEAAAABAf////8A" +
           "AAAAFWCJCgIAAAAAAAsAAABBY3RpdmVTdGF0ZQEA5jMALwEAIyPmMwAAABX/////AQEBAAAAAQAsIwEB" +
           "ALgzAQAAABVgiQoCAAAAAAACAAAASWQBAOczAC4AROczAAAAAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAkAAABJbnB1dE5vZGUBAO8zAC4ARO8zAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABTdXBw" +
           "cmVzc2VkT3JTaGVsdmVkAQAKNAAuAEQKNAAAAAH/////AQH/////AAAAABVgiQoCAAAAAAALAAAATm9y" +
           "bWFsU3RhdGUBAAw0AC4ARAw0AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABFeHBpcmF0aW9u" +
           "RGF0ZQEADTQALgBEDTQAAAAN/////wEB/////wAAAAAVYIkKAgAAAAAADwAAAEV4cGlyYXRpb25MaW1p" +
           "dAEANDoALgBENDoAAAEAIgH/////AQH/////AAAAABVgiQoCAAAAAAAPAAAAQ2VydGlmaWNhdGVUeXBl" +
           "AQAONAAuAEQONAAAABH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAQ2VydGlmaWNhdGUBAA80AC4A" +
           "RA80AAAAD/////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> ExpirationDate
        {
            get
            {
                return m_expirationDate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expirationDate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expirationDate = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExpirationLimit
        {
            get
            {
                return m_expirationLimit;
            }

            set
            {
                if (!Object.ReferenceEquals(m_expirationLimit, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_expirationLimit = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> CertificateType
        {
            get
            {
                return m_certificateType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateType = value;
            }
        }

        /// <remarks />
        public PropertyState<byte[]> Certificate
        {
            get
            {
                return m_certificate;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificate, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificate = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_expirationDate != null)
            {
                children.Add(m_expirationDate);
            }

            if (m_expirationLimit != null)
            {
                children.Add(m_expirationLimit);
            }

            if (m_certificateType != null)
            {
                children.Add(m_certificateType);
            }

            if (m_certificate != null)
            {
                children.Add(m_certificate);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ExpirationDate:
                {
                    if (createOrReplace)
                    {
                        if (ExpirationDate == null)
                        {
                            if (replacement == null)
                            {
                                ExpirationDate = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                ExpirationDate = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = ExpirationDate;
                    break;
                }

                case Opc.Ua.BrowseNames.ExpirationLimit:
                {
                    if (createOrReplace)
                    {
                        if (ExpirationLimit == null)
                        {
                            if (replacement == null)
                            {
                                ExpirationLimit = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExpirationLimit = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExpirationLimit;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateType:
                {
                    if (createOrReplace)
                    {
                        if (CertificateType == null)
                        {
                            if (replacement == null)
                            {
                                CertificateType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateType;
                    break;
                }

                case Opc.Ua.BrowseNames.Certificate:
                {
                    if (createOrReplace)
                    {
                        if (Certificate == null)
                        {
                            if (replacement == null)
                            {
                                Certificate = new PropertyState<byte[]>(this);
                            }
                            else
                            {
                                Certificate = (PropertyState<byte[]>)replacement;
                            }
                        }
                    }

                    instance = Certificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_expirationDate;
        private PropertyState<double> m_expirationLimit;
        private PropertyState<NodeId> m_certificateType;
        private PropertyState<byte[]> m_certificate;
        #endregion
    }
    #endif
    #endregion

    #region TripAlarmState Class
    #if (!OPCUA_EXCLUDE_TripAlarmState)
    /// <summary>
    /// Stores an instance of the TripAlarmType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TripAlarmState : OffNormalAlarmState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TripAlarmState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TripAlarmType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFQAAAFRyaXBBbGFybVR5cGVJbnN0YW5jZQEA/ykBAP8p/////xwAAAAV" +
           "YIkKAgAAAAAABwAAAEV2ZW50SWQBAAAqAC4ARAAqAAAAD/////8BAf////8AAAAAFWCJCgIAAAAAAAkA" +
           "AABFdmVudFR5cGUBAAEqAC4ARAEqAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "b2RlAQACKgAuAEQCKgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFtZQEAAyoA" +
           "LgBEAyoAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAAQqAC4ARAQqAAABACYB////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQAFKgAuAEQFKgAAAQAmAf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAAYqAC4ARAYqAAABANAi/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAABwAAAE1lc3NhZ2UBAAcqAC4ARAcqAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXZlcml0eQEACCoALgBECCoAAAAF/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENvbmRpdGlv" +
           "bkNsYXNzSWQBAJcrAC4ARJcrAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDb25kaXRpb25D" +
           "bGFzc05hbWUBAJgrAC4ARJgrAAAAFf////8BAf////8AAAAAFWCJCgIAAAAAAA0AAABDb25kaXRpb25O" +
           "YW1lAQAJKgAuAEQJKgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAQnJhbmNoSWQBAAoqAC4A" +
           "RAoqAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAYAAABSZXRhaW4BAAsqAC4ARAsqAAAAAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABFbmFibGVkU3RhdGUBAAwqAC8BACMjDCoAAAAV/////wEBBQAA" +
           "AAEALCMAAQAiKgEALCMAAQArKgEALCMAAQA4KgEALCMAAQBBKgEALCMAAQBKKgEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQANKgAuAEQNKgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAUXVhbGl0eQEAFSoA" +
           "LwEAKiMVKgAAABP/////AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQAWKgAu" +
           "AEQWKgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABMYXN0U2V2ZXJpdHkBABcqAC8BACoj" +
           "FyoAAAAF/////wEB/////wEAAAAVYIkKAgAAAAAADwAAAFNvdXJjZVRpbWVzdGFtcAEAGCoALgBEGCoA" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEAGSoALwEAKiMZKgAAABX/////" +
           "AQH/////AQAAABVgiQoCAAAAAAAPAAAAU291cmNlVGltZXN0YW1wAQAaKgAuAEQaKgAAAQAmAf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQBABsqAC4ARBsqAAAADP////8BAf////8A" +
           "AAAABGGCCgQAAAAAAAcAAABEaXNhYmxlAQAdKgAvAQBEIx0qAAABAQEAAAABAPkLAAEA8woAAAAABGGC" +
           "CgQAAAAAAAYAAABFbmFibGUBABwqAC8BAEMjHCoAAAEBAQAAAAEA+QsAAQDzCgAAAAAEYYIKBAAAAAAA" +
           "CgAAAEFkZENvbW1lbnQBAB4qAC8BAEUjHioAAAEBAQAAAAEA+QsAAQANCwEAAAAVYKkKAgAAAAAADgAA" +
           "AElucHV0QXJndW1lbnRzAQAfKgAuAEQfKgAAlgIAAAABACoBAUYAAAAHAAAARXZlbnRJZAAP/////wAA" +
           "AAADAAAAACgAAABUaGUgaWRlbnRpZmllciBmb3IgdGhlIGV2ZW50IHRvIGNvbW1lbnQuAQAqAQFCAAAA" +
           "BwAAAENvbW1lbnQAFf////8AAAAAAwAAAAAkAAAAVGhlIGNvbW1lbnQgdG8gYWRkIHRvIHRoZSBjb25k" +
           "aXRpb24uAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAAAAoAAABBY2tlZFN0YXRlAQAiKgAvAQAjIyIq" +
           "AAAAFf////8BAQEAAAABACwjAQEADCoBAAAAFWCJCgIAAAAAAAIAAABJZAEAIyoALgBEIyoAAAAB////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAACwAAAEFja25vd2xlZGdlAQA0KgAvAQCXIzQqAAABAQEAAAABAPkL" +
           "AAEA8CIBAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEANSoALgBENSoAAJYCAAAAAQAqAQFG" +
           "AAAABwAAAEV2ZW50SWQAD/////8AAAAAAwAAAAAoAAAAVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBldmVu" +
           "dCB0byBjb21tZW50LgEAKgEBQgAAAAcAAABDb21tZW50ABX/////AAAAAAMAAAAAJAAAAFRoZSBjb21t" +
           "ZW50IHRvIGFkZCB0byB0aGUgY29uZGl0aW9uLgEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAALAAAA" +
           "QWN0aXZlU3RhdGUBADgqAC8BACMjOCoAAAAV/////wEBAQAAAAEALCMBAQAMKgEAAAAVYIkKAgAAAAAA" +
           "AgAAAElkAQA5KgAuAEQ5KgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAASW5wdXROb2RlAQCZ" +
           "KwAuAESZKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAATAAAAU3VwcHJlc3NlZE9yU2hlbHZlZAEA" +
           "byoALgBEbyoAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAE5vcm1hbFN0YXRlAQCaKwAuAESa" +
           "KwAAABH/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region BaseConditionClassState Class
    #if (!OPCUA_EXCLUDE_BaseConditionClassState)
    /// <summary>
    /// Stores an instance of the BaseConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class BaseConditionClassState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public BaseConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.BaseConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHgAAAEJhc2VDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEAmysBAJsr" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProcessConditionClassState Class
    #if (!OPCUA_EXCLUDE_ProcessConditionClassState)
    /// <summary>
    /// Stores an instance of the ProcessConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProcessConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProcessConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProcessConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIQAAAFByb2Nlc3NDb25kaXRpb25DbGFzc1R5cGVJbnN0YW5jZQEAnCsB" +
           "AJwr/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region MaintenanceConditionClassState Class
    #if (!OPCUA_EXCLUDE_MaintenanceConditionClassState)
    /// <summary>
    /// Stores an instance of the MaintenanceConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class MaintenanceConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public MaintenanceConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.MaintenanceConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJQAAAE1haW50ZW5hbmNlQ29uZGl0aW9uQ2xhc3NUeXBlSW5zdGFuY2UB" +
           "AJ0rAQCdK/////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region SystemConditionClassState Class
    #if (!OPCUA_EXCLUDE_SystemConditionClassState)
    /// <summary>
    /// Stores an instance of the SystemConditionClassType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class SystemConditionClassState : BaseConditionClassState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public SystemConditionClassState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.SystemConditionClassType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIAAAAFN5c3RlbUNvbmRpdGlvbkNsYXNzVHlwZUluc3RhbmNlAQCeKwEA" +
           "niv/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAEF1ZGl0Q29uZGl0aW9uRXZlbnRUeXBlSW5zdGFuY2UBAOYKAQDm" +
           "Cv////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQCcDwAuAEScDwAAAA//////AQH/////AAAAABVg" +
           "iQoCAAAAAAAJAAAARXZlbnRUeXBlAQCdDwAuAESdDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTm9kZQEAng8ALgBEng8AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNvdXJj" +
           "ZU5hbWUBAJ8PAC4ARJ8PAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQCgDwAuAESg" +
           "DwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAoQ8ALgBEoQ8AAAEA" +
           "JgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQCiDwAuAESiDwAAAQDQIv////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQCjDwAuAESjDwAAABX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAU2V2ZXJpdHkBAKQPAC4ARKQPAAAABf////8BAf////8AAAAAFWCJCgIAAAAAAA8A" +
           "AABBY3Rpb25UaW1lU3RhbXABAKUPAC4ARKUPAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAABgAA" +
           "AFN0YXR1cwEApg8ALgBEpg8AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZlcklkAQCn" +
           "DwAuAESnDwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRyeUlkAQCo" +
           "DwAuAESoDwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQCpDwAuAESp" +
           "DwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAKoPAC4ARKoPAAAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAqw8ALgBEqw8AAAAYAQAAAAEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionEnableEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionEnableEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionEnableEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionEnableEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionEnableEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionEnableEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJQAAAEF1ZGl0Q29uZGl0aW9uRW5hYmxlRXZlbnRUeXBlSW5zdGFuY2UB" +
           "APMKAQDzCv////8QAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAKEAAuAEQKEAAAAA//////AQH/////" +
           "AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQALEAAuAEQLEAAAABH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAKAAAAU291cmNlTm9kZQEADBAALgBEDBAAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5hbWUBAA0QAC4ARA0QAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQAO" +
           "EAAuAEQOEAAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEADxAALgBE" +
           "DxAAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAQEAAuAEQQEAAAAQDQ" +
           "Iv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAREAAuAEQREAAAABX/////AQH/////" +
           "AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBABIQAC4ARBIQAAAABf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAA8AAABBY3Rpb25UaW1lU3RhbXABABMQAC4ARBMQAAABACYB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAABgAAAFN0YXR1cwEAFBAALgBEFBAAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNlcnZl" +
           "cklkAQAVEAAuAEQVEAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRFbnRy" +
           "eUlkAQAWEAAuAEQWEAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklkAQAX" +
           "EAAuAEQXEAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBABgQAC4ARBgQAAAA" +
           "Ef////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAGRAALgBEGRAAAAAYAQAA" +
           "AAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionCommentEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionCommentEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionCommentEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionCommentEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionCommentEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionCommentEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uQ29tbWVudEV2ZW50VHlwZUluc3RhbmNl" +
           "AQANCwEADQv/////EQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAShAALgBEShAAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEASxAALgBESxAAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAEwQAC4AREwQAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQBNEAAuAERNEAAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "ThAALgBEThAAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAE8QAC4A" +
           "RE8QAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAUBAALgBEUBAAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAURAALgBEURAAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQBSEAAuAERSEAAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQBTEAAuAERTEAAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABTdGF0dXMBAFQQAC4ARFQQAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2" +
           "ZXJJZAEAVRAALgBEVRAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50" +
           "cnlJZAEAVhAALgBEVhAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA" +
           "VxAALgBEVxAAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQBYEAAuAERYEAAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAFkQAC4ARFkQAAAAGAEA" +
           "AAABAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQBLLgAuAERLLgAAABX/////AQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionRespondEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionRespondEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionRespondEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionRespondEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionRespondEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionRespondEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uUmVzcG9uZEV2ZW50VHlwZUluc3RhbmNl" +
           "AQDfIgEA3yL/////EQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA4CIALgBE4CIAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA4SIALgBE4SIAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAOIiAC4AROIiAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQDjIgAuAETjIgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "5CIALgBE5CIAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAOUiAC4A" +
           "ROUiAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA5iIALgBE5iIAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA5yIALgBE5yIAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQDoIgAuAEToIgAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQDpIgAuAETpIgAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABTdGF0dXMBAOoiAC4AROoiAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2" +
           "ZXJJZAEA6yIALgBE6yIAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50" +
           "cnlJZAEA7CIALgBE7CIAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA" +
           "7SIALgBE7SIAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQDuIgAuAETuIgAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAO8iAC4ARO8iAAAAGAEA" +
           "AAABAf////8AAAAAFWCJCgIAAAAAABAAAABTZWxlY3RlZFJlc3BvbnNlAQBMLgAuAERMLgAAAAb/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<int> SelectedResponse
        {
            get
            {
                return m_selectedResponse;
            }

            set
            {
                if (!Object.ReferenceEquals(m_selectedResponse, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_selectedResponse = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_selectedResponse != null)
            {
                children.Add(m_selectedResponse);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.SelectedResponse:
                {
                    if (createOrReplace)
                    {
                        if (SelectedResponse == null)
                        {
                            if (replacement == null)
                            {
                                SelectedResponse = new PropertyState<int>(this);
                            }
                            else
                            {
                                SelectedResponse = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = SelectedResponse;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<int> m_selectedResponse;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionAcknowledgeEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionAcknowledgeEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionAcknowledgeEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionAcknowledgeEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionAcknowledgeEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionAcknowledgeEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKgAAAEF1ZGl0Q29uZGl0aW9uQWNrbm93bGVkZ2VFdmVudFR5cGVJbnN0" +
           "YW5jZQEA8CIBAPAi/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAPEiAC4ARPEiAAAAD/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAPIiAC4ARPIiAAAAEf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAoAAABTb3VyY2VOb2RlAQDzIgAuAETzIgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTmFtZQEA9CIALgBE9CIAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRp" +
           "bWUBAPUiAC4ARPUiAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQD2" +
           "IgAuAET2IgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAPciAC4ARPci" +
           "AAABANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAPgiAC4ARPgiAAAAFf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEA+SIALgBE+SIAAAAF/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEA+iIALgBE+iIAAAEAJgH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAGAAAAU3RhdHVzAQD7IgAuAET7IgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAA" +
           "U2VydmVySWQBAPwiAC4ARPwiAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRp" +
           "dEVudHJ5SWQBAP0iAC4ARP0iAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2Vy" +
           "SWQBAP4iAC4ARP4iAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEA/yIALgBE" +
           "/yIAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAAIwAuAEQAIwAA" +
           "ABgBAAAAAQH/////AAAAABVgiQoCAAAAAAAHAAAAQ29tbWVudAEATS4ALgBETS4AAAAV/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionConfirmEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionConfirmEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionConfirmEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionConfirmEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionConfirmEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionConfirmEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAEF1ZGl0Q29uZGl0aW9uQ29uZmlybUV2ZW50VHlwZUluc3RhbmNl" +
           "AQABIwEAASP/////EQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAAiMALgBEAiMAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAAyMALgBEAyMAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBAAQjAC4ARAQjAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQAFIwAuAEQFIwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "BiMALgBEBiMAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAAcjAC4A" +
           "RAcjAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEACCMALgBECCMAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEACSMALgBECSMAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAKIwAuAEQKIwAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQALIwAuAEQLIwAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABTdGF0dXMBAAwjAC4ARAwjAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2" +
           "ZXJJZAEADSMALgBEDSMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50" +
           "cnlJZAEADiMALgBEDiMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA" +
           "DyMALgBEDyMAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQAQIwAuAEQQIwAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBABEjAC4ARBEjAAAAGAEA" +
           "AAABAf////8AAAAAFWCJCgIAAAAAAAcAAABDb21tZW50AQBOLgAuAEROLgAAABX/////AQH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<LocalizedText> Comment
        {
            get
            {
                return m_comment;
            }

            set
            {
                if (!Object.ReferenceEquals(m_comment, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_comment = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_comment != null)
            {
                children.Add(m_comment);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Comment:
                {
                    if (createOrReplace)
                    {
                        if (Comment == null)
                        {
                            if (replacement == null)
                            {
                                Comment = new PropertyState<LocalizedText>(this);
                            }
                            else
                            {
                                Comment = (PropertyState<LocalizedText>)replacement;
                            }
                        }
                    }

                    instance = Comment;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<LocalizedText> m_comment;
        #endregion
    }
    #endif
    #endregion

    #region AuditConditionShelvingEventState Class
    #if (!OPCUA_EXCLUDE_AuditConditionShelvingEventState)
    /// <summary>
    /// Stores an instance of the AuditConditionShelvingEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditConditionShelvingEventState : AuditConditionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditConditionShelvingEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditConditionShelvingEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJwAAAEF1ZGl0Q29uZGl0aW9uU2hlbHZpbmdFdmVudFR5cGVJbnN0YW5j" +
           "ZQEAVSsBAFUr/////xEAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAFYrAC4ARFYrAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAFcrAC4ARFcrAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQBYKwAuAERYKwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAWSsALgBEWSsAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AForAC4ARForAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBbKwAu" +
           "AERbKwAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAFwrAC4ARFwrAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAF0rAC4ARF0rAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAXisALgBEXisAAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAXysALgBEXysAAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQBgKwAuAERgKwAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBAGErAC4ARGErAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBAGIrAC4ARGIrAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AGMrAC4ARGMrAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAZCsALgBEZCsA" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBlKwAuAERlKwAAABgB" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAAMAAAAU2hlbHZpbmdUaW1lAQBPLgAuAERPLgAAAQAiAf////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<double> ShelvingTime
        {
            get
            {
                return m_shelvingTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_shelvingTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_shelvingTime = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_shelvingTime != null)
            {
                children.Add(m_shelvingTime);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ShelvingTime:
                {
                    if (createOrReplace)
                    {
                        if (ShelvingTime == null)
                        {
                            if (replacement == null)
                            {
                                ShelvingTime = new PropertyState<double>(this);
                            }
                            else
                            {
                                ShelvingTime = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ShelvingTime;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<double> m_shelvingTime;
        #endregion
    }
    #endif
    #endregion

    #region RefreshStartEventState Class
    #if (!OPCUA_EXCLUDE_RefreshStartEventState)
    /// <summary>
    /// Stores an instance of the RefreshStartEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshStartEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RefreshStartEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshStartEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHQAAAFJlZnJlc2hTdGFydEV2ZW50VHlwZUluc3RhbmNlAQDjCgEA4wr/" +
           "////CQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAgQ8ALgBEgQ8AAAAP/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACQAAAEV2ZW50VHlwZQEAgg8ALgBEgg8AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAA" +
           "AFNvdXJjZU5vZGUBAIMPAC4ARIMPAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3VyY2VO" +
           "YW1lAQCEDwAuAESEDwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAhQ8ALgBEhQ8A" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAIYPAC4ARIYPAAABACYB" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAhw8ALgBEhw8AAAEA0CL/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAiA8ALgBEiA8AAAAV/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACAAAAFNldmVyaXR5AQCJDwAuAESJDwAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshEndEventState Class
    #if (!OPCUA_EXCLUDE_RefreshEndEventState)
    /// <summary>
    /// Stores an instance of the RefreshEndEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshEndEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RefreshEndEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshEndEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAGwAAAFJlZnJlc2hFbmRFdmVudFR5cGVJbnN0YW5jZQEA5AoBAOQK////" +
           "/wkAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAIoPAC4ARIoPAAAAD/////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAkAAABFdmVudFR5cGUBAIsPAC4ARIsPAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOb2RlAQCMDwAuAESMDwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAKAAAAU291cmNlTmFt" +
           "ZQEAjQ8ALgBEjQ8AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUBAI4PAC4ARI4PAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQCPDwAuAESPDwAAAQAmAf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAJAPAC4ARJAPAAABANAi/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAJEPAC4ARJEPAAAAFf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAgAAABTZXZlcml0eQEAkg8ALgBEkg8AAAAF/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RefreshRequiredEventState Class
    #if (!OPCUA_EXCLUDE_RefreshRequiredEventState)
    /// <summary>
    /// Stores an instance of the RefreshRequiredEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RefreshRequiredEventState : SystemEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RefreshRequiredEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RefreshRequiredEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIAAAAFJlZnJlc2hSZXF1aXJlZEV2ZW50VHlwZUluc3RhbmNlAQDlCgEA" +
           "5Qr/////CQAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAkw8ALgBEkw8AAAAP/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAlA8ALgBElA8AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5vZGUBAJUPAC4ARJUPAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABTb3Vy" +
           "Y2VOYW1lAQCWDwAuAESWDwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEAlw8ALgBE" +
           "lw8AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAJgPAC4ARJgPAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAmQ8ALgBEmQ8AAAEA0CL/////" +
           "AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAmg8ALgBEmg8AAAAV/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACAAAAFNldmVyaXR5AQCbDwAuAESbDwAAAAX/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ProgramStateMachineState Class
    #if (!OPCUA_EXCLUDE_ProgramStateMachineState)
    /// <summary>
    /// Stores an instance of the ProgramStateMachineType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramStateMachineState : FiniteStateMachineState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramStateMachineState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramStateMachineType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (ProgramDiagnostics != null)
            {
                ProgramDiagnostics.Initialize(context, ProgramDiagnostics_InitializationString);
            }

            if (FinalResultData != null)
            {
                FinalResultData.Initialize(context, FinalResultData_InitializationString);
            }
        }

        #region Initialization String
        private const string ProgramDiagnostics_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAFByb2dyYW1EaWFnbm9zdGljcwEAXwkALwEATAlfCQAAAQB+A///" +
           "//8BAf////8KAAAAFWCJCgIAAAAAAA8AAABDcmVhdGVTZXNzaW9uSWQBAAAPAC4ARAAPAAAAEf////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABAAAABDcmVhdGVDbGllbnROYW1lAQABDwAuAEQBDwAAAAz/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAWAAAASW52b2NhdGlvbkNyZWF0aW9uVGltZQEAAg8ALgBEAg8AAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAASAAAATGFzdFRyYW5zaXRpb25UaW1lAQADDwAuAEQDDwAAAQAm" +
           "Af////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0TWV0aG9kQ2FsbAEABA8ALgBEBA8AAAAM////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAAEwAAAExhc3RNZXRob2RTZXNzaW9uSWQBAAUPAC4ARAUPAAAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABgAAABMYXN0TWV0aG9kSW5wdXRBcmd1bWVudHMBAAYPAC4ARAYP" +
           "AAABACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAAGQAAAExhc3RNZXRob2RPdXRwdXRBcmd1bWVudHMB" +
           "AAcPAC4ARAcPAAABACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAAEgAAAExhc3RNZXRob2RDYWxsVGlt" +
           "ZQEACA8ALgBECA8AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAWAAAATGFzdE1ldGhvZFJldHVy" +
           "blN0YXR1cwEACQ8ALgBECQ8AAAEAKwH/////AQH/////AAAAAA==";

        private const string FinalResultData_InitializationString =
           "//////////8EYIAKAQAAAAAADwAAAEZpbmFsUmVzdWx0RGF0YQEACg8ALwA6Cg8AAP////8AAAAA";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAFByb2dyYW1TdGF0ZU1hY2hpbmVUeXBlSW5zdGFuY2UBAFcJAQBX" +
           "Cf////8LAAAAFWCJCgIAAAAAAAwAAABDdXJyZW50U3RhdGUBAPYOAC8BAMgK9g4AAAAV/////wEB////" +
           "/wIAAAAVYIkKAgAAAAAAAgAAAElkAQD3DgAuAET3DgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAG" +
           "AAAATnVtYmVyAQD5DgAuAET5DgAAAAf/////AQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFRyYW5z" +
           "aXRpb24BAPsOAC8BAM8K+w4AAAAV/////wEB/////wMAAAAVYIkKAgAAAAAAAgAAAElkAQD8DgAuAET8" +
           "DgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAGAAAATnVtYmVyAQD+DgAuAET+DgAAAAf/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAOAAAAVHJhbnNpdGlvblRpbWUBAP8OAC4ARP8OAAABACYB/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAERlbGV0YWJsZQEAWQkALgBEWQkAAAAB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADAAAAFJlY3ljbGVDb3VudAEAWwkALgBEWwkAAAAG/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "EgAAAFByb2dyYW1EaWFnbm9zdGljcwEAXwkALwEATAlfCQAAAQB+A/////8BAf////8KAAAAFWCJCgIA" +
           "AAAAAA8AAABDcmVhdGVTZXNzaW9uSWQBAAAPAC4ARAAPAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "ABAAAABDcmVhdGVDbGllbnROYW1lAQABDwAuAEQBDwAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAW" +
           "AAAASW52b2NhdGlvbkNyZWF0aW9uVGltZQEAAg8ALgBEAg8AAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAASAAAATGFzdFRyYW5zaXRpb25UaW1lAQADDwAuAEQDDwAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA4AAABMYXN0TWV0aG9kQ2FsbAEABA8ALgBEBA8AAAAM/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAEwAAAExhc3RNZXRob2RTZXNzaW9uSWQBAAUPAC4ARAUPAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAABgAAABMYXN0TWV0aG9kSW5wdXRBcmd1bWVudHMBAAYPAC4ARAYPAAABACgBAQAAAAEB/////wAA" +
           "AAAVYIkKAgAAAAAAGQAAAExhc3RNZXRob2RPdXRwdXRBcmd1bWVudHMBAAcPAC4ARAcPAAABACgBAQAA" +
           "AAEB/////wAAAAAVYIkKAgAAAAAAEgAAAExhc3RNZXRob2RDYWxsVGltZQEACA8ALgBECA8AAAEAJgH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAWAAAATGFzdE1ldGhvZFJldHVyblN0YXR1cwEACQ8ALgBECQ8A" +
           "AAEAKwH/////AQH/////AAAAAARggAoBAAAAAAAPAAAARmluYWxSZXN1bHREYXRhAQAKDwAvADoKDwAA" +
           "/////wAAAAAEYYIKBAAAAAAABQAAAFN0YXJ0AQB6CQAvAQB6CXoJAAABAQEAAAAANQEBAGoJAAAAAARh" +
           "ggoEAAAAAAAHAAAAU3VzcGVuZAEAewkALwEAewl7CQAAAQEBAAAAADUBAQBwCQAAAAAEYYIKBAAAAAAA" +
           "BgAAAFJlc3VtZQEAfAkALwEAfAl8CQAAAQEBAAAAADUBAQByCQAAAAAEYYIKBAAAAAAABAAAAEhhbHQB" +
           "AH0JAC8BAH0JfQkAAAEBAwAAAAA1AQEAbAkANQEBAHQJADUBAQB4CQAAAAAEYYIKBAAAAAAABQAAAFJl" +
           "c2V0AQB+CQAvAQB+CX4JAAABAQEAAAAANQEBAGgJAAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> Deletable
        {
            get
            {
                return m_deletable;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deletable, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deletable = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AutoDelete
        {
            get
            {
                return m_autoDelete;
            }

            set
            {
                if (!Object.ReferenceEquals(m_autoDelete, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_autoDelete = value;
            }
        }

        /// <remarks />
        public PropertyState<int> RecycleCount
        {
            get
            {
                return m_recycleCount;
            }

            set
            {
                if (!Object.ReferenceEquals(m_recycleCount, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_recycleCount = value;
            }
        }

        /// <remarks />
        public ProgramDiagnosticState ProgramDiagnostics
        {
            get
            {
                return m_programDiagnostics;
            }

            set
            {
                if (!Object.ReferenceEquals(m_programDiagnostics, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_programDiagnostics = value;
            }
        }

        /// <remarks />
        public BaseObjectState FinalResultData
        {
            get
            {
                return m_finalResultData;
            }

            set
            {
                if (!Object.ReferenceEquals(m_finalResultData, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_finalResultData = value;
            }
        }

        /// <remarks />
        public MethodState Start
        {
            get
            {
                return m_startMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startMethod = value;
            }
        }

        /// <remarks />
        public MethodState Suspend
        {
            get
            {
                return m_suspendMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_suspendMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_suspendMethod = value;
            }
        }

        /// <remarks />
        public MethodState Resume
        {
            get
            {
                return m_resumeMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resumeMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resumeMethod = value;
            }
        }

        /// <remarks />
        public MethodState Halt
        {
            get
            {
                return m_haltMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_haltMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_haltMethod = value;
            }
        }

        /// <remarks />
        public MethodState Reset
        {
            get
            {
                return m_resetMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_resetMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_resetMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_deletable != null)
            {
                children.Add(m_deletable);
            }

            if (m_recycleCount != null)
            {
                children.Add(m_recycleCount);
            }

            if (m_programDiagnostics != null)
            {
                children.Add(m_programDiagnostics);
            }

            if (m_finalResultData != null)
            {
                children.Add(m_finalResultData);
            }

            if (m_startMethod != null)
            {
                children.Add(m_startMethod);
            }

            if (m_suspendMethod != null)
            {
                children.Add(m_suspendMethod);
            }

            if (m_resumeMethod != null)
            {
                children.Add(m_resumeMethod);
            }

            if (m_haltMethod != null)
            {
                children.Add(m_haltMethod);
            }

            if (m_resetMethod != null)
            {
                children.Add(m_resetMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Deletable:
                {
                    if (createOrReplace)
                    {
                        if (Deletable == null)
                        {
                            if (replacement == null)
                            {
                                Deletable = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Deletable = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Deletable;
                    break;
                }

                case Opc.Ua.BrowseNames.RecycleCount:
                {
                    if (createOrReplace)
                    {
                        if (RecycleCount == null)
                        {
                            if (replacement == null)
                            {
                                RecycleCount = new PropertyState<int>(this);
                            }
                            else
                            {
                                RecycleCount = (PropertyState<int>)replacement;
                            }
                        }
                    }

                    instance = RecycleCount;
                    break;
                }

                case Opc.Ua.BrowseNames.ProgramDiagnostics:
                {
                    if (createOrReplace)
                    {
                        if (ProgramDiagnostics == null)
                        {
                            if (replacement == null)
                            {
                                ProgramDiagnostics = new ProgramDiagnosticState(this);
                            }
                            else
                            {
                                ProgramDiagnostics = (ProgramDiagnosticState)replacement;
                            }
                        }
                    }

                    instance = ProgramDiagnostics;
                    break;
                }

                case Opc.Ua.BrowseNames.FinalResultData:
                {
                    if (createOrReplace)
                    {
                        if (FinalResultData == null)
                        {
                            if (replacement == null)
                            {
                                FinalResultData = new BaseObjectState(this);
                            }
                            else
                            {
                                FinalResultData = (BaseObjectState)replacement;
                            }
                        }
                    }

                    instance = FinalResultData;
                    break;
                }

                case Opc.Ua.BrowseNames.Start:
                {
                    if (createOrReplace)
                    {
                        if (Start == null)
                        {
                            if (replacement == null)
                            {
                                Start = new MethodState(this);
                            }
                            else
                            {
                                Start = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Start;
                    break;
                }

                case Opc.Ua.BrowseNames.Suspend:
                {
                    if (createOrReplace)
                    {
                        if (Suspend == null)
                        {
                            if (replacement == null)
                            {
                                Suspend = new MethodState(this);
                            }
                            else
                            {
                                Suspend = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Suspend;
                    break;
                }

                case Opc.Ua.BrowseNames.Resume:
                {
                    if (createOrReplace)
                    {
                        if (Resume == null)
                        {
                            if (replacement == null)
                            {
                                Resume = new MethodState(this);
                            }
                            else
                            {
                                Resume = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Resume;
                    break;
                }

                case Opc.Ua.BrowseNames.Halt:
                {
                    if (createOrReplace)
                    {
                        if (Halt == null)
                        {
                            if (replacement == null)
                            {
                                Halt = new MethodState(this);
                            }
                            else
                            {
                                Halt = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Halt;
                    break;
                }

                case Opc.Ua.BrowseNames.Reset:
                {
                    if (createOrReplace)
                    {
                        if (Reset == null)
                        {
                            if (replacement == null)
                            {
                                Reset = new MethodState(this);
                            }
                            else
                            {
                                Reset = (MethodState)replacement;
                            }
                        }
                    }

                    instance = Reset;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_deletable;
        private PropertyState<bool> m_autoDelete;
        private PropertyState<int> m_recycleCount;
        private ProgramDiagnosticState m_programDiagnostics;
        private BaseObjectState m_finalResultData;
        private MethodState m_startMethod;
        private MethodState m_suspendMethod;
        private MethodState m_resumeMethod;
        private MethodState m_haltMethod;
        private MethodState m_resetMethod;
        #endregion
    }
    #endif
    #endregion

    #region ProgramTransitionEventState Class
    #if (!OPCUA_EXCLUDE_ProgramTransitionEventState)
    /// <summary>
    /// Stores an instance of the ProgramTransitionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramTransitionEventState : TransitionEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramTransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramTransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAFByb2dyYW1UcmFuc2l0aW9uRXZlbnRUeXBlSW5zdGFuY2UBAEoJ" +
           "AQBKCf////8NAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDGDgAuAETGDgAAAA//////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDHDgAuAETHDgAAABH/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAKAAAAU291cmNlTm9kZQEAyA4ALgBEyA4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACgAAAFNv" +
           "dXJjZU5hbWUBAMkOAC4ARMkOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1lAQDKDgAu" +
           "AETKDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAyw4ALgBEyw4A" +
           "AAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDMDgAuAETMDgAAAQDQIv//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDNDgAuAETNDgAAABX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAM4OAC4ARM4OAAAABf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABUcmFuc2l0aW9uAQDZDgAvAQDKCtkOAAAAFf////8BAf////8BAAAAFWCJCgIAAAAAAAIAAABJ" +
           "ZAEA2g4ALgBE2g4AAAAY/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAEZyb21TdGF0ZQEAzw4ALwEA" +
           "wwrPDgAAABX/////AQH/////AQAAABVgiQoCAAAAAAACAAAASWQBANAOAC4ARNAOAAAAGP////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAcAAABUb1N0YXRlAQDUDgAvAQDDCtQOAAAAFf////8BAf////8BAAAAFWCJ" +
           "CgIAAAAAAAIAAABJZAEA1Q4ALgBE1Q4AAAAY/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAEludGVy" +
           "bWVkaWF0ZVJlc3VsdAEASwkALgBESwkAAAAY/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState IntermediateResult
        {
            get
            {
                return m_intermediateResult;
            }

            set
            {
                if (!Object.ReferenceEquals(m_intermediateResult, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_intermediateResult = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_intermediateResult != null)
            {
                children.Add(m_intermediateResult);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IntermediateResult:
                {
                    if (createOrReplace)
                    {
                        if (IntermediateResult == null)
                        {
                            if (replacement == null)
                            {
                                IntermediateResult = new PropertyState(this);
                            }
                            else
                            {
                                IntermediateResult = (PropertyState)replacement;
                            }
                        }
                    }

                    instance = IntermediateResult;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState m_intermediateResult;
        #endregion
    }
    #endif
    #endregion

    #region AuditProgramTransitionEventState Class
    #if (!OPCUA_EXCLUDE_AuditProgramTransitionEventState)
    /// <summary>
    /// Stores an instance of the AuditProgramTransitionEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditProgramTransitionEventState : AuditUpdateStateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditProgramTransitionEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditProgramTransitionEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJwAAAEF1ZGl0UHJvZ3JhbVRyYW5zaXRpb25FdmVudFR5cGVJbnN0YW5j" +
           "ZQEAUC4BAFAu/////xMAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAFEuAC4ARFEuAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAFIuAC4ARFIuAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQBTLgAuAERTLgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEAVC4ALgBEVC4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AFUuAC4ARFUuAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQBWLgAu" +
           "AERWLgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAFcuAC4ARFcuAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAFguAC4ARFguAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEAWS4ALgBEWS4AAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEAWi4ALgBEWi4AAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQBbLgAuAERbLgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBAFwuAC4ARFwuAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBAF0uAC4ARF0uAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AF4uAC4ARF4uAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEAXy4ALgBEXy4A" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBgLgAuAERgLgAAABgB" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAT2xkU3RhdGVJZAEAYS4ALgBEYS4AAAAY/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAE5ld1N0YXRlSWQBAGIuAC4ARGIuAAAAGP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABAAAABUcmFuc2l0aW9uTnVtYmVyAQBjLgAuAERjLgAAAAf/////AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<uint> TransitionNumber
        {
            get
            {
                return m_transitionNumber;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transitionNumber, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transitionNumber = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transitionNumber != null)
            {
                children.Add(m_transitionNumber);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TransitionNumber:
                {
                    if (createOrReplace)
                    {
                        if (TransitionNumber == null)
                        {
                            if (replacement == null)
                            {
                                TransitionNumber = new PropertyState<uint>(this);
                            }
                            else
                            {
                                TransitionNumber = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = TransitionNumber;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<uint> m_transitionNumber;
        #endregion
    }
    #endif
    #endregion

    #region ProgramTransitionAuditEventState Class
    #if (!OPCUA_EXCLUDE_ProgramTransitionAuditEventState)
    /// <summary>
    /// Stores an instance of the ProgramTransitionAuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramTransitionAuditEventState : AuditUpdateStateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramTransitionAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ProgramTransitionAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJwAAAFByb2dyYW1UcmFuc2l0aW9uQXVkaXRFdmVudFR5cGVJbnN0YW5j" +
           "ZQEA3g4BAN4O/////xMAAAAVYIkKAgAAAAAABwAAAEV2ZW50SWQBAN8OAC4ARN8OAAAAD/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAkAAABFdmVudFR5cGUBAOAOAC4AROAOAAAAEf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABTb3VyY2VOb2RlAQDhDgAuAEThDgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAK" +
           "AAAAU291cmNlTmFtZQEA4g4ALgBE4g4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAABAAAAFRpbWUB" +
           "AOMOAC4AROMOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFJlY2VpdmVUaW1lAQDkDgAu" +
           "AETkDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABMb2NhbFRpbWUBAOUOAC4AROUOAAAB" +
           "ANAi/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAE1lc3NhZ2UBAOYOAC4AROYOAAAAFf////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAAAgAAABTZXZlcml0eQEA5w4ALgBE5w4AAAAF/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAADwAAAEFjdGlvblRpbWVTdGFtcAEA6A4ALgBE6A4AAAEAJgH/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAGAAAAU3RhdHVzAQDpDgAuAETpDgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAU2Vy" +
           "dmVySWQBAOoOAC4AROoOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAABIAAABDbGllbnRBdWRpdEVu" +
           "dHJ5SWQBAOsOAC4AROsOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABDbGllbnRVc2VySWQB" +
           "AOwOAC4AROwOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABNZXRob2RJZAEA7Q4ALgBE7Q4A" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDuDgAuAETuDgAAABgB" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAAKAAAAT2xkU3RhdGVJZAEA7w4ALgBE7w4AAAAY/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACgAAAE5ld1N0YXRlSWQBAPAOAC4ARPAOAAAAGP////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAoAAABUcmFuc2l0aW9uAQDxDgAvAQDPCvEOAAAAFf////8BAf////8BAAAAFWCJCgIAAAAA" +
           "AAIAAABJZAEA8g4ALgBE8g4AAAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public FiniteTransitionVariableState Transition
        {
            get
            {
                return m_transition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_transition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_transition = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_transition != null)
            {
                children.Add(m_transition);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.Transition:
                {
                    if (createOrReplace)
                    {
                        if (Transition == null)
                        {
                            if (replacement == null)
                            {
                                Transition = new FiniteTransitionVariableState(this);
                            }
                            else
                            {
                                Transition = (FiniteTransitionVariableState)replacement;
                            }
                        }
                    }

                    instance = Transition;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private FiniteTransitionVariableState m_transition;
        #endregion
    }
    #endif
    #endregion

    #region ProgramDiagnosticState Class
    #if (!OPCUA_EXCLUDE_ProgramDiagnosticState)
    /// <summary>
    /// Stores an instance of the ProgramDiagnosticType VariableType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ProgramDiagnosticState : BaseDataVariableState<ProgramDiagnosticDataType>
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ProgramDiagnosticState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.VariableTypes.ProgramDiagnosticType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default data type node for the instance.
        /// </summary>
        protected override NodeId GetDefaultDataTypeId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.DataTypes.ProgramDiagnosticDataType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        /// <summary>
        /// Returns the id of the default value rank for the instance.
        /// </summary>
        protected override int GetDefaultValueRank()
        {
            return ValueRanks.Scalar;
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8VYIkAAgAAAAAAHQAAAFByb2dyYW1EaWFnbm9zdGljVHlwZUluc3RhbmNlAQBMCQEATAkB" +
           "AH4D/////wEB/////woAAAAVYIkKAgAAAAAADwAAAENyZWF0ZVNlc3Npb25JZAEATQkALgBETQkAAAAR" +
           "/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAENyZWF0ZUNsaWVudE5hbWUBAE4JAC4ARE4JAAAADP//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAABYAAABJbnZvY2F0aW9uQ3JlYXRpb25UaW1lAQBPCQAuAERPCQAA" +
           "AQAmAf////8BAf////8AAAAAFWCJCgIAAAAAABIAAABMYXN0VHJhbnNpdGlvblRpbWUBAFAJAC4ARFAJ" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RNZXRob2RDYWxsAQBRCQAuAERRCQAA" +
           "AAz/////AQH/////AAAAABVgiQoCAAAAAAATAAAATGFzdE1ldGhvZFNlc3Npb25JZAEAUgkALgBEUgkA" +
           "AAAR/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAExhc3RNZXRob2RJbnB1dEFyZ3VtZW50cwEAUwkA" +
           "LgBEUwkAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAZAAAATGFzdE1ldGhvZE91dHB1dEFyZ3Vt" +
           "ZW50cwEAVAkALgBEVAkAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAASAAAATGFzdE1ldGhvZENh" +
           "bGxUaW1lAQBVCQAuAERVCQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAABYAAABMYXN0TWV0aG9k" +
           "UmV0dXJuU3RhdHVzAQBWCQAuAERWCQAAAQArAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> CreateSessionId
        {
            get
            {
                return m_createSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSessionId = value;
            }
        }

        /// <remarks />
        public PropertyState<string> CreateClientName
        {
            get
            {
                return m_createClientName;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createClientName, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createClientName = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> InvocationCreationTime
        {
            get
            {
                return m_invocationCreationTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_invocationCreationTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_invocationCreationTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastTransitionTime
        {
            get
            {
                return m_lastTransitionTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastTransitionTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastTransitionTime = value;
            }
        }

        /// <remarks />
        public PropertyState<string> LastMethodCall
        {
            get
            {
                return m_lastMethodCall;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCall, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCall = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> LastMethodSessionId
        {
            get
            {
                return m_lastMethodSessionId;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodSessionId, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodSessionId = value;
            }
        }

        /// <remarks />
        public PropertyState<Argument[]> LastMethodInputArguments
        {
            get
            {
                return m_lastMethodInputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodInputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodInputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<Argument[]> LastMethodOutputArguments
        {
            get
            {
                return m_lastMethodOutputArguments;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodOutputArguments, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodOutputArguments = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> LastMethodCallTime
        {
            get
            {
                return m_lastMethodCallTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodCallTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodCallTime = value;
            }
        }

        /// <remarks />
        public PropertyState<StatusResult> LastMethodReturnStatus
        {
            get
            {
                return m_lastMethodReturnStatus;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastMethodReturnStatus, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastMethodReturnStatus = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_createSessionId != null)
            {
                children.Add(m_createSessionId);
            }

            if (m_createClientName != null)
            {
                children.Add(m_createClientName);
            }

            if (m_invocationCreationTime != null)
            {
                children.Add(m_invocationCreationTime);
            }

            if (m_lastTransitionTime != null)
            {
                children.Add(m_lastTransitionTime);
            }

            if (m_lastMethodCall != null)
            {
                children.Add(m_lastMethodCall);
            }

            if (m_lastMethodSessionId != null)
            {
                children.Add(m_lastMethodSessionId);
            }

            if (m_lastMethodInputArguments != null)
            {
                children.Add(m_lastMethodInputArguments);
            }

            if (m_lastMethodOutputArguments != null)
            {
                children.Add(m_lastMethodOutputArguments);
            }

            if (m_lastMethodCallTime != null)
            {
                children.Add(m_lastMethodCallTime);
            }

            if (m_lastMethodReturnStatus != null)
            {
                children.Add(m_lastMethodReturnStatus);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CreateSessionId:
                {
                    if (createOrReplace)
                    {
                        if (CreateSessionId == null)
                        {
                            if (replacement == null)
                            {
                                CreateSessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CreateSessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CreateSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateClientName:
                {
                    if (createOrReplace)
                    {
                        if (CreateClientName == null)
                        {
                            if (replacement == null)
                            {
                                CreateClientName = new PropertyState<string>(this);
                            }
                            else
                            {
                                CreateClientName = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = CreateClientName;
                    break;
                }

                case Opc.Ua.BrowseNames.InvocationCreationTime:
                {
                    if (createOrReplace)
                    {
                        if (InvocationCreationTime == null)
                        {
                            if (replacement == null)
                            {
                                InvocationCreationTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                InvocationCreationTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = InvocationCreationTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastTransitionTime:
                {
                    if (createOrReplace)
                    {
                        if (LastTransitionTime == null)
                        {
                            if (replacement == null)
                            {
                                LastTransitionTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastTransitionTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastTransitionTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCall:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCall == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCall = new PropertyState<string>(this);
                            }
                            else
                            {
                                LastMethodCall = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCall;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodSessionId:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodSessionId == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodSessionId = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                LastMethodSessionId = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = LastMethodSessionId;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodInputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodInputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodInputArguments = new PropertyState<Argument[]>(this);
                            }
                            else
                            {
                                LastMethodInputArguments = (PropertyState<Argument[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodInputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodOutputArguments:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodOutputArguments == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodOutputArguments = new PropertyState<Argument[]>(this);
                            }
                            else
                            {
                                LastMethodOutputArguments = (PropertyState<Argument[]>)replacement;
                            }
                        }
                    }

                    instance = LastMethodOutputArguments;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodCallTime:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodCallTime == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodCallTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastMethodCallTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastMethodCallTime;
                    break;
                }

                case Opc.Ua.BrowseNames.LastMethodReturnStatus:
                {
                    if (createOrReplace)
                    {
                        if (LastMethodReturnStatus == null)
                        {
                            if (replacement == null)
                            {
                                LastMethodReturnStatus = new PropertyState<StatusResult>(this);
                            }
                            else
                            {
                                LastMethodReturnStatus = (PropertyState<StatusResult>)replacement;
                            }
                        }
                    }

                    instance = LastMethodReturnStatus;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_createSessionId;
        private PropertyState<string> m_createClientName;
        private PropertyState<DateTime> m_invocationCreationTime;
        private PropertyState<DateTime> m_lastTransitionTime;
        private PropertyState<string> m_lastMethodCall;
        private PropertyState<NodeId> m_lastMethodSessionId;
        private PropertyState<Argument[]> m_lastMethodInputArguments;
        private PropertyState<Argument[]> m_lastMethodOutputArguments;
        private PropertyState<DateTime> m_lastMethodCallTime;
        private PropertyState<StatusResult> m_lastMethodReturnStatus;
        #endregion
    }

    #region ProgramDiagnosticValue Class
    /// <summary>
    /// A typed version of the _BrowseName_ variable.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public class ProgramDiagnosticValue : BaseVariableValue
    {
        #region Constructors
        /// <summary>
        /// Initializes the instance with its defalt attribute values.
        /// </summary>
        public ProgramDiagnosticValue(ProgramDiagnosticState variable, ProgramDiagnosticDataType value, object dataLock) : base(dataLock)
        {
            m_value = value;

            if (m_value == null)
            {
                m_value = new ProgramDiagnosticDataType();
            }

            Initialize(variable);
        }
        #endregion

        #region Public Members
        /// <summary>
        /// The variable that the value belongs to.
        /// </summary>
        public ProgramDiagnosticState Variable
        {
            get { return m_variable; }
        }

        /// <summary>
        /// The value of the variable.
        /// </summary>
        public ProgramDiagnosticDataType Value
        {
            get { return m_value;  }
            set { m_value = value; }
        }
        #endregion

        #region Private Methods
        /// <summary>
        /// Initializes the object.
        /// </summary>
        private void Initialize(ProgramDiagnosticState variable)
        {
            lock (Lock)
            {
                m_variable = variable;

                variable.Value = m_value;

                variable.OnReadValue = OnReadValue;
                variable.OnSimpleWriteValue = OnWriteValue;

                BaseVariableState instance = null;
                List<BaseInstanceState> updateList = new List<BaseInstanceState>();
                updateList.Add(variable);

                instance = m_variable.CreateSessionId;
                instance.OnReadValue = OnRead_CreateSessionId;
                instance.OnSimpleWriteValue = OnWrite_CreateSessionId;
                updateList.Add(instance);
                instance = m_variable.CreateClientName;
                instance.OnReadValue = OnRead_CreateClientName;
                instance.OnSimpleWriteValue = OnWrite_CreateClientName;
                updateList.Add(instance);
                instance = m_variable.InvocationCreationTime;
                instance.OnReadValue = OnRead_InvocationCreationTime;
                instance.OnSimpleWriteValue = OnWrite_InvocationCreationTime;
                updateList.Add(instance);
                instance = m_variable.LastTransitionTime;
                instance.OnReadValue = OnRead_LastTransitionTime;
                instance.OnSimpleWriteValue = OnWrite_LastTransitionTime;
                updateList.Add(instance);
                instance = m_variable.LastMethodCall;
                instance.OnReadValue = OnRead_LastMethodCall;
                instance.OnSimpleWriteValue = OnWrite_LastMethodCall;
                updateList.Add(instance);
                instance = m_variable.LastMethodSessionId;
                instance.OnReadValue = OnRead_LastMethodSessionId;
                instance.OnSimpleWriteValue = OnWrite_LastMethodSessionId;
                updateList.Add(instance);
                instance = m_variable.LastMethodInputArguments;
                instance.OnReadValue = OnRead_LastMethodInputArguments;
                instance.OnSimpleWriteValue = OnWrite_LastMethodInputArguments;
                updateList.Add(instance);
                instance = m_variable.LastMethodOutputArguments;
                instance.OnReadValue = OnRead_LastMethodOutputArguments;
                instance.OnSimpleWriteValue = OnWrite_LastMethodOutputArguments;
                updateList.Add(instance);
                instance = m_variable.LastMethodCallTime;
                instance.OnReadValue = OnRead_LastMethodCallTime;
                instance.OnSimpleWriteValue = OnWrite_LastMethodCallTime;
                updateList.Add(instance);
                instance = m_variable.LastMethodReturnStatus;
                instance.OnReadValue = OnRead_LastMethodReturnStatus;
                instance.OnSimpleWriteValue = OnWrite_LastMethodReturnStatus;
                updateList.Add(instance);

                SetUpdateList(updateList);
            }
        }

        /// <summary>
        /// Reads the value of the variable.
        /// </summary>
        protected ServiceResult OnReadValue(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable.
        /// </summary>
        private ServiceResult OnWriteValue(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value = (ProgramDiagnosticDataType)Write(value);
            }

            return ServiceResult.Good;
        }

        #region CreateSessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateSessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateSessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateSessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region CreateClientName Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_CreateClientName(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.CreateClientName;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_CreateClientName(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.CreateClientName = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region InvocationCreationTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_InvocationCreationTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.InvocationCreationTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_InvocationCreationTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.InvocationCreationTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastTransitionTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastTransitionTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastTransitionTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastTransitionTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastTransitionTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCall Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodCall(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodCall;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodCall(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodCall = (string)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodSessionId Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodSessionId(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodSessionId;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodSessionId(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodSessionId = (NodeId)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodInputArguments Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodInputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodInputArguments;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodInputArguments(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodInputArguments = (ArgumentCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodOutputArguments Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodOutputArguments(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodOutputArguments;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodOutputArguments(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodOutputArguments = (ArgumentCollection)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodCallTime Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodCallTime(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodCallTime;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodCallTime(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodCallTime = (DateTime)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion

        #region LastMethodReturnStatus Access Methods
        /// <summary>
        /// Reads the value of the variable child.
        /// </summary>
        private ServiceResult OnRead_LastMethodReturnStatus(
            ISystemContext context,
            NodeState node,
            NumericRange indexRange,
            QualifiedName dataEncoding,
            ref object value,
            ref StatusCode statusCode,
            ref DateTime timestamp)
        {
            lock (Lock)
            {
                DoBeforeReadProcessing(context, node);

                if (m_value != null)
                {
                    value = m_value.LastMethodReturnStatus;
                }

                return Read(context, node, indexRange, dataEncoding, ref value, ref statusCode, ref timestamp);
            }
        }

        /// <summary>
        /// Writes the value of the variable child.
        /// </summary>
        private ServiceResult OnWrite_LastMethodReturnStatus(ISystemContext context, NodeState node, ref object value)
        {
            lock (Lock)
            {
                m_value.LastMethodReturnStatus = (StatusResult)Write(value);
            }

            return ServiceResult.Good;
        }
        #endregion
        #endregion

        #region Private Fields
        private ProgramDiagnosticDataType m_value;
        private ProgramDiagnosticState m_variable;
        #endregion
    }
    #endregion
    #endif
    #endregion

    #region HistoricalDataConfigurationState Class
    #if (!OPCUA_EXCLUDE_HistoricalDataConfigurationState)
    /// <summary>
    /// Stores an instance of the HistoricalDataConfigurationType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoricalDataConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public HistoricalDataConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoricalDataConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (AggregateFunctions != null)
            {
                AggregateFunctions.Initialize(context, AggregateFunctions_InitializationString);
            }

            if (Definition != null)
            {
                Definition.Initialize(context, Definition_InitializationString);
            }

            if (MaxTimeInterval != null)
            {
                MaxTimeInterval.Initialize(context, MaxTimeInterval_InitializationString);
            }

            if (MinTimeInterval != null)
            {
                MinTimeInterval.Initialize(context, MinTimeInterval_InitializationString);
            }

            if (ExceptionDeviation != null)
            {
                ExceptionDeviation.Initialize(context, ExceptionDeviation_InitializationString);
            }

            if (ExceptionDeviationFormat != null)
            {
                ExceptionDeviationFormat.Initialize(context, ExceptionDeviationFormat_InitializationString);
            }

            if (StartOfArchive != null)
            {
                StartOfArchive.Initialize(context, StartOfArchive_InitializationString);
            }

            if (StartOfOnlineArchive != null)
            {
                StartOfOnlineArchive.Initialize(context, StartOfOnlineArchive_InitializationString);
            }
        }

        #region Initialization String
        private const string AggregateFunctions_InitializationString =
           "//////////8EYIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEAZC4ALwA9ZC4AAP////8AAAAA";

        private const string Definition_InitializationString =
           "//////////8VYIkKAgAAAAAACgAAAERlZmluaXRpb24BABQJAC4ARBQJAAAADP////8BAf////8AAAAA";

        private const string MaxTimeInterval_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1heFRpbWVJbnRlcnZhbAEAFQkALgBEFQkAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string MinTimeInterval_InitializationString =
           "//////////8VYIkKAgAAAAAADwAAAE1pblRpbWVJbnRlcnZhbAEAFgkALgBEFgkAAAEAIgH/////AQH/" +
           "////AAAAAA==";

        private const string ExceptionDeviation_InitializationString =
           "//////////8VYIkKAgAAAAAAEgAAAEV4Y2VwdGlvbkRldmlhdGlvbgEAFwkALgBEFwkAAAAL/////wEB" +
           "/////wAAAAA=";

        private const string ExceptionDeviationFormat_InitializationString =
           "//////////8VYIkKAgAAAAAAGAAAAEV4Y2VwdGlvbkRldmlhdGlvbkZvcm1hdAEAGAkALgBEGAkAAAEA" +
           "egP/////AQH/////AAAAAA==";

        private const string StartOfArchive_InitializationString =
           "//////////8VYIkKAgAAAAAADgAAAFN0YXJ0T2ZBcmNoaXZlAQDrLAAuAETrLAAAAQAmAf////8BAf//" +
           "//8AAAAA";

        private const string StartOfOnlineArchive_InitializationString =
           "//////////8VYIkKAgAAAAAAFAAAAFN0YXJ0T2ZPbmxpbmVBcmNoaXZlAQDsLAAuAETsLAAAAQAmAf//" +
           "//8BAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJwAAAEhpc3RvcmljYWxEYXRhQ29uZmlndXJhdGlvblR5cGVJbnN0YW5j" +
           "ZQEADgkBAA4J/////woAAAAEYIAKAQAAAAAAFgAAAEFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb24BAPMLAC8B" +
           "ALMr8wsAAP////8EAAAAFWCJCgIAAAAAABMAAABUcmVhdFVuY2VydGFpbkFzQmFkAQCgKwAuAESgKwAA" +
           "AAH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAAUGVyY2VudERhdGFCYWQBAKErAC4ARKErAAAAA///" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABQZXJjZW50RGF0YUdvb2QBAKIrAC4ARKIrAAAAA/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAABYAAABVc2VTbG9wZWRFeHRyYXBvbGF0aW9uAQCjKwAuAESjKwAAAAH/" +
           "////AQH/////AAAAAARggAoBAAAAAAASAAAAQWdncmVnYXRlRnVuY3Rpb25zAQBkLgAvAD1kLgAA////" +
           "/wAAAAAVYIkKAgAAAAAABwAAAFN0ZXBwZWQBABMJAC4ARBMJAAAAAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABEZWZpbml0aW9uAQAUCQAuAEQUCQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAPAAAA" +
           "TWF4VGltZUludGVydmFsAQAVCQAuAEQVCQAAAQAiAf////8BAf////8AAAAAFWCJCgIAAAAAAA8AAABN" +
           "aW5UaW1lSW50ZXJ2YWwBABYJAC4ARBYJAAABACIB/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAEV4" +
           "Y2VwdGlvbkRldmlhdGlvbgEAFwkALgBEFwkAAAAL/////wEB/////wAAAAAVYIkKAgAAAAAAGAAAAEV4" +
           "Y2VwdGlvbkRldmlhdGlvbkZvcm1hdAEAGAkALgBEGAkAAAEAegP/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAOAAAAU3RhcnRPZkFyY2hpdmUBAOssAC4AROssAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FAAAAFN0YXJ0T2ZPbmxpbmVBcmNoaXZlAQDsLAAuAETsLAAAAQAmAf////8BAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public AggregateConfigurationState AggregateConfiguration
        {
            get
            {
                return m_aggregateConfiguration;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateConfiguration, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateConfiguration = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> Stepped
        {
            get
            {
                return m_stepped;
            }

            set
            {
                if (!Object.ReferenceEquals(m_stepped, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_stepped = value;
            }
        }

        /// <remarks />
        public PropertyState<string> Definition
        {
            get
            {
                return m_definition;
            }

            set
            {
                if (!Object.ReferenceEquals(m_definition, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_definition = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MaxTimeInterval
        {
            get
            {
                return m_maxTimeInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTimeInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTimeInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> MinTimeInterval
        {
            get
            {
                return m_minTimeInterval;
            }

            set
            {
                if (!Object.ReferenceEquals(m_minTimeInterval, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_minTimeInterval = value;
            }
        }

        /// <remarks />
        public PropertyState<double> ExceptionDeviation
        {
            get
            {
                return m_exceptionDeviation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exceptionDeviation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exceptionDeviation = value;
            }
        }

        /// <remarks />
        public PropertyState<ExceptionDeviationFormat> ExceptionDeviationFormat
        {
            get
            {
                return m_exceptionDeviationFormat;
            }

            set
            {
                if (!Object.ReferenceEquals(m_exceptionDeviationFormat, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_exceptionDeviationFormat = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfArchive
        {
            get
            {
                return m_startOfArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfArchive = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartOfOnlineArchive
        {
            get
            {
                return m_startOfOnlineArchive;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startOfOnlineArchive, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startOfOnlineArchive = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_aggregateConfiguration != null)
            {
                children.Add(m_aggregateConfiguration);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            if (m_stepped != null)
            {
                children.Add(m_stepped);
            }

            if (m_definition != null)
            {
                children.Add(m_definition);
            }

            if (m_maxTimeInterval != null)
            {
                children.Add(m_maxTimeInterval);
            }

            if (m_minTimeInterval != null)
            {
                children.Add(m_minTimeInterval);
            }

            if (m_exceptionDeviation != null)
            {
                children.Add(m_exceptionDeviation);
            }

            if (m_exceptionDeviationFormat != null)
            {
                children.Add(m_exceptionDeviationFormat);
            }

            if (m_startOfArchive != null)
            {
                children.Add(m_startOfArchive);
            }

            if (m_startOfOnlineArchive != null)
            {
                children.Add(m_startOfOnlineArchive);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AggregateConfiguration:
                {
                    if (createOrReplace)
                    {
                        if (AggregateConfiguration == null)
                        {
                            if (replacement == null)
                            {
                                AggregateConfiguration = new AggregateConfigurationState(this);
                            }
                            else
                            {
                                AggregateConfiguration = (AggregateConfigurationState)replacement;
                            }
                        }
                    }

                    instance = AggregateConfiguration;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }

                case Opc.Ua.BrowseNames.Stepped:
                {
                    if (createOrReplace)
                    {
                        if (Stepped == null)
                        {
                            if (replacement == null)
                            {
                                Stepped = new PropertyState<bool>(this);
                            }
                            else
                            {
                                Stepped = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = Stepped;
                    break;
                }

                case Opc.Ua.BrowseNames.Definition:
                {
                    if (createOrReplace)
                    {
                        if (Definition == null)
                        {
                            if (replacement == null)
                            {
                                Definition = new PropertyState<string>(this);
                            }
                            else
                            {
                                Definition = (PropertyState<string>)replacement;
                            }
                        }
                    }

                    instance = Definition;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTimeInterval:
                {
                    if (createOrReplace)
                    {
                        if (MaxTimeInterval == null)
                        {
                            if (replacement == null)
                            {
                                MaxTimeInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                MaxTimeInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MaxTimeInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.MinTimeInterval:
                {
                    if (createOrReplace)
                    {
                        if (MinTimeInterval == null)
                        {
                            if (replacement == null)
                            {
                                MinTimeInterval = new PropertyState<double>(this);
                            }
                            else
                            {
                                MinTimeInterval = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = MinTimeInterval;
                    break;
                }

                case Opc.Ua.BrowseNames.ExceptionDeviation:
                {
                    if (createOrReplace)
                    {
                        if (ExceptionDeviation == null)
                        {
                            if (replacement == null)
                            {
                                ExceptionDeviation = new PropertyState<double>(this);
                            }
                            else
                            {
                                ExceptionDeviation = (PropertyState<double>)replacement;
                            }
                        }
                    }

                    instance = ExceptionDeviation;
                    break;
                }

                case Opc.Ua.BrowseNames.ExceptionDeviationFormat:
                {
                    if (createOrReplace)
                    {
                        if (ExceptionDeviationFormat == null)
                        {
                            if (replacement == null)
                            {
                                ExceptionDeviationFormat = new PropertyState<ExceptionDeviationFormat>(this);
                            }
                            else
                            {
                                ExceptionDeviationFormat = (PropertyState<ExceptionDeviationFormat>)replacement;
                            }
                        }
                    }

                    instance = ExceptionDeviationFormat;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfArchive;
                    break;
                }

                case Opc.Ua.BrowseNames.StartOfOnlineArchive:
                {
                    if (createOrReplace)
                    {
                        if (StartOfOnlineArchive == null)
                        {
                            if (replacement == null)
                            {
                                StartOfOnlineArchive = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartOfOnlineArchive = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartOfOnlineArchive;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private AggregateConfigurationState m_aggregateConfiguration;
        private FolderState m_aggregateFunctions;
        private PropertyState<bool> m_stepped;
        private PropertyState<string> m_definition;
        private PropertyState<double> m_maxTimeInterval;
        private PropertyState<double> m_minTimeInterval;
        private PropertyState<double> m_exceptionDeviation;
        private PropertyState<ExceptionDeviationFormat> m_exceptionDeviationFormat;
        private PropertyState<DateTime> m_startOfArchive;
        private PropertyState<DateTime> m_startOfOnlineArchive;
        #endregion
    }
    #endif
    #endregion

    #region HistoryServerCapabilitiesState Class
    #if (!OPCUA_EXCLUDE_HistoryServerCapabilitiesState)
    /// <summary>
    /// Stores an instance of the HistoryServerCapabilitiesType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HistoryServerCapabilitiesState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public HistoryServerCapabilitiesState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HistoryServerCapabilitiesType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJQAAAEhpc3RvcnlTZXJ2ZXJDYXBhYmlsaXRpZXNUeXBlSW5zdGFuY2UB" +
           "ABoJAQAaCf////8PAAAAFWCJCgIAAAAAABsAAABBY2Nlc3NIaXN0b3J5RGF0YUNhcGFiaWxpdHkBABsJ" +
           "AC4ARBsJAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAB0AAABBY2Nlc3NIaXN0b3J5RXZlbnRzQ2Fw" +
           "YWJpbGl0eQEAHAkALgBEHAkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAE1heFJldHVybkRh" +
           "dGFWYWx1ZXMBAAQsAC4ARAQsAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABQAAABNYXhSZXR1cm5F" +
           "dmVudFZhbHVlcwEABSwALgBEBSwAAAAH/////wEB/////wAAAAAVYIkKAgAAAAAAFAAAAEluc2VydERh" +
           "dGFDYXBhYmlsaXR5AQAeCQAuAEQeCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAVAAAAUmVwbGFj" +
           "ZURhdGFDYXBhYmlsaXR5AQAfCQAuAEQfCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAUAAAAVXBk" +
           "YXRlRGF0YUNhcGFiaWxpdHkBACAJAC4ARCAJAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAABMAAABE" +
           "ZWxldGVSYXdDYXBhYmlsaXR5AQAhCQAuAEQhCQAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAWAAAA" +
           "RGVsZXRlQXRUaW1lQ2FwYWJpbGl0eQEAIgkALgBEIgkAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "FQAAAEluc2VydEV2ZW50Q2FwYWJpbGl0eQEADiwALgBEDiwAAAAB/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAAFgAAAFJlcGxhY2VFdmVudENhcGFiaWxpdHkBAA8sAC4ARA8sAAAAAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAABUAAABVcGRhdGVFdmVudENhcGFiaWxpdHkBABAsAC4ARBAsAAAAAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAABUAAABEZWxldGVFdmVudENhcGFiaWxpdHkBAO0sAC4ARO0sAAAAAf////8BAf////8A" +
           "AAAAFWCJCgIAAAAAABoAAABJbnNlcnRBbm5vdGF0aW9uQ2FwYWJpbGl0eQEABiwALgBEBiwAAAAB////" +
           "/wEB/////wAAAAAEYIAKAQAAAAAAEgAAAEFnZ3JlZ2F0ZUZ1bmN0aW9ucwEApCsALwA9pCsAAP////8A" +
           "AAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> AccessHistoryDataCapability
        {
            get
            {
                return m_accessHistoryDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accessHistoryDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accessHistoryDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> AccessHistoryEventsCapability
        {
            get
            {
                return m_accessHistoryEventsCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_accessHistoryEventsCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_accessHistoryEventsCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReturnDataValues
        {
            get
            {
                return m_maxReturnDataValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReturnDataValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReturnDataValues = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxReturnEventValues
        {
            get
            {
                return m_maxReturnEventValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxReturnEventValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxReturnEventValues = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertDataCapability
        {
            get
            {
                return m_insertDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ReplaceDataCapability
        {
            get
            {
                return m_replaceDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_replaceDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_replaceDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UpdateDataCapability
        {
            get
            {
                return m_updateDataCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateDataCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateDataCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteRawCapability
        {
            get
            {
                return m_deleteRawCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteRawCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteRawCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteAtTimeCapability
        {
            get
            {
                return m_deleteAtTimeCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteAtTimeCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteAtTimeCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertEventCapability
        {
            get
            {
                return m_insertEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> ReplaceEventCapability
        {
            get
            {
                return m_replaceEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_replaceEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_replaceEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UpdateEventCapability
        {
            get
            {
                return m_updateEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> DeleteEventCapability
        {
            get
            {
                return m_deleteEventCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_deleteEventCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_deleteEventCapability = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> InsertAnnotationCapability
        {
            get
            {
                return m_insertAnnotationCapability;
            }

            set
            {
                if (!Object.ReferenceEquals(m_insertAnnotationCapability, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_insertAnnotationCapability = value;
            }
        }

        /// <remarks />
        public FolderState AggregateFunctions
        {
            get
            {
                return m_aggregateFunctions;
            }

            set
            {
                if (!Object.ReferenceEquals(m_aggregateFunctions, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_aggregateFunctions = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_accessHistoryDataCapability != null)
            {
                children.Add(m_accessHistoryDataCapability);
            }

            if (m_accessHistoryEventsCapability != null)
            {
                children.Add(m_accessHistoryEventsCapability);
            }

            if (m_maxReturnDataValues != null)
            {
                children.Add(m_maxReturnDataValues);
            }

            if (m_maxReturnEventValues != null)
            {
                children.Add(m_maxReturnEventValues);
            }

            if (m_insertDataCapability != null)
            {
                children.Add(m_insertDataCapability);
            }

            if (m_replaceDataCapability != null)
            {
                children.Add(m_replaceDataCapability);
            }

            if (m_updateDataCapability != null)
            {
                children.Add(m_updateDataCapability);
            }

            if (m_deleteRawCapability != null)
            {
                children.Add(m_deleteRawCapability);
            }

            if (m_deleteAtTimeCapability != null)
            {
                children.Add(m_deleteAtTimeCapability);
            }

            if (m_insertEventCapability != null)
            {
                children.Add(m_insertEventCapability);
            }

            if (m_replaceEventCapability != null)
            {
                children.Add(m_replaceEventCapability);
            }

            if (m_updateEventCapability != null)
            {
                children.Add(m_updateEventCapability);
            }

            if (m_deleteEventCapability != null)
            {
                children.Add(m_deleteEventCapability);
            }

            if (m_insertAnnotationCapability != null)
            {
                children.Add(m_insertAnnotationCapability);
            }

            if (m_aggregateFunctions != null)
            {
                children.Add(m_aggregateFunctions);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.AccessHistoryDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (AccessHistoryDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                AccessHistoryDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AccessHistoryDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AccessHistoryDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.AccessHistoryEventsCapability:
                {
                    if (createOrReplace)
                    {
                        if (AccessHistoryEventsCapability == null)
                        {
                            if (replacement == null)
                            {
                                AccessHistoryEventsCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                AccessHistoryEventsCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = AccessHistoryEventsCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReturnDataValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxReturnDataValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxReturnDataValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReturnDataValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReturnDataValues;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxReturnEventValues:
                {
                    if (createOrReplace)
                    {
                        if (MaxReturnEventValues == null)
                        {
                            if (replacement == null)
                            {
                                MaxReturnEventValues = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxReturnEventValues = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxReturnEventValues;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.ReplaceDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (ReplaceDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                ReplaceDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ReplaceDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ReplaceDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateDataCapability:
                {
                    if (createOrReplace)
                    {
                        if (UpdateDataCapability == null)
                        {
                            if (replacement == null)
                            {
                                UpdateDataCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UpdateDataCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UpdateDataCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteRawCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteRawCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteRawCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteRawCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteRawCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteAtTimeCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteAtTimeCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteAtTimeCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteAtTimeCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteAtTimeCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.ReplaceEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (ReplaceEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                ReplaceEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                ReplaceEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = ReplaceEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (UpdateEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                UpdateEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UpdateEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UpdateEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.DeleteEventCapability:
                {
                    if (createOrReplace)
                    {
                        if (DeleteEventCapability == null)
                        {
                            if (replacement == null)
                            {
                                DeleteEventCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                DeleteEventCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = DeleteEventCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.InsertAnnotationCapability:
                {
                    if (createOrReplace)
                    {
                        if (InsertAnnotationCapability == null)
                        {
                            if (replacement == null)
                            {
                                InsertAnnotationCapability = new PropertyState<bool>(this);
                            }
                            else
                            {
                                InsertAnnotationCapability = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = InsertAnnotationCapability;
                    break;
                }

                case Opc.Ua.BrowseNames.AggregateFunctions:
                {
                    if (createOrReplace)
                    {
                        if (AggregateFunctions == null)
                        {
                            if (replacement == null)
                            {
                                AggregateFunctions = new FolderState(this);
                            }
                            else
                            {
                                AggregateFunctions = (FolderState)replacement;
                            }
                        }
                    }

                    instance = AggregateFunctions;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_accessHistoryDataCapability;
        private PropertyState<bool> m_accessHistoryEventsCapability;
        private PropertyState<uint> m_maxReturnDataValues;
        private PropertyState<uint> m_maxReturnEventValues;
        private PropertyState<bool> m_insertDataCapability;
        private PropertyState<bool> m_replaceDataCapability;
        private PropertyState<bool> m_updateDataCapability;
        private PropertyState<bool> m_deleteRawCapability;
        private PropertyState<bool> m_deleteAtTimeCapability;
        private PropertyState<bool> m_insertEventCapability;
        private PropertyState<bool> m_replaceEventCapability;
        private PropertyState<bool> m_updateEventCapability;
        private PropertyState<bool> m_deleteEventCapability;
        private PropertyState<bool> m_insertAnnotationCapability;
        private FolderState m_aggregateFunctions;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryEventUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryEventUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryEventUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryEventUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryEventUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryEventUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeUV2ZW50VXBkYXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBALcLAQC3C/////8UAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDaDQAuAETaDQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDbDQAuAETbDQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEA3A0ALgBE3A0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBAN0NAC4ARN0NAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQDeDQAuAETeDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA3w0A" +
           "LgBE3w0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDgDQAuAETgDQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDhDQAuAEThDQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAOINAC4AROINAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAOMNAC4AROMNAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEA5A0ALgBE5A0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQDlDQAuAETlDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQDmDQAuAETmDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQDnDQAuAETnDQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJ" +
           "ZAEA6A0ALgBE6A0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAQDRCwAu" +
           "AETRCwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAUAAAAUGVyZm9ybUluc2VydFJlcGxhY2UBANQL" +
           "AC4ARNQLAAABAB0s/////wEB/////wAAAAAVYIkKAgAAAAAABgAAAEZpbHRlcgEAuwsALgBEuwsAAAEA" +
           "1QL/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATmV3VmFsdWVzAQDVCwAuAETVCwAAAQCYAwEAAAAB" +
           "Af////8AAAAAFWCJCgIAAAAAAAkAAABPbGRWYWx1ZXMBANYLAC4ARNYLAAABAJgDAQAAAAEB/////wAA" +
           "AAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<EventFilter> Filter
        {
            get
            {
                return m_filter;
            }

            set
            {
                if (!Object.ReferenceEquals(m_filter, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_filter = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_filter != null)
            {
                children.Add(m_filter);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.Filter:
                {
                    if (createOrReplace)
                    {
                        if (Filter == null)
                        {
                            if (replacement == null)
                            {
                                Filter = new PropertyState<EventFilter>(this);
                            }
                            else
                            {
                                Filter = (PropertyState<EventFilter>)replacement;
                            }
                        }
                    }

                    instance = Filter;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<HistoryEventFieldList[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<HistoryEventFieldList[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<HistoryEventFieldList[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<HistoryEventFieldList[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<EventFilter> m_filter;
        private PropertyState<HistoryEventFieldList[]> m_newValues;
        private PropertyState<HistoryEventFieldList[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryValueUpdateEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryValueUpdateEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryValueUpdateEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryValueUpdateEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryValueUpdateEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryValueUpdateEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeVZhbHVlVXBkYXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAL4LAQC+C/////8TAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQDpDQAuAETpDQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQDqDQAuAETqDQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEA6w0ALgBE6w0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBAOwNAC4AROwNAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQDtDQAuAETtDQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEA7g0A" +
           "LgBE7g0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQDvDQAuAETvDQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQDwDQAuAETwDQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAPENAC4ARPENAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAPINAC4ARPINAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEA8w0ALgBE8w0AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQD0DQAuAET0DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQD1DQAuAET1DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQD2DQAuAET2DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJ" +
           "ZAEA9w0ALgBE9w0AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAQDSCwAu" +
           "AETSCwAAABH/////AQH/////AAAAABVgiQoCAAAAAAAUAAAAUGVyZm9ybUluc2VydFJlcGxhY2UBANcL" +
           "AC4ARNcLAAABAB0s/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE5ld1ZhbHVlcwEA2AsALgBE2AsA" +
           "AAAXAQAAAAEB/////wAAAAAVYIkKAgAAAAAACQAAAE9sZFZhbHVlcwEA2QsALgBE2QsAAAAXAQAAAAEB" +
           "/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }

        /// <remarks />
        public PropertyState<PerformUpdateType> PerformInsertReplace
        {
            get
            {
                return m_performInsertReplace;
            }

            set
            {
                if (!Object.ReferenceEquals(m_performInsertReplace, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_performInsertReplace = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> NewValues
        {
            get
            {
                return m_newValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_newValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_newValues = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            if (m_performInsertReplace != null)
            {
                children.Add(m_performInsertReplace);
            }

            if (m_newValues != null)
            {
                children.Add(m_newValues);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }

                case Opc.Ua.BrowseNames.PerformInsertReplace:
                {
                    if (createOrReplace)
                    {
                        if (PerformInsertReplace == null)
                        {
                            if (replacement == null)
                            {
                                PerformInsertReplace = new PropertyState<PerformUpdateType>(this);
                            }
                            else
                            {
                                PerformInsertReplace = (PropertyState<PerformUpdateType>)replacement;
                            }
                        }
                    }

                    instance = PerformInsertReplace;
                    break;
                }

                case Opc.Ua.BrowseNames.NewValues:
                {
                    if (createOrReplace)
                    {
                        if (NewValues == null)
                        {
                            if (replacement == null)
                            {
                                NewValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                NewValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = NewValues;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        private PropertyState<PerformUpdateType> m_performInsertReplace;
        private PropertyState<DataValue[]> m_newValues;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryDeleteEventState : AuditHistoryUpdateEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIwAAAEF1ZGl0SGlzdG9yeURlbGV0ZUV2ZW50VHlwZUluc3RhbmNlAQDE" +
           "CwEAxAv/////EAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEA+A0ALgBE+A0AAAAP/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEA+Q0ALgBE+Q0AAAAR/////wEB/////wAAAAAVYIkKAgAA" +
           "AAAACgAAAFNvdXJjZU5vZGUBAPoNAC4ARPoNAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoAAABT" +
           "b3VyY2VOYW1lAQD7DQAuAET7DQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA/A0A" +
           "LgBE/A0AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBAP0NAC4ARP0N" +
           "AAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEA/g0ALgBE/g0AAAEA0CL/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEA/w0ALgBE/w0AAAAV/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAADgAuAEQADgAAAAX/////AQH/////AAAAABVgiQoCAAAA" +
           "AAAPAAAAQWN0aW9uVGltZVN0YW1wAQABDgAuAEQBDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAYAAABTdGF0dXMBAAIOAC4ARAIOAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2ZXJJ" +
           "ZAEAAw4ALgBEAw4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50cnlJ" +
           "ZAEABA4ALgBEBA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEABQ4A" +
           "LgBEBQ4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFUeXBlSWQBAAYO" +
           "AC4ARAYOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABVcGRhdGVkTm9kZQEA0wsALgBE0wsA" +
           "AAAR/////wEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> UpdatedNode
        {
            get
            {
                return m_updatedNode;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updatedNode, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updatedNode = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_updatedNode != null)
            {
                children.Add(m_updatedNode);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.UpdatedNode:
                {
                    if (createOrReplace)
                    {
                        if (UpdatedNode == null)
                        {
                            if (replacement == null)
                            {
                                UpdatedNode = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                UpdatedNode = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = UpdatedNode;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_updatedNode;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryRawModifyDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryRawModifyDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryRawModifyDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryRawModifyDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryRawModifyDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryRawModifyDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAALAAAAEF1ZGl0SGlzdG9yeVJhd01vZGlmeURlbGV0ZUV2ZW50VHlwZUlu" +
           "c3RhbmNlAQDGCwEAxgv/////FAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEABw4ALgBEBw4AAAAP////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEACA4ALgBECA4AAAAR/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBAAkOAC4ARAkOAAAAEf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAoAAABTb3VyY2VOYW1lAQAKDgAuAEQKDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAA" +
           "VGltZQEACw4ALgBECw4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUB" +
           "AAwOAC4ARAwOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEADQ4ALgBE" +
           "DQ4AAAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEADg4ALgBEDg4AAAAV////" +
           "/wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAPDgAuAEQPDgAAAAX/////AQH/////AAAA" +
           "ABVgiQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQAQDgAuAEQQDgAAAQAmAf////8BAf////8AAAAA" +
           "FWCJCgIAAAAAAAYAAABTdGF0dXMBABEOAC4ARBEOAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgA" +
           "AABTZXJ2ZXJJZAEAEg4ALgBEEg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1" +
           "ZGl0RW50cnlJZAEAEw4ALgBEEw4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVz" +
           "ZXJJZAEAFA4ALgBEFA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFU" +
           "eXBlSWQBABUOAC4ARBUOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABVcGRhdGVkTm9kZQEA" +
           "Fg4ALgBEFg4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAAEAAAAElzRGVsZXRlTW9kaWZpZWQBAMcL" +
           "AC4ARMcLAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABTdGFydFRpbWUBAMgLAC4ARMgLAAAB" +
           "ACYB/////wEB/////wAAAAAVYIkKAgAAAAAABwAAAEVuZFRpbWUBAMkLAC4ARMkLAAABACYB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAE9sZFZhbHVlcwEA2gsALgBE2gsAAAAXAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> IsDeleteModified
        {
            get
            {
                return m_isDeleteModified;
            }

            set
            {
                if (!Object.ReferenceEquals(m_isDeleteModified, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_isDeleteModified = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> StartTime
        {
            get
            {
                return m_startTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_startTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_startTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DateTime> EndTime
        {
            get
            {
                return m_endTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_endTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_endTime = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_isDeleteModified != null)
            {
                children.Add(m_isDeleteModified);
            }

            if (m_startTime != null)
            {
                children.Add(m_startTime);
            }

            if (m_endTime != null)
            {
                children.Add(m_endTime);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.IsDeleteModified:
                {
                    if (createOrReplace)
                    {
                        if (IsDeleteModified == null)
                        {
                            if (replacement == null)
                            {
                                IsDeleteModified = new PropertyState<bool>(this);
                            }
                            else
                            {
                                IsDeleteModified = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = IsDeleteModified;
                    break;
                }

                case Opc.Ua.BrowseNames.StartTime:
                {
                    if (createOrReplace)
                    {
                        if (StartTime == null)
                        {
                            if (replacement == null)
                            {
                                StartTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                StartTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = StartTime;
                    break;
                }

                case Opc.Ua.BrowseNames.EndTime:
                {
                    if (createOrReplace)
                    {
                        if (EndTime == null)
                        {
                            if (replacement == null)
                            {
                                EndTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                EndTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = EndTime;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_isDeleteModified;
        private PropertyState<DateTime> m_startTime;
        private PropertyState<DateTime> m_endTime;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryAtTimeDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryAtTimeDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryAtTimeDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryAtTimeDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryAtTimeDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryAtTimeDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKQAAAEF1ZGl0SGlzdG9yeUF0VGltZURlbGV0ZUV2ZW50VHlwZUluc3Rh" +
           "bmNlAQDLCwEAywv/////EgAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAFw4ALgBEFw4AAAAP/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAGA4ALgBEGA4AAAAR/////wEB/////wAAAAAV" +
           "YIkKAgAAAAAACgAAAFNvdXJjZU5vZGUBABkOAC4ARBkOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAA" +
           "AAoAAABTb3VyY2VOYW1lAQAaDgAuAEQaDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGlt" +
           "ZQEAGw4ALgBEGw4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBABwO" +
           "AC4ARBwOAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAHQ4ALgBEHQ4A" +
           "AAEA0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAHg4ALgBEHg4AAAAV/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAfDgAuAEQfDgAAAAX/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQAgDgAuAEQgDgAAAQAmAf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAAYAAABTdGF0dXMBACEOAC4ARCEOAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABT" +
           "ZXJ2ZXJJZAEAIg4ALgBEIg4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0" +
           "RW50cnlJZAEAIw4ALgBEIw4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJ" +
           "ZAEAJA4ALgBEJA4AAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEwAAAFBhcmFtZXRlckRhdGFUeXBl" +
           "SWQBACUOAC4ARCUOAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABVcGRhdGVkTm9kZQEAJg4A" +
           "LgBEJg4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFJlcVRpbWVzAQDMCwAuAETMCwAAAQAm" +
           "AQEAAAABAf////8AAAAAFWCJCgIAAAAAAAkAAABPbGRWYWx1ZXMBAM0LAC4ARM0LAAAAFwEAAAABAf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime[]> ReqTimes
        {
            get
            {
                return m_reqTimes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_reqTimes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_reqTimes = value;
            }
        }

        /// <remarks />
        public PropertyState<DataValue[]> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_reqTimes != null)
            {
                children.Add(m_reqTimes);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.ReqTimes:
                {
                    if (createOrReplace)
                    {
                        if (ReqTimes == null)
                        {
                            if (replacement == null)
                            {
                                ReqTimes = new PropertyState<DateTime[]>(this);
                            }
                            else
                            {
                                ReqTimes = (PropertyState<DateTime[]>)replacement;
                            }
                        }
                    }

                    instance = ReqTimes;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<DataValue[]>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<DataValue[]>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime[]> m_reqTimes;
        private PropertyState<DataValue[]> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region AuditHistoryEventDeleteEventState Class
    #if (!OPCUA_EXCLUDE_AuditHistoryEventDeleteEventState)
    /// <summary>
    /// Stores an instance of the AuditHistoryEventDeleteEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AuditHistoryEventDeleteEventState : AuditHistoryDeleteEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AuditHistoryEventDeleteEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AuditHistoryEventDeleteEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAEF1ZGl0SGlzdG9yeUV2ZW50RGVsZXRlRXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAM4LAQDOC/////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQAnDgAuAEQnDgAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQAoDgAuAEQoDgAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEAKQ4ALgBEKQ4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBACoOAC4ARCoOAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQArDgAuAEQrDgAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEALA4A" +
           "LgBELA4AAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQAtDgAuAEQtDgAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQAuDgAuAEQuDgAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAC8OAC4ARC8OAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABADAOAC4ARDAOAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEAMQ4ALgBEMQ4AAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQAyDgAuAEQyDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQAzDgAuAEQzDgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQA0DgAuAEQ0DgAAAAz/////AQH/////AAAAABVgiQoCAAAAAAATAAAAUGFyYW1ldGVyRGF0YVR5cGVJ" +
           "ZAEANQ4ALgBENQ4AAAAR/////wEB/////wAAAAAVYIkKAgAAAAAACwAAAFVwZGF0ZWROb2RlAQA2DgAu" +
           "AEQ2DgAAABH/////AQH/////AAAAABVgiQoCAAAAAAAIAAAARXZlbnRJZHMBAM8LAC4ARM8LAAAADwEA" +
           "AAABAf////8AAAAAFWCJCgIAAAAAAAkAAABPbGRWYWx1ZXMBANALAC4ARNALAAABAJgD/////wEB////" +
           "/wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<byte[][]> EventIds
        {
            get
            {
                return m_eventIds;
            }

            set
            {
                if (!Object.ReferenceEquals(m_eventIds, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_eventIds = value;
            }
        }

        /// <remarks />
        public PropertyState<HistoryEventFieldList> OldValues
        {
            get
            {
                return m_oldValues;
            }

            set
            {
                if (!Object.ReferenceEquals(m_oldValues, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_oldValues = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_eventIds != null)
            {
                children.Add(m_eventIds);
            }

            if (m_oldValues != null)
            {
                children.Add(m_oldValues);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.EventIds:
                {
                    if (createOrReplace)
                    {
                        if (EventIds == null)
                        {
                            if (replacement == null)
                            {
                                EventIds = new PropertyState<byte[][]>(this);
                            }
                            else
                            {
                                EventIds = (PropertyState<byte[][]>)replacement;
                            }
                        }
                    }

                    instance = EventIds;
                    break;
                }

                case Opc.Ua.BrowseNames.OldValues:
                {
                    if (createOrReplace)
                    {
                        if (OldValues == null)
                        {
                            if (replacement == null)
                            {
                                OldValues = new PropertyState<HistoryEventFieldList>(this);
                            }
                            else
                            {
                                OldValues = (PropertyState<HistoryEventFieldList>)replacement;
                            }
                        }
                    }

                    instance = OldValues;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<byte[][]> m_eventIds;
        private PropertyState<HistoryEventFieldList> m_oldValues;
        #endregion
    }
    #endif
    #endregion

    #region OpenWithMasksMethodState Class
    #if (!OPCUA_EXCLUDE_OpenWithMasksMethodState)
    /// <summary>
    /// Stores an instance of the OpenWithMasksMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class OpenWithMasksMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public OpenWithMasksMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new OpenWithMasksMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAFwAAAE9wZW5XaXRoTWFza3NNZXRob2RUeXBlAQDhMAAvAQDhMOEwAAAB" +
           "Af////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA4jAALgBE4jAAAJYBAAAAAQAqAQEU" +
           "AAAABQAAAE1hc2tzAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1" +
           "dEFyZ3VtZW50cwEA4zAALgBE4zAAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public OpenWithMasksMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint masks = (uint)_inputArguments[0];

            uint fileHandle = (uint)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    masks,
                    ref fileHandle);
            }

            _outputArguments[0] = fileHandle;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult OpenWithMasksMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint masks,
        ref uint fileHandle);
    #endif
    #endregion

    #region CloseAndUpdateMethodState Class
    #if (!OPCUA_EXCLUDE_CloseAndUpdateMethodState)
    /// <summary>
    /// Stores an instance of the CloseAndUpdateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CloseAndUpdateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CloseAndUpdateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CloseAndUpdateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAENsb3NlQW5kVXBkYXRlTWV0aG9kVHlwZQEA5DAALwEA5DDkMAAA" +
           "AQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAKAxAC4ARKAxAACWAQAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAA" +
           "AE91dHB1dEFyZ3VtZW50cwEA5TAALgBE5TAAAJYBAAAAAQAqAQEjAAAAFAAAAEFwcGx5Q2hhbmdlc1Jl" +
           "cXVpcmVkAAH/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CloseAndUpdateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            uint fileHandle = (uint)_inputArguments[0];

            bool applyChangesRequired = (bool)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    fileHandle,
                    ref applyChangesRequired);
            }

            _outputArguments[0] = applyChangesRequired;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CloseAndUpdateMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        uint fileHandle,
        ref bool applyChangesRequired);
    #endif
    #endregion

    #region AddCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_AddCertificateMethodState)
    /// <summary>
    /// Stores an instance of the AddCertificateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AddCertificateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AddCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new AddCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGAAAAEFkZENlcnRpZmljYXRlTWV0aG9kVHlwZQEA5jAALwEA5jDmMAAA" +
           "AQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOcwAC4AROcwAACWAgAAAAEAKgEB" +
           "GgAAAAsAAABDZXJ0aWZpY2F0ZQAP/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmlj" +
           "YXRlAAH/////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public AddCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte[] certificate = (byte[])_inputArguments[0];
            bool isTrustedCertificate = (bool)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificate,
                    isTrustedCertificate);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult AddCertificateMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        byte[] certificate,
        bool isTrustedCertificate);
    #endif
    #endregion

    #region RemoveCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_RemoveCertificateMethodState)
    /// <summary>
    /// Stores an instance of the RemoveCertificateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RemoveCertificateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RemoveCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new RemoveCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFJlbW92ZUNlcnRpZmljYXRlTWV0aG9kVHlwZQEA6DAALwEA6DDo" +
           "MAAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAOkwAC4AROkwAACWAgAAAAEA" +
           "KgEBGQAAAAoAAABUaHVtYnByaW50AAz/////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlm" +
           "aWNhdGUAAf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public RemoveCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            string thumbprint = (string)_inputArguments[0];
            bool isTrustedCertificate = (bool)_inputArguments[1];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    thumbprint,
                    isTrustedCertificate);
            }

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult RemoveCertificateMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        string thumbprint,
        bool isTrustedCertificate);
    #endif
    #endregion

    #region TrustListState Class
    #if (!OPCUA_EXCLUDE_TrustListState)
    /// <summary>
    /// Stores an instance of the TrustListType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListState : FileState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TrustListState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (CloseAndUpdate != null)
            {
                CloseAndUpdate.Initialize(context, CloseAndUpdate_InitializationString);
            }

            if (AddCertificate != null)
            {
                AddCertificate.Initialize(context, AddCertificate_InitializationString);
            }

            if (RemoveCertificate != null)
            {
                RemoveCertificate.Initialize(context, RemoveCertificate_InitializationString);
            }
        }

        #region Initialization String
        private const string CloseAndUpdate_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAENsb3NlQW5kVXBkYXRlAQACMQAvAQACMQIxAAABAf////8CAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAoTEALgBEoTEAAJYBAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJn" +
           "dW1lbnRzAQADMQAuAEQDMQAAlgEAAAABACoBASMAAAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQAAf//" +
           "//8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";

        private const string AddCertificate_InitializationString =
           "//////////8EYYIKBAAAAAAADgAAAEFkZENlcnRpZmljYXRlAQAEMQAvAQAEMQQxAAABAf////8BAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABTEALgBEBTEAAJYCAAAAAQAqAQEaAAAACwAAAENl" +
           "cnRpZmljYXRlAA//////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8A" +
           "AAAAAAEAKAEBAAAAAQH/////AAAAAA==";

        private const string RemoveCertificate_InitializationString =
           "//////////8EYYIKBAAAAAAAEQAAAFJlbW92ZUNlcnRpZmljYXRlAQAGMQAvAQAGMQYxAAABAf////8B" +
           "AAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEABzEALgBEBzEAAJYCAAAAAQAqAQEZAAAACgAA" +
           "AFRodW1icHJpbnQADP////8AAAAAAAEAKgEBIwAAABQAAABJc1RydXN0ZWRDZXJ0aWZpY2F0ZQAB////" +
           "/wAAAAAAAQAoAQEAAAABAf////8AAAAA";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFQAAAFRydXN0TGlzdFR5cGVJbnN0YW5jZQEA6jABAOow/////w8AAAAV" +
           "YIkKAgAAAAAABAAAAFNpemUBAOswAC4AROswAAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABX" +
           "cml0YWJsZQEAmjEALgBEmjEAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJs" +
           "ZQEAmzEALgBEmzEAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEA7jAALgBE" +
           "7jAAAAAF/////wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAO8wAC8BADwt7zAAAAEB/////wIA" +
           "AAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQDwMAAuAETwMAAAlgEAAAABACoBARMAAAAEAAAA" +
           "TW9kZQAD/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVu" +
           "dHMBAPEwAC4ARPEwAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAA" +
           "AAEB/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQDyMAAvAQA/LfIwAAABAf////8BAAAAFWCpCgIA" +
           "AAAAAA4AAABJbnB1dEFyZ3VtZW50cwEA8zAALgBE8zAAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5k" +
           "bGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEA9DAALwEAQS30" +
           "MAAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAPUwAC4ARPUwAACWAgAAAAEA" +
           "KgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAA" +
           "AAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA9jAALgBE9jAA" +
           "AJYBAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAA" +
           "AAAFAAAAV3JpdGUBAPcwAC8BAEQt9zAAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQD4MAAuAET4MAAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQET" +
           "AAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9z" +
           "aXRpb24BAPkwAC8BAEYt+TAAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQD6" +
           "MAAuAET6MAAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf//" +
           "//8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAPswAC4ARPswAACWAQAAAAEAKgEBFwAA" +
           "AAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQ" +
           "b3NpdGlvbgEA/DAALwEASS38MAAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AP0wAC4ARP0wAACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAI" +
           "AAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFVw" +
           "ZGF0ZVRpbWUBAP4wAC4ARP4wAAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5XaXRo" +
           "TWFza3MBAP8wAC8BAP8w/zAAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAA" +
           "MQAuAEQAMQAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAA" +
           "ABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQABMQAuAEQBMQAAlgEAAAABACoBARkAAAAKAAAA" +
           "RmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAA4AAABDbG9zZUFu" +
           "ZFVwZGF0ZQEAAjEALwEAAjECMQAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMB" +
           "AKExAC4ARKExAACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB" +
           "/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAAzEALgBEAzEAAJYBAAAAAQAqAQEj" +
           "AAAAFAAAAEFwcGx5Q2hhbmdlc1JlcXVpcmVkAAH/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIK" +
           "BAAAAAAADgAAAEFkZENlcnRpZmljYXRlAQAEMQAvAQAEMQQxAAABAf////8BAAAAFWCpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEABTEALgBEBTEAAJYCAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//" +
           "////AAAAAAABACoBASMAAAAUAAAASXNUcnVzdGVkQ2VydGlmaWNhdGUAAf////8AAAAAAAEAKAEBAAAA" +
           "AQH/////AAAAAARhggoEAAAAAAARAAAAUmVtb3ZlQ2VydGlmaWNhdGUBAAYxAC8BAAYxBjEAAAEB////" +
           "/wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAHMQAuAEQHMQAAlgIAAAABACoBARkAAAAK" +
           "AAAAVGh1bWJwcmludAAM/////wAAAAAAAQAqAQEjAAAAFAAAAElzVHJ1c3RlZENlcnRpZmljYXRlAAH/" +
           "////AAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<DateTime> LastUpdateTime
        {
            get
            {
                return m_lastUpdateTime;
            }

            set
            {
                if (!Object.ReferenceEquals(m_lastUpdateTime, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_lastUpdateTime = value;
            }
        }

        /// <remarks />
        public OpenWithMasksMethodState OpenWithMasks
        {
            get
            {
                return m_openWithMasksMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_openWithMasksMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_openWithMasksMethod = value;
            }
        }

        /// <remarks />
        public CloseAndUpdateMethodState CloseAndUpdate
        {
            get
            {
                return m_closeAndUpdateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_closeAndUpdateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_closeAndUpdateMethod = value;
            }
        }

        /// <remarks />
        public AddCertificateMethodState AddCertificate
        {
            get
            {
                return m_addCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_addCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_addCertificateMethod = value;
            }
        }

        /// <remarks />
        public RemoveCertificateMethodState RemoveCertificate
        {
            get
            {
                return m_removeCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_removeCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_removeCertificateMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_lastUpdateTime != null)
            {
                children.Add(m_lastUpdateTime);
            }

            if (m_openWithMasksMethod != null)
            {
                children.Add(m_openWithMasksMethod);
            }

            if (m_closeAndUpdateMethod != null)
            {
                children.Add(m_closeAndUpdateMethod);
            }

            if (m_addCertificateMethod != null)
            {
                children.Add(m_addCertificateMethod);
            }

            if (m_removeCertificateMethod != null)
            {
                children.Add(m_removeCertificateMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.LastUpdateTime:
                {
                    if (createOrReplace)
                    {
                        if (LastUpdateTime == null)
                        {
                            if (replacement == null)
                            {
                                LastUpdateTime = new PropertyState<DateTime>(this);
                            }
                            else
                            {
                                LastUpdateTime = (PropertyState<DateTime>)replacement;
                            }
                        }
                    }

                    instance = LastUpdateTime;
                    break;
                }

                case Opc.Ua.BrowseNames.OpenWithMasks:
                {
                    if (createOrReplace)
                    {
                        if (OpenWithMasks == null)
                        {
                            if (replacement == null)
                            {
                                OpenWithMasks = new OpenWithMasksMethodState(this);
                            }
                            else
                            {
                                OpenWithMasks = (OpenWithMasksMethodState)replacement;
                            }
                        }
                    }

                    instance = OpenWithMasks;
                    break;
                }

                case Opc.Ua.BrowseNames.CloseAndUpdate:
                {
                    if (createOrReplace)
                    {
                        if (CloseAndUpdate == null)
                        {
                            if (replacement == null)
                            {
                                CloseAndUpdate = new CloseAndUpdateMethodState(this);
                            }
                            else
                            {
                                CloseAndUpdate = (CloseAndUpdateMethodState)replacement;
                            }
                        }
                    }

                    instance = CloseAndUpdate;
                    break;
                }

                case Opc.Ua.BrowseNames.AddCertificate:
                {
                    if (createOrReplace)
                    {
                        if (AddCertificate == null)
                        {
                            if (replacement == null)
                            {
                                AddCertificate = new AddCertificateMethodState(this);
                            }
                            else
                            {
                                AddCertificate = (AddCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = AddCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.RemoveCertificate:
                {
                    if (createOrReplace)
                    {
                        if (RemoveCertificate == null)
                        {
                            if (replacement == null)
                            {
                                RemoveCertificate = new RemoveCertificateMethodState(this);
                            }
                            else
                            {
                                RemoveCertificate = (RemoveCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = RemoveCertificate;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<DateTime> m_lastUpdateTime;
        private OpenWithMasksMethodState m_openWithMasksMethod;
        private CloseAndUpdateMethodState m_closeAndUpdateMethod;
        private AddCertificateMethodState m_addCertificateMethod;
        private RemoveCertificateMethodState m_removeCertificateMethod;
        #endregion
    }
    #endif
    #endregion

    #region CertificateGroupState Class
    #if (!OPCUA_EXCLUDE_CertificateGroupState)
    /// <summary>
    /// Stores an instance of the CertificateGroupType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateGroupState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateGroupState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateGroupType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAENlcnRpZmljYXRlR3JvdXBUeXBlSW5zdGFuY2UBAAsxAQALMf//" +
           "//8CAAAABGCACgEAAAAAAAkAAABUcnVzdExpc3QBAB81AC8BAOowHzUAAP////8MAAAAFWCJCgIAAAAA" +
           "AAQAAABTaXplAQAgNQAuAEQgNQAAAAn/////AQH/////AAAAABVgiQoCAAAAAAAIAAAAV3JpdGFibGUB" +
           "ACE1AC4ARCE1AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwAAABVc2VyV3JpdGFibGUBACI1AC4A" +
           "RCI1AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVuQ291bnQBACM1AC4ARCM1AAAABf//" +
           "//8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQAlNQAvAQA8LSU1AAABAf////8CAAAAFWCpCgIA" +
           "AAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJjUALgBEJjUAAJYBAAAAAQAqAQETAAAABAAAAE1vZGUAA///" +
           "//8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAnNQAu" +
           "AEQnNQAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8A" +
           "AAAABGGCCgQAAAAAAAUAAABDbG9zZQEAKDUALwEAPy0oNQAAAQH/////AQAAABVgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBACk1AC4ARCk1AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////" +
           "AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJlYWQBACo1AC8BAEEtKjUAAAEB////" +
           "/wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQArNQAuAEQrNQAAlgIAAAABACoBARkAAAAK" +
           "AAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExlbmd0aAAG/////wAAAAAAAQAoAQEA" +
           "AAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBACw1AC4ARCw1AACWAQAAAAEA" +
           "KgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAFdy" +
           "aXRlAQAtNQAvAQBELS01AAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEALjUA" +
           "LgBELjUAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBEwAAAAQAAABE" +
           "YXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAEdldFBvc2l0aW9uAQAv" +
           "NQAvAQBGLS81AAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAMDUALgBEMDUA" +
           "AJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAxNQAuAEQxNQAAlgEAAAABACoBARcAAAAIAAAAUG9z" +
           "aXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAU2V0UG9zaXRpb24B" +
           "ADI1AC8BAEktMjUAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAzNQAuAEQz" +
           "NQAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEXAAAACAAAAFBvc2l0" +
           "aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAADgAAAExhc3RVcGRhdGVUaW1l" +
           "AQA0NQAuAEQ0NQAAAQAmAf////8BAf////8AAAAABGGCCgQAAAAAAA0AAABPcGVuV2l0aE1hc2tzAQA1" +
           "NQAvAQD/MDU1AAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEANjUALgBENjUA" +
           "AJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEANzUALgBENzUAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5k" +
           "bGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAQAAAAQ2VydGlmaWNhdGVUeXBl" +
           "cwEAPzUALgBEPzUAAAARAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public TrustListState TrustList
        {
            get
            {
                return m_trustList;
            }

            set
            {
                if (!Object.ReferenceEquals(m_trustList, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_trustList = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId[]> CertificateTypes
        {
            get
            {
                return m_certificateTypes;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateTypes, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateTypes = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_trustList != null)
            {
                children.Add(m_trustList);
            }

            if (m_certificateTypes != null)
            {
                children.Add(m_certificateTypes);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TrustList:
                {
                    if (createOrReplace)
                    {
                        if (TrustList == null)
                        {
                            if (replacement == null)
                            {
                                TrustList = new TrustListState(this);
                            }
                            else
                            {
                                TrustList = (TrustListState)replacement;
                            }
                        }
                    }

                    instance = TrustList;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateTypes:
                {
                    if (createOrReplace)
                    {
                        if (CertificateTypes == null)
                        {
                            if (replacement == null)
                            {
                                CertificateTypes = new PropertyState<NodeId[]>(this);
                            }
                            else
                            {
                                CertificateTypes = (PropertyState<NodeId[]>)replacement;
                            }
                        }
                    }

                    instance = CertificateTypes;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private TrustListState m_trustList;
        private PropertyState<NodeId[]> m_certificateTypes;
        #endregion
    }
    #endif
    #endregion

    #region CertificateGroupFolderState Class
    #if (!OPCUA_EXCLUDE_CertificateGroupFolderState)
    /// <summary>
    /// Stores an instance of the CertificateGroupFolderType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateGroupFolderState : FolderState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateGroupFolderState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateGroupFolderType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);

            if (DefaultHttpsGroup != null)
            {
                DefaultHttpsGroup.Initialize(context, DefaultHttpsGroup_InitializationString);
            }

            if (DefaultUserTokenGroup != null)
            {
                DefaultUserTokenGroup.Initialize(context, DefaultUserTokenGroup_InitializationString);
            }
        }

        #region Initialization String
        private const string DefaultHttpsGroup_InitializationString =
           "//////////8EYIAKAQAAAAAAEQAAAERlZmF1bHRIdHRwc0dyb3VwAQAYNgAvAQALMRg2AAD/////AgAA" +
           "AARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQAZNgAvAQDqMBk2AAD/////DAAAABVgiQoCAAAAAAAEAAAA" +
           "U2l6ZQEAGjYALgBEGjYAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRhYmxlAQAbNgAu" +
           "AEQbNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQAcNgAuAEQcNgAA" +
           "AAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQAdNgAuAEQdNgAAAAX/////AQH/" +
           "////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAHzYALwEAPC0fNgAAAQH/////AgAAABVgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBACA2AC4ARCA2AACWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAA" +
           "AAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAITYALgBEITYA" +
           "AJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAAFAAAAQ2xvc2UBACI2AC8BAD8tIjYAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQAjNgAuAEQjNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAQAkNgAvAQBBLSQ2AAABAf////8CAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAJTYALgBEJTYAAJYCAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQH/" +
           "////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAmNgAuAEQmNgAAlgEAAAABACoBARMA" +
           "AAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEA" +
           "JzYALwEARC0nNgAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACg2AC4ARCg2" +
           "AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP" +
           "/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEAKTYALwEA" +
           "Ri0pNgAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACo2AC4ARCo2AACWAQAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEAKzYALgBEKzYAAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9u" +
           "AAn/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNldFBvc2l0aW9uAQAsNgAv" +
           "AQBJLSw2AAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEALTYALgBELTYAAJYC" +
           "AAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ" +
           "/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0VXBkYXRlVGltZQEALjYA" +
           "LgBELjYAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAANAAAAT3BlbldpdGhNYXNrcwEALzYALwEA" +
           "/zAvNgAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBADA2AC4ARDA2AACWAQAA" +
           "AAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBADE2AC4ARDE2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/" +
           "////AAAAAAABACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBADk2" +
           "AC4ARDk2AAAAEQEAAAABAf////8AAAAA";

        private const string DefaultUserTokenGroup_InitializationString =
           "//////////8EYIAKAQAAAAAAFQAAAERlZmF1bHRVc2VyVG9rZW5Hcm91cAEAOjYALwEACzE6NgAA////" +
           "/wIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEAOzYALwEA6jA7NgAA/////wwAAAAVYIkKAgAAAAAA" +
           "BAAAAFNpemUBADw2AC4ARDw2AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEA" +
           "PTYALgBEPTYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAPjYALgBE" +
           "PjYAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAPzYALgBEPzYAAAAF////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAEE2AC8BADwtQTYAAAEB/////wIAAAAVYKkKAgAA" +
           "AAAADgAAAElucHV0QXJndW1lbnRzAQBCNgAuAERCNgAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD////" +
           "/wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAEM2AC4A" +
           "REM2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAA" +
           "AAAEYYIKBAAAAAAABQAAAENsb3NlAQBENgAvAQA/LUQ2AAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJ" +
           "bnB1dEFyZ3VtZW50cwEARTYALgBERTYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8A" +
           "AAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEARjYALwEAQS1GNgAAAQH/////" +
           "AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAEc2AC4AREc2AACWAgAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgBAQAA" +
           "AAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEASDYALgBESDYAAJYBAAAAAQAq" +
           "AQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3Jp" +
           "dGUBAEk2AC8BAEQtSTYAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBKNgAu" +
           "AERKNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERh" +
           "dGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEs2" +
           "AC8BAEYtSzYAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBMNgAuAERMNgAA" +
           "lgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCp" +
           "CgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAE02AC4ARE02AACWAQAAAAEAKgEBFwAAAAgAAABQb3Np" +
           "dGlvbgAJ/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3NpdGlvbgEA" +
           "TjYALwEASS1ONgAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAE82AC4ARE82" +
           "AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRp" +
           "b24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFVwZGF0ZVRpbWUB" +
           "AFA2AC4ARFA2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5XaXRoTWFza3MBAFE2" +
           "AC8BAP8wUTYAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBSNgAuAERSNgAA" +
           "lgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQBTNgAuAERTNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRs" +
           "ZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAAABAAAABDZXJ0aWZpY2F0ZVR5cGVz" +
           "AQBbNgAuAERbNgAAABEBAAAAAQH/////AAAAAA==";

        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAENlcnRpZmljYXRlR3JvdXBGb2xkZXJUeXBlSW5zdGFuY2UBAPU1" +
           "AQD1Nf////8DAAAABGCACgEAAAAAABcAAABEZWZhdWx0QXBwbGljYXRpb25Hcm91cAEA9jUALwEACzH2" +
           "NQAA/////wIAAAAEYIAKAQAAAAAACQAAAFRydXN0TGlzdAEA9zUALwEA6jD3NQAA/////wwAAAAVYIkK" +
           "AgAAAAAABAAAAFNpemUBAPg1AC4ARPg1AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0" +
           "YWJsZQEA+TUALgBE+TUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEA" +
           "+jUALgBE+jUAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEA+zUALgBE+zUA" +
           "AAAF/////wEB/////wAAAAAEYYIKBAAAAAAABAAAAE9wZW4BAP01AC8BADwt/TUAAAEB/////wIAAAAV" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQD+NQAuAET+NQAAlgEAAAABACoBARMAAAAEAAAATW9k" +
           "ZQAD/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AP81AC4ARP81AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB" +
           "/////wAAAAAEYYIKBAAAAAAABQAAAENsb3NlAQAANgAvAQA/LQA2AAABAf////8BAAAAFWCpCgIAAAAA" +
           "AA4AAABJbnB1dEFyZ3VtZW50cwEAATYALgBEATYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUA" +
           "B/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAEAAAAUmVhZAEAAjYALwEAQS0CNgAA" +
           "AQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAM2AC4ARAM2AACWAgAAAAEAKgEB" +
           "GQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAAB" +
           "ACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEABDYALgBEBDYAAJYB" +
           "AAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAF" +
           "AAAAV3JpdGUBAAU2AC8BAEQtBTYAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRz" +
           "AQAGNgAuAEQGNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAA" +
           "BAAAAERhdGEAD/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRp" +
           "b24BAAc2AC8BAEYtBzYAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAINgAu" +
           "AEQINgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8A" +
           "AAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAAk2AC4ARAk2AACWAQAAAAEAKgEBFwAAAAgA" +
           "AABQb3NpdGlvbgAJ/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3Np" +
           "dGlvbgEACjYALwEASS0KNgAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAAs2" +
           "AC4ARAs2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAA" +
           "UG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFVwZGF0" +
           "ZVRpbWUBAAw2AC4ARAw2AAABACYB/////wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5XaXRoTWFz" +
           "a3MBAA02AC8BAP8wDTYAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAONgAu" +
           "AEQONgAAlgEAAAABACoBARQAAAAFAAAATWFza3MAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVg" +
           "qQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAPNgAuAEQPNgAAlgEAAAABACoBARkAAAAKAAAARmls" +
           "ZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAAABAAAABDZXJ0aWZpY2F0" +
           "ZVR5cGVzAQAXNgAuAEQXNgAAABEBAAAAAQH/////AAAAAARggAoBAAAAAAARAAAARGVmYXVsdEh0dHBz" +
           "R3JvdXABABg2AC8BAAsxGDYAAP////8CAAAABGCACgEAAAAAAAkAAABUcnVzdExpc3QBABk2AC8BAOow" +
           "GTYAAP////8MAAAAFWCJCgIAAAAAAAQAAABTaXplAQAaNgAuAEQaNgAAAAn/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAIAAAAV3JpdGFibGUBABs2AC4ARBs2AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAwA" +
           "AABVc2VyV3JpdGFibGUBABw2AC4ARBw2AAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAkAAABPcGVu" +
           "Q291bnQBAB02AC4ARB02AAAABf////8BAf////8AAAAABGGCCgQAAAAAAAQAAABPcGVuAQAfNgAvAQA8" +
           "LR82AAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAIDYALgBEIDYAAJYBAAAA" +
           "AQAqAQETAAAABAAAAE1vZGUAA/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAA" +
           "T3V0cHV0QXJndW1lbnRzAQAhNgAuAEQhNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH////" +
           "/wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABDbG9zZQEAIjYALwEAPy0iNgAAAQH/" +
           "////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACM2AC4ARCM2AACWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABAAAAFJl" +
           "YWQBACQ2AC8BAEEtJDYAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQAlNgAu" +
           "AEQlNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQEVAAAABgAAAExl" +
           "bmd0aAAG/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVu" +
           "dHMBACY2AC4ARCY2AACWAQAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB////" +
           "/wAAAAAEYYIKBAAAAAAABQAAAFdyaXRlAQAnNgAvAQBELSc2AAABAf////8BAAAAFWCpCgIAAAAAAA4A" +
           "AABJbnB1dEFyZ3VtZW50cwEAKDYALgBEKDYAAJYCAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB///" +
           "//8AAAAAAAEAKgEBEwAAAAQAAABEYXRhAA//////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAA" +
           "AAAACwAAAEdldFBvc2l0aW9uAQApNgAvAQBGLSk2AAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEAKjYALgBEKjYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAA" +
           "AAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQArNgAuAEQrNgAA" +
           "lgEAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoE" +
           "AAAAAAALAAAAU2V0UG9zaXRpb24BACw2AC8BAEktLDYAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElu" +
           "cHV0QXJndW1lbnRzAQAtNgAuAEQtNgAAlgIAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAA" +
           "AAAAAQAqAQEXAAAACAAAAFBvc2l0aW9uAAn/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYIkKAgAA" +
           "AAAADgAAAExhc3RVcGRhdGVUaW1lAQAuNgAuAEQuNgAAAQAmAf////8BAf////8AAAAABGGCCgQAAAAA" +
           "AA0AAABPcGVuV2l0aE1hc2tzAQAvNgAvAQD/MC82AAABAf////8CAAAAFWCpCgIAAAAAAA4AAABJbnB1" +
           "dEFyZ3VtZW50cwEAMDYALgBEMDYAAJYBAAAAAQAqAQEUAAAABQAAAE1hc2tzAAf/////AAAAAAABACgB" +
           "AQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAMTYALgBEMTYAAJYBAAAA" +
           "AQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgiQoCAAAA" +
           "AAAQAAAAQ2VydGlmaWNhdGVUeXBlcwEAOTYALgBEOTYAAAARAQAAAAEB/////wAAAAAEYIAKAQAAAAAA" +
           "FQAAAERlZmF1bHRVc2VyVG9rZW5Hcm91cAEAOjYALwEACzE6NgAA/////wIAAAAEYIAKAQAAAAAACQAA" +
           "AFRydXN0TGlzdAEAOzYALwEA6jA7NgAA/////wwAAAAVYIkKAgAAAAAABAAAAFNpemUBADw2AC4ARDw2" +
           "AAAACf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABXcml0YWJsZQEAPTYALgBEPTYAAAAB/////wEB" +
           "/////wAAAAAVYIkKAgAAAAAADAAAAFVzZXJXcml0YWJsZQEAPjYALgBEPjYAAAAB/////wEB/////wAA" +
           "AAAVYIkKAgAAAAAACQAAAE9wZW5Db3VudAEAPzYALgBEPzYAAAAF/////wEB/////wAAAAAEYYIKBAAA" +
           "AAAABAAAAE9wZW4BAEE2AC8BADwtQTYAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1l" +
           "bnRzAQBCNgAuAERCNgAAlgEAAAABACoBARMAAAAEAAAATW9kZQAD/////wAAAAAAAQAoAQEAAAABAf//" +
           "//8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMBAEM2AC4AREM2AACWAQAAAAEAKgEBGQAA" +
           "AAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAABQAAAENs" +
           "b3NlAQBENgAvAQA/LUQ2AAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEARTYA" +
           "LgBERTYAAJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////" +
           "AAAAAARhggoEAAAAAAAEAAAAUmVhZAEARjYALwEAQS1GNgAAAQH/////AgAAABVgqQoCAAAAAAAOAAAA" +
           "SW5wdXRBcmd1bWVudHMBAEc2AC4AREc2AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////" +
           "AAAAAAABACoBARUAAAAGAAAATGVuZ3RoAAb/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEASDYALgBESDYAAJYBAAAAAQAqAQETAAAABAAAAERhdGEAD///" +
           "//8AAAAAAAEAKAEBAAAAAQH/////AAAAAARhggoEAAAAAAAFAAAAV3JpdGUBAEk2AC8BAEQtSTYAAAEB" +
           "/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBKNgAuAERKNgAAlgIAAAABACoBARkA" +
           "AAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAqAQETAAAABAAAAERhdGEAD/////8AAAAAAAEAKAEB" +
           "AAAAAQH/////AAAAAARhggoEAAAAAAALAAAAR2V0UG9zaXRpb24BAEs2AC8BAEYtSzYAAAEB/////wIA" +
           "AAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBMNgAuAERMNgAAlgEAAAABACoBARkAAAAKAAAA" +
           "RmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRB" +
           "cmd1bWVudHMBAE02AC4ARE02AACWAQAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ/////wAAAAAAAQAo" +
           "AQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABTZXRQb3NpdGlvbgEATjYALwEASS1ONgAAAQH/////" +
           "AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAE82AC4ARE82AACWAgAAAAEAKgEBGQAAAAoA" +
           "AABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARcAAAAIAAAAUG9zaXRpb24ACf////8AAAAAAAEAKAEB" +
           "AAAAAQH/////AAAAABVgiQoCAAAAAAAOAAAATGFzdFVwZGF0ZVRpbWUBAFA2AC4ARFA2AAABACYB////" +
           "/wEB/////wAAAAAEYYIKBAAAAAAADQAAAE9wZW5XaXRoTWFza3MBAFE2AC8BAP8wUTYAAAEB/////wIA" +
           "AAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBSNgAuAERSNgAAlgEAAAABACoBARQAAAAFAAAA" +
           "TWFza3MAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1l" +
           "bnRzAQBTNgAuAERTNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAAAQAoAQEA" +
           "AAABAf////8AAAAAFWCJCgIAAAAAABAAAABDZXJ0aWZpY2F0ZVR5cGVzAQBbNgAuAERbNgAAABEBAAAA" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CertificateGroupState DefaultApplicationGroup
        {
            get
            {
                return m_defaultApplicationGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultApplicationGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultApplicationGroup = value;
            }
        }

        /// <remarks />
        public CertificateGroupState DefaultHttpsGroup
        {
            get
            {
                return m_defaultHttpsGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultHttpsGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultHttpsGroup = value;
            }
        }

        /// <remarks />
        public CertificateGroupState DefaultUserTokenGroup
        {
            get
            {
                return m_defaultUserTokenGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_defaultUserTokenGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_defaultUserTokenGroup = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_defaultApplicationGroup != null)
            {
                children.Add(m_defaultApplicationGroup);
            }

            if (m_defaultHttpsGroup != null)
            {
                children.Add(m_defaultHttpsGroup);
            }

            if (m_defaultUserTokenGroup != null)
            {
                children.Add(m_defaultUserTokenGroup);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.DefaultApplicationGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultApplicationGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultApplicationGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultApplicationGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultApplicationGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultHttpsGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultHttpsGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultHttpsGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultHttpsGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultHttpsGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.DefaultUserTokenGroup:
                {
                    if (createOrReplace)
                    {
                        if (DefaultUserTokenGroup == null)
                        {
                            if (replacement == null)
                            {
                                DefaultUserTokenGroup = new CertificateGroupState(this);
                            }
                            else
                            {
                                DefaultUserTokenGroup = (CertificateGroupState)replacement;
                            }
                        }
                    }

                    instance = DefaultUserTokenGroup;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CertificateGroupState m_defaultApplicationGroup;
        private CertificateGroupState m_defaultHttpsGroup;
        private CertificateGroupState m_defaultUserTokenGroup;
        #endregion
    }
    #endif
    #endregion

    #region CertificateState Class
    #if (!OPCUA_EXCLUDE_CertificateState)
    /// <summary>
    /// Stores an instance of the CertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAFwAAAENlcnRpZmljYXRlVHlwZUluc3RhbmNlAQAMMQEADDH/////AAAA" +
           "AA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_ApplicationCertificateState)
    /// <summary>
    /// Stores an instance of the ApplicationCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ApplicationCertificateState : CertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAEFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UBAA0x" +
           "AQANMf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region HttpsCertificateState Class
    #if (!OPCUA_EXCLUDE_HttpsCertificateState)
    /// <summary>
    /// Stores an instance of the HttpsCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class HttpsCertificateState : CertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public HttpsCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.HttpsCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHAAAAEh0dHBzQ2VydGlmaWNhdGVUeXBlSW5zdGFuY2UBAA4xAQAOMf//" +
           "//8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RsaMinApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_RsaMinApplicationCertificateState)
    /// <summary>
    /// Stores an instance of the RsaMinApplicationCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RsaMinApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RsaMinApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RsaMinApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAFJzYU1pbkFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5zdGFu" +
           "Y2UBAA8xAQAPMf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region RsaSha256ApplicationCertificateState Class
    #if (!OPCUA_EXCLUDE_RsaSha256ApplicationCertificateState)
    /// <summary>
    /// Stores an instance of the RsaSha256ApplicationCertificateType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class RsaSha256ApplicationCertificateState : ApplicationCertificateState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public RsaSha256ApplicationCertificateState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.RsaSha256ApplicationCertificateType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKwAAAFJzYVNoYTI1NkFwcGxpY2F0aW9uQ2VydGlmaWNhdGVUeXBlSW5z" +
           "dGFuY2UBABAxAQAQMf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region TrustListUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_TrustListUpdatedAuditEventState)
    /// <summary>
    /// Stores an instance of the TrustListUpdatedAuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class TrustListUpdatedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public TrustListUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.TrustListUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAJgAAAFRydXN0TGlzdFVwZGF0ZWRBdWRpdEV2ZW50VHlwZUluc3RhbmNl" +
           "AQARMQEAETH/////EAAAABVgiQoCAAAAAAAHAAAARXZlbnRJZAEAEjEALgBEEjEAAAAP/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACQAAAEV2ZW50VHlwZQEAEzEALgBEEzEAAAAR/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAACgAAAFNvdXJjZU5vZGUBABQxAC4ARBQxAAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAAoA" +
           "AABTb3VyY2VOYW1lAQAVMQAuAEQVMQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAEAAAAVGltZQEA" +
           "FjEALgBEFjEAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAALAAAAUmVjZWl2ZVRpbWUBABcxAC4A" +
           "RBcxAAABACYB/////wEB/////wAAAAAVYIkKAgAAAAAACQAAAExvY2FsVGltZQEAGDEALgBEGDEAAAEA" +
           "0CL/////AQH/////AAAAABVgiQoCAAAAAAAHAAAATWVzc2FnZQEAGTEALgBEGTEAAAAV/////wEB////" +
           "/wAAAAAVYIkKAgAAAAAACAAAAFNldmVyaXR5AQAaMQAuAEQaMQAAAAX/////AQH/////AAAAABVgiQoC" +
           "AAAAAAAPAAAAQWN0aW9uVGltZVN0YW1wAQAbMQAuAEQbMQAAAQAmAf////8BAf////8AAAAAFWCJCgIA" +
           "AAAAAAYAAABTdGF0dXMBABwxAC4ARBwxAAAAAf////8BAf////8AAAAAFWCJCgIAAAAAAAgAAABTZXJ2" +
           "ZXJJZAEAHTEALgBEHTEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAAEgAAAENsaWVudEF1ZGl0RW50" +
           "cnlJZAEAHjEALgBEHjEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAADAAAAENsaWVudFVzZXJJZAEA" +
           "HzEALgBEHzEAAAAM/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAE1ldGhvZElkAQAgMQAuAEQgMQAA" +
           "ABH/////AQH/////AAAAABVgiQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACExAC4ARCExAAAAGAEA" +
           "AAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        #endregion

        #region Private Fields
        #endregion
    }
    #endif
    #endregion

    #region UpdateCertificateMethodState Class
    #if (!OPCUA_EXCLUDE_UpdateCertificateMethodState)
    /// <summary>
    /// Stores an instance of the UpdateCertificateMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class UpdateCertificateMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public UpdateCertificateMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new UpdateCertificateMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGwAAAFVwZGF0ZUNlcnRpZmljYXRlTWV0aG9kVHlwZQEAIjEALwEAIjEi" +
           "MQAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBACMxAC4ARCMxAACWBgAAAAEA" +
           "KgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEAAABDZXJ0aWZp" +
           "Y2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAENlcnRpZmljYXRlAA//////AAAAAAABACoB" +
           "ASEAAAASAAAASXNzdWVyQ2VydGlmaWNhdGVzAA8BAAAAAAAAAAABACoBAR8AAAAQAAAAUHJpdmF0ZUtl" +
           "eUZvcm1hdAAM/////wAAAAAAAQAqAQEZAAAACgAAAFByaXZhdGVLZXkAD/////8AAAAAAAEAKAEBAAAA" +
           "AQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQAkMQAuAEQkMQAAlgEAAAABACoB" +
           "ASMAAAAUAAAAQXBwbHlDaGFuZ2VzUmVxdWlyZWQAAf////8AAAAAAAEAKAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public UpdateCertificateMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];
            NodeId certificateTypeId = (NodeId)_inputArguments[1];
            byte[] certificate = (byte[])_inputArguments[2];
            byte[][] issuerCertificates = (byte[][])_inputArguments[3];
            string privateKeyFormat = (string)_inputArguments[4];
            byte[] privateKey = (byte[])_inputArguments[5];

            bool applyChangesRequired = (bool)_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    certificateTypeId,
                    certificate,
                    issuerCertificates,
                    privateKeyFormat,
                    privateKey,
                    ref applyChangesRequired);
            }

            _outputArguments[0] = applyChangesRequired;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult UpdateCertificateMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        NodeId certificateGroupId,
        NodeId certificateTypeId,
        byte[] certificate,
        byte[][] issuerCertificates,
        string privateKeyFormat,
        byte[] privateKey,
        ref bool applyChangesRequired);
    #endif
    #endregion

    #region CreateSigningRequestMethodState Class
    #if (!OPCUA_EXCLUDE_CreateSigningRequestMethodState)
    /// <summary>
    /// Stores an instance of the CreateSigningRequestMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CreateSigningRequestMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CreateSigningRequestMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new CreateSigningRequestMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAHgAAAENyZWF0ZVNpZ25pbmdSZXF1ZXN0TWV0aG9kVHlwZQEAxTEALwEA" +
           "xTHFMQAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAMYxAC4ARMYxAACWBQAA" +
           "AAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZUdyb3VwSWQAEf////8AAAAAAAEAKgEBIAAAABEAAABDZXJ0" +
           "aWZpY2F0ZVR5cGVJZAAR/////wAAAAAAAQAqAQEaAAAACwAAAFN1YmplY3ROYW1lAAz/////AAAAAAAB" +
           "ACoBASMAAAAUAAAAUmVnZW5lcmF0ZVByaXZhdGVLZXkAAf////8AAAAAAAEAKgEBFAAAAAUAAABOb25j" +
           "ZQAP/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8AAABPdXRwdXRBcmd1bWVudHMB" +
           "AMcxAC4ARMcxAACWAQAAAAEAKgEBIQAAABIAAABDZXJ0aWZpY2F0ZVJlcXVlc3QAD/////8AAAAAAAEA" +
           "KAEBAAAAAQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public CreateSigningRequestMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            NodeId certificateGroupId = (NodeId)_inputArguments[0];
            NodeId certificateTypeId = (NodeId)_inputArguments[1];
            string subjectName = (string)_inputArguments[2];
            bool regeneratePrivateKey = (bool)_inputArguments[3];
            byte[] nonce = (byte[])_inputArguments[4];

            byte[] certificateRequest = (byte[])_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    certificateGroupId,
                    certificateTypeId,
                    subjectName,
                    regeneratePrivateKey,
                    nonce,
                    ref certificateRequest);
            }

            _outputArguments[0] = certificateRequest;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult CreateSigningRequestMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        NodeId certificateGroupId,
        NodeId certificateTypeId,
        string subjectName,
        bool regeneratePrivateKey,
        byte[] nonce,
        ref byte[] certificateRequest);
    #endif
    #endregion

    #region GetRejectedListMethodState Class
    #if (!OPCUA_EXCLUDE_GetRejectedListMethodState)
    /// <summary>
    /// Stores an instance of the GetRejectedListMethodType Method.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class GetRejectedListMethodState : MethodState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public GetRejectedListMethodState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Constructs an instance of a node.
        /// </summary>
        /// <param name="parent">The parent.</param>
        /// <returns>The new node.</returns>
        public new static NodeState Construct(NodeState parent)
        {
            return new GetRejectedListMethodState(parent);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYYIKBAAAAAAAGQAAAEdldFJlamVjdGVkTGlzdE1ldGhvZFR5cGUBAOUxAC8BAOUx5TEA" +
           "AAEB/////wEAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEA5jEALgBE5jEAAJYBAAAAAQAq" +
           "AQEbAAAADAAAAENlcnRpZmljYXRlcwAPAQAAAAAAAAAAAQAoAQEAAAABAf////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Event Callbacks
        /// <summary>
        /// Raised when the the method is called.
        /// </summary>
        public GetRejectedListMethodStateMethodCallHandler OnCall;
        #endregion

        #region Public Properties
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Invokes the method, returns the result and output argument.
        /// </summary>
        protected override ServiceResult Call(
            ISystemContext _context,
            NodeId _objectId,
            IList<object> _inputArguments,
            IList<object> _outputArguments)
        {
            if (OnCall == null)
            {
                return base.Call(_context, _objectId, _inputArguments, _outputArguments);
            }

            ServiceResult result = null;

            byte[][] certificates = (byte[][])_outputArguments[0];

            if (OnCall != null)
            {
                result = OnCall(
                    _context,
                    this,
                    _objectId,
                    ref certificates);
            }

            _outputArguments[0] = certificates;

            return result;
        }
        #endregion

        #region Private Fields
        #endregion
    }

    /// <summary>
    /// Used to receive notifications when the method is called.
    /// </summary>
    /// <exclude />
    public delegate ServiceResult GetRejectedListMethodStateMethodCallHandler(
        ISystemContext context,
        MethodState method,
        NodeId objectId,
        ref byte[][] certificates);
    #endif
    #endregion

    #region ServerConfigurationState Class
    #if (!OPCUA_EXCLUDE_ServerConfigurationState)
    /// <summary>
    /// Stores an instance of the ServerConfigurationType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class ServerConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public ServerConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.ServerConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAHwAAAFNlcnZlckNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBACUxAQAl" +
           "Mf////8JAAAABGCACgEAAAAAABEAAABDZXJ0aWZpY2F0ZUdyb3VwcwEAfjYALwEA9TV+NgAA/////wEA" +
           "AAAEYIAKAQAAAAAAFwAAAERlZmF1bHRBcHBsaWNhdGlvbkdyb3VwAQB/NgAvAQALMX82AAD/////AgAA" +
           "AARggAoBAAAAAAAJAAAAVHJ1c3RMaXN0AQCANgAvAQDqMIA2AAD/////DAAAABVgiQoCAAAAAAAEAAAA" +
           "U2l6ZQEAgTYALgBEgTYAAAAJ/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFdyaXRhYmxlAQCCNgAu" +
           "AESCNgAAAAH/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAVXNlcldyaXRhYmxlAQCDNgAuAESDNgAA" +
           "AAH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAAT3BlbkNvdW50AQCENgAuAESENgAAAAX/////AQH/" +
           "////AAAAAARhggoEAAAAAAAEAAAAT3BlbgEAhjYALwEAPC2GNgAAAQH/////AgAAABVgqQoCAAAAAAAO" +
           "AAAASW5wdXRBcmd1bWVudHMBAIc2AC4ARIc2AACWAQAAAAEAKgEBEwAAAAQAAABNb2RlAAP/////AAAA" +
           "AAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEAiDYALgBEiDYA" +
           "AJYBAAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKAEBAAAAAQH/////AAAAAARh" +
           "ggoEAAAAAAAFAAAAQ2xvc2UBAIk2AC8BAD8tiTYAAAEB/////wEAAAAVYKkKAgAAAAAADgAAAElucHV0" +
           "QXJndW1lbnRzAQCKNgAuAESKNgAAlgEAAAABACoBARkAAAAKAAAARmlsZUhhbmRsZQAH/////wAAAAAA" +
           "AQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAQAAABSZWFkAQCLNgAvAQBBLYs2AAABAf////8CAAAA" +
           "FWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAjDYALgBEjDYAAJYCAAAAAQAqAQEZAAAACgAAAEZp" +
           "bGVIYW5kbGUAB/////8AAAAAAAEAKgEBFQAAAAYAAABMZW5ndGgABv////8AAAAAAAEAKAEBAAAAAQH/" +
           "////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQCNNgAuAESNNgAAlgEAAAABACoBARMA" +
           "AAAEAAAARGF0YQAP/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAUAAABXcml0ZQEA" +
           "jjYALwEARC2ONgAAAQH/////AQAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAI82AC4ARI82" +
           "AACWAgAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACoBARMAAAAEAAAARGF0YQAP" +
           "/////wAAAAAAAQAoAQEAAAABAf////8AAAAABGGCCgQAAAAAAAsAAABHZXRQb3NpdGlvbgEAkDYALwEA" +
           "Ri2QNgAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJE2AC4ARJE2AACWAQAA" +
           "AAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/////AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAA" +
           "AAAADwAAAE91dHB1dEFyZ3VtZW50cwEAkjYALgBEkjYAAJYBAAAAAQAqAQEXAAAACAAAAFBvc2l0aW9u" +
           "AAn/////AAAAAAABACgBAQAAAAEB/////wAAAAAEYYIKBAAAAAAACwAAAFNldFBvc2l0aW9uAQCTNgAv" +
           "AQBJLZM2AAABAf////8BAAAAFWCpCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAlDYALgBElDYAAJYC" +
           "AAAAAQAqAQEZAAAACgAAAEZpbGVIYW5kbGUAB/////8AAAAAAAEAKgEBFwAAAAgAAABQb3NpdGlvbgAJ" +
           "/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCJCgIAAAAAAA4AAABMYXN0VXBkYXRlVGltZQEAlTYA" +
           "LgBElTYAAAEAJgH/////AQH/////AAAAAARhggoEAAAAAAANAAAAT3BlbldpdGhNYXNrcwEAljYALwEA" +
           "/zCWNgAAAQH/////AgAAABVgqQoCAAAAAAAOAAAASW5wdXRBcmd1bWVudHMBAJc2AC4ARJc2AACWAQAA" +
           "AAEAKgEBFAAAAAUAAABNYXNrcwAH/////wAAAAAAAQAoAQEAAAABAf////8AAAAAFWCpCgIAAAAAAA8A" +
           "AABPdXRwdXRBcmd1bWVudHMBAJg2AC4ARJg2AACWAQAAAAEAKgEBGQAAAAoAAABGaWxlSGFuZGxlAAf/" +
           "////AAAAAAABACgBAQAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlVHlwZXMBAKA2" +
           "AC4ARKA2AAAAEQEAAAABAf////8AAAAAFWCJCgIAAAAAABIAAABTZXJ2ZXJDYXBhYmlsaXRpZXMBAKQx" +
           "AC4ARKQxAAAADAEAAAABAf////8AAAAAFWCJCgIAAAAAABoAAABTdXBwb3J0ZWRQcml2YXRlS2V5Rm9y" +
           "bWF0cwEAJzEALgBEJzEAAAAMAQAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAAAE1heFRydXN0TGlzdFNp" +
           "emUBACgxAC4ARCgxAAAAB/////8BAf////8AAAAAFWCJCgIAAAAAABMAAABNdWx0aWNhc3REbnNFbmFi" +
           "bGVkAQApMQAuAEQpMQAAAAH/////AQH/////AAAAAARhggoEAAAAAAARAAAAVXBkYXRlQ2VydGlmaWNh" +
           "dGUBAEgxAC8BAEgxSDEAAAEB/////wIAAAAVYKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQBJMQAu" +
           "AERJMQAAlgYAAAABACoBASEAAAASAAAAQ2VydGlmaWNhdGVHcm91cElkABH/////AAAAAAABACoBASAA" +
           "AAARAAAAQ2VydGlmaWNhdGVUeXBlSWQAEf////8AAAAAAAEAKgEBGgAAAAsAAABDZXJ0aWZpY2F0ZQAP" +
           "/////wAAAAAAAQAqAQEhAAAAEgAAAElzc3VlckNlcnRpZmljYXRlcwAPAQAAAAAAAAAAAQAqAQEfAAAA" +
           "EAAAAFByaXZhdGVLZXlGb3JtYXQADP////8AAAAAAAEAKgEBGQAAAAoAAABQcml2YXRlS2V5AA//////" +
           "AAAAAAABACgBAQAAAAEB/////wAAAAAVYKkKAgAAAAAADwAAAE91dHB1dEFyZ3VtZW50cwEASjEALgBE" +
           "SjEAAJYBAAAAAQAqAQEjAAAAFAAAAEFwcGx5Q2hhbmdlc1JlcXVpcmVkAAH/////AAAAAAABACgBAQAA" +
           "AAEB/////wAAAAAEYYIKBAAAAAAADAAAAEFwcGx5Q2hhbmdlcwEAvjEALwEAvjG+MQAAAQH/////AAAA" +
           "AARhggoEAAAAAAAUAAAAQ3JlYXRlU2lnbmluZ1JlcXVlc3QBALsxAC8BALsxuzEAAAEB/////wIAAAAV" +
           "YKkKAgAAAAAADgAAAElucHV0QXJndW1lbnRzAQC8MQAuAES8MQAAlgUAAAABACoBASEAAAASAAAAQ2Vy" +
           "dGlmaWNhdGVHcm91cElkABH/////AAAAAAABACoBASAAAAARAAAAQ2VydGlmaWNhdGVUeXBlSWQAEf//" +
           "//8AAAAAAAEAKgEBGgAAAAsAAABTdWJqZWN0TmFtZQAM/////wAAAAAAAQAqAQEjAAAAFAAAAFJlZ2Vu" +
           "ZXJhdGVQcml2YXRlS2V5AAH/////AAAAAAABACoBARQAAAAFAAAATm9uY2UAD/////8AAAAAAAEAKAEB" +
           "AAAAAQH/////AAAAABVgqQoCAAAAAAAPAAAAT3V0cHV0QXJndW1lbnRzAQC9MQAuAES9MQAAlgEAAAAB" +
           "ACoBASEAAAASAAAAQ2VydGlmaWNhdGVSZXF1ZXN0AA//////AAAAAAABACgBAQAAAAEB/////wAAAAAE" +
           "YYIKBAAAAAAADwAAAEdldFJlamVjdGVkTGlzdAEA5zEALwEA5zHnMQAAAQH/////AQAAABVgqQoCAAAA" +
           "AAAPAAAAT3V0cHV0QXJndW1lbnRzAQDoMQAuAEToMQAAlgEAAAABACoBARsAAAAMAAAAQ2VydGlmaWNh" +
           "dGVzAA8BAAAAAAAAAAABACgBAQAAAAEB/////wAAAAA=";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public CertificateGroupFolderState CertificateGroups
        {
            get
            {
                return m_certificateGroups;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateGroups, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateGroups = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> ServerCapabilities
        {
            get
            {
                return m_serverCapabilities;
            }

            set
            {
                if (!Object.ReferenceEquals(m_serverCapabilities, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_serverCapabilities = value;
            }
        }

        /// <remarks />
        public PropertyState<string[]> SupportedPrivateKeyFormats
        {
            get
            {
                return m_supportedPrivateKeyFormats;
            }

            set
            {
                if (!Object.ReferenceEquals(m_supportedPrivateKeyFormats, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_supportedPrivateKeyFormats = value;
            }
        }

        /// <remarks />
        public PropertyState<uint> MaxTrustListSize
        {
            get
            {
                return m_maxTrustListSize;
            }

            set
            {
                if (!Object.ReferenceEquals(m_maxTrustListSize, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_maxTrustListSize = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> MulticastDnsEnabled
        {
            get
            {
                return m_multicastDnsEnabled;
            }

            set
            {
                if (!Object.ReferenceEquals(m_multicastDnsEnabled, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_multicastDnsEnabled = value;
            }
        }

        /// <remarks />
        public UpdateCertificateMethodState UpdateCertificate
        {
            get
            {
                return m_updateCertificateMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_updateCertificateMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_updateCertificateMethod = value;
            }
        }

        /// <remarks />
        public MethodState ApplyChanges
        {
            get
            {
                return m_applyChangesMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_applyChangesMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_applyChangesMethod = value;
            }
        }

        /// <remarks />
        public CreateSigningRequestMethodState CreateSigningRequest
        {
            get
            {
                return m_createSigningRequestMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_createSigningRequestMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_createSigningRequestMethod = value;
            }
        }

        /// <remarks />
        public GetRejectedListMethodState GetRejectedList
        {
            get
            {
                return m_getRejectedListMethod;
            }

            set
            {
                if (!Object.ReferenceEquals(m_getRejectedListMethod, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_getRejectedListMethod = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificateGroups != null)
            {
                children.Add(m_certificateGroups);
            }

            if (m_serverCapabilities != null)
            {
                children.Add(m_serverCapabilities);
            }

            if (m_supportedPrivateKeyFormats != null)
            {
                children.Add(m_supportedPrivateKeyFormats);
            }

            if (m_maxTrustListSize != null)
            {
                children.Add(m_maxTrustListSize);
            }

            if (m_multicastDnsEnabled != null)
            {
                children.Add(m_multicastDnsEnabled);
            }

            if (m_updateCertificateMethod != null)
            {
                children.Add(m_updateCertificateMethod);
            }

            if (m_applyChangesMethod != null)
            {
                children.Add(m_applyChangesMethod);
            }

            if (m_createSigningRequestMethod != null)
            {
                children.Add(m_createSigningRequestMethod);
            }

            if (m_getRejectedListMethod != null)
            {
                children.Add(m_getRejectedListMethod);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CertificateGroups:
                {
                    if (createOrReplace)
                    {
                        if (CertificateGroups == null)
                        {
                            if (replacement == null)
                            {
                                CertificateGroups = new CertificateGroupFolderState(this);
                            }
                            else
                            {
                                CertificateGroups = (CertificateGroupFolderState)replacement;
                            }
                        }
                    }

                    instance = CertificateGroups;
                    break;
                }

                case Opc.Ua.BrowseNames.ServerCapabilities:
                {
                    if (createOrReplace)
                    {
                        if (ServerCapabilities == null)
                        {
                            if (replacement == null)
                            {
                                ServerCapabilities = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                ServerCapabilities = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = ServerCapabilities;
                    break;
                }

                case Opc.Ua.BrowseNames.SupportedPrivateKeyFormats:
                {
                    if (createOrReplace)
                    {
                        if (SupportedPrivateKeyFormats == null)
                        {
                            if (replacement == null)
                            {
                                SupportedPrivateKeyFormats = new PropertyState<string[]>(this);
                            }
                            else
                            {
                                SupportedPrivateKeyFormats = (PropertyState<string[]>)replacement;
                            }
                        }
                    }

                    instance = SupportedPrivateKeyFormats;
                    break;
                }

                case Opc.Ua.BrowseNames.MaxTrustListSize:
                {
                    if (createOrReplace)
                    {
                        if (MaxTrustListSize == null)
                        {
                            if (replacement == null)
                            {
                                MaxTrustListSize = new PropertyState<uint>(this);
                            }
                            else
                            {
                                MaxTrustListSize = (PropertyState<uint>)replacement;
                            }
                        }
                    }

                    instance = MaxTrustListSize;
                    break;
                }

                case Opc.Ua.BrowseNames.MulticastDnsEnabled:
                {
                    if (createOrReplace)
                    {
                        if (MulticastDnsEnabled == null)
                        {
                            if (replacement == null)
                            {
                                MulticastDnsEnabled = new PropertyState<bool>(this);
                            }
                            else
                            {
                                MulticastDnsEnabled = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = MulticastDnsEnabled;
                    break;
                }

                case Opc.Ua.BrowseNames.UpdateCertificate:
                {
                    if (createOrReplace)
                    {
                        if (UpdateCertificate == null)
                        {
                            if (replacement == null)
                            {
                                UpdateCertificate = new UpdateCertificateMethodState(this);
                            }
                            else
                            {
                                UpdateCertificate = (UpdateCertificateMethodState)replacement;
                            }
                        }
                    }

                    instance = UpdateCertificate;
                    break;
                }

                case Opc.Ua.BrowseNames.ApplyChanges:
                {
                    if (createOrReplace)
                    {
                        if (ApplyChanges == null)
                        {
                            if (replacement == null)
                            {
                                ApplyChanges = new MethodState(this);
                            }
                            else
                            {
                                ApplyChanges = (MethodState)replacement;
                            }
                        }
                    }

                    instance = ApplyChanges;
                    break;
                }

                case Opc.Ua.BrowseNames.CreateSigningRequest:
                {
                    if (createOrReplace)
                    {
                        if (CreateSigningRequest == null)
                        {
                            if (replacement == null)
                            {
                                CreateSigningRequest = new CreateSigningRequestMethodState(this);
                            }
                            else
                            {
                                CreateSigningRequest = (CreateSigningRequestMethodState)replacement;
                            }
                        }
                    }

                    instance = CreateSigningRequest;
                    break;
                }

                case Opc.Ua.BrowseNames.GetRejectedList:
                {
                    if (createOrReplace)
                    {
                        if (GetRejectedList == null)
                        {
                            if (replacement == null)
                            {
                                GetRejectedList = new GetRejectedListMethodState(this);
                            }
                            else
                            {
                                GetRejectedList = (GetRejectedListMethodState)replacement;
                            }
                        }
                    }

                    instance = GetRejectedList;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private CertificateGroupFolderState m_certificateGroups;
        private PropertyState<string[]> m_serverCapabilities;
        private PropertyState<string[]> m_supportedPrivateKeyFormats;
        private PropertyState<uint> m_maxTrustListSize;
        private PropertyState<bool> m_multicastDnsEnabled;
        private UpdateCertificateMethodState m_updateCertificateMethod;
        private MethodState m_applyChangesMethod;
        private CreateSigningRequestMethodState m_createSigningRequestMethod;
        private GetRejectedListMethodState m_getRejectedListMethod;
        #endregion
    }
    #endif
    #endregion

    #region CertificateUpdatedAuditEventState Class
    #if (!OPCUA_EXCLUDE_CertificateUpdatedAuditEventState)
    /// <summary>
    /// Stores an instance of the CertificateUpdatedAuditEventType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class CertificateUpdatedAuditEventState : AuditUpdateMethodEventState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public CertificateUpdatedAuditEventState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.CertificateUpdatedAuditEventType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAKAAAAENlcnRpZmljYXRlVXBkYXRlZEF1ZGl0RXZlbnRUeXBlSW5zdGFu" +
           "Y2UBAEwxAQBMMf////8SAAAAFWCJCgIAAAAAAAcAAABFdmVudElkAQBNMQAuAERNMQAAAA//////AQH/" +
           "////AAAAABVgiQoCAAAAAAAJAAAARXZlbnRUeXBlAQBOMQAuAEROMQAAABH/////AQH/////AAAAABVg" +
           "iQoCAAAAAAAKAAAAU291cmNlTm9kZQEATzEALgBETzEAAAAR/////wEB/////wAAAAAVYIkKAgAAAAAA" +
           "CgAAAFNvdXJjZU5hbWUBAFAxAC4ARFAxAAAADP////8BAf////8AAAAAFWCJCgIAAAAAAAQAAABUaW1l" +
           "AQBRMQAuAERRMQAAAQAmAf////8BAf////8AAAAAFWCJCgIAAAAAAAsAAABSZWNlaXZlVGltZQEAUjEA" +
           "LgBEUjEAAAEAJgH/////AQH/////AAAAABVgiQoCAAAAAAAJAAAATG9jYWxUaW1lAQBTMQAuAERTMQAA" +
           "AQDQIv////8BAf////8AAAAAFWCJCgIAAAAAAAcAAABNZXNzYWdlAQBUMQAuAERUMQAAABX/////AQH/" +
           "////AAAAABVgiQoCAAAAAAAIAAAAU2V2ZXJpdHkBAFUxAC4ARFUxAAAABf////8BAf////8AAAAAFWCJ" +
           "CgIAAAAAAA8AAABBY3Rpb25UaW1lU3RhbXABAFYxAC4ARFYxAAABACYB/////wEB/////wAAAAAVYIkK" +
           "AgAAAAAABgAAAFN0YXR1cwEAVzEALgBEVzEAAAAB/////wEB/////wAAAAAVYIkKAgAAAAAACAAAAFNl" +
           "cnZlcklkAQBYMQAuAERYMQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAASAAAAQ2xpZW50QXVkaXRF" +
           "bnRyeUlkAQBZMQAuAERZMQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAMAAAAQ2xpZW50VXNlcklk" +
           "AQBaMQAuAERaMQAAAAz/////AQH/////AAAAABVgiQoCAAAAAAAIAAAATWV0aG9kSWQBAFsxAC4ARFsx" +
           "AAAAEf////8BAf////8AAAAAFWCJCgIAAAAAAA4AAABJbnB1dEFyZ3VtZW50cwEAXDEALgBEXDEAAAAY" +
           "AQAAAAEB/////wAAAAAVYIkKAgAAAAAAEAAAAENlcnRpZmljYXRlR3JvdXABAKc1AC4ARKc1AAAAEf//" +
           "//8BAf////8AAAAAFWCJCgIAAAAAAA8AAABDZXJ0aWZpY2F0ZVR5cGUBAKg1AC4ARKg1AAAAEf////8B" +
           "Af////8AAAAA";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<NodeId> CertificateGroup
        {
            get
            {
                return m_certificateGroup;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateGroup, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateGroup = value;
            }
        }

        /// <remarks />
        public PropertyState<NodeId> CertificateType
        {
            get
            {
                return m_certificateType;
            }

            set
            {
                if (!Object.ReferenceEquals(m_certificateType, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_certificateType = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_certificateGroup != null)
            {
                children.Add(m_certificateGroup);
            }

            if (m_certificateType != null)
            {
                children.Add(m_certificateType);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.CertificateGroup:
                {
                    if (createOrReplace)
                    {
                        if (CertificateGroup == null)
                        {
                            if (replacement == null)
                            {
                                CertificateGroup = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateGroup = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateGroup;
                    break;
                }

                case Opc.Ua.BrowseNames.CertificateType:
                {
                    if (createOrReplace)
                    {
                        if (CertificateType == null)
                        {
                            if (replacement == null)
                            {
                                CertificateType = new PropertyState<NodeId>(this);
                            }
                            else
                            {
                                CertificateType = (PropertyState<NodeId>)replacement;
                            }
                        }
                    }

                    instance = CertificateType;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<NodeId> m_certificateGroup;
        private PropertyState<NodeId> m_certificateType;
        #endregion
    }
    #endif
    #endregion

    #region AggregateConfigurationState Class
    #if (!OPCUA_EXCLUDE_AggregateConfigurationState)
    /// <summary>
    /// Stores an instance of the AggregateConfigurationType ObjectType.
    /// </summary>
    /// <exclude />
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Opc.Ua.ModelCompiler", "1.0.0.0")]
    public partial class AggregateConfigurationState : BaseObjectState
    {
        #region Constructors
        /// <summary>
        /// Initializes the type with its default attribute values.
        /// </summary>
        public AggregateConfigurationState(NodeState parent) : base(parent)
        {
        }

        /// <summary>
        /// Returns the id of the default type definition node for the instance.
        /// </summary>
        protected override NodeId GetDefaultTypeDefinitionId(NamespaceTable namespaceUris)
        {
            return Opc.Ua.NodeId.Create(Opc.Ua.ObjectTypes.AggregateConfigurationType, Opc.Ua.Namespaces.OpcUa, namespaceUris);
        }

        #if (!OPCUA_EXCLUDE_InitializationStrings)
        /// <summary>
        /// Initializes the instance.
        /// </summary>
        protected override void Initialize(ISystemContext context)
        {
            Initialize(context, InitializationString);
            InitializeOptionalChildren(context);
        }

        /// <summary>
        /// Initializes the instance with a node.
        /// </summary>
        protected override void Initialize(ISystemContext context, NodeState source)
        {
            InitializeOptionalChildren(context);
            base.Initialize(context, source);
        }

        /// <summary>
        /// Initializes the any option children defined for the instance.
        /// </summary>
        protected override void InitializeOptionalChildren(ISystemContext context)
        {
            base.InitializeOptionalChildren(context);
        }

        #region Initialization String
        private const string InitializationString =
           "//////////8EYIAAAQAAAAAAIgAAAEFnZ3JlZ2F0ZUNvbmZpZ3VyYXRpb25UeXBlSW5zdGFuY2UBALMr" +
           "AQCzK/////8EAAAAFWCJCgIAAAAAABMAAABUcmVhdFVuY2VydGFpbkFzQmFkAQC0KwAuAES0KwAAAAH/" +
           "////AQH/////AAAAABVgiQoCAAAAAAAOAAAAUGVyY2VudERhdGFCYWQBALUrAC4ARLUrAAAAA/////8B" +
           "Af////8AAAAAFWCJCgIAAAAAAA8AAABQZXJjZW50RGF0YUdvb2QBALYrAC4ARLYrAAAAA/////8BAf//" +
           "//8AAAAAFWCJCgIAAAAAABYAAABVc2VTbG9wZWRFeHRyYXBvbGF0aW9uAQC3KwAuAES3KwAAAAH/////" +
           "AQH/////AAAAAA==";
        #endregion
        #endif
        #endregion

        #region Public Properties
        /// <remarks />
        public PropertyState<bool> TreatUncertainAsBad
        {
            get
            {
                return m_treatUncertainAsBad;
            }

            set
            {
                if (!Object.ReferenceEquals(m_treatUncertainAsBad, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_treatUncertainAsBad = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> PercentDataBad
        {
            get
            {
                return m_percentDataBad;
            }

            set
            {
                if (!Object.ReferenceEquals(m_percentDataBad, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_percentDataBad = value;
            }
        }

        /// <remarks />
        public PropertyState<byte> PercentDataGood
        {
            get
            {
                return m_percentDataGood;
            }

            set
            {
                if (!Object.ReferenceEquals(m_percentDataGood, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_percentDataGood = value;
            }
        }

        /// <remarks />
        public PropertyState<bool> UseSlopedExtrapolation
        {
            get
            {
                return m_useSlopedExtrapolation;
            }

            set
            {
                if (!Object.ReferenceEquals(m_useSlopedExtrapolation, value))
                {
                    ChangeMasks |= NodeStateChangeMasks.Children;
                }

                m_useSlopedExtrapolation = value;
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Populates a list with the children that belong to the node.
        /// </summary>
        /// <param name="context">The context for the system being accessed.</param>
        /// <param name="children">The list of children to populate.</param>
        public override void GetChildren(
            ISystemContext context,
            IList<BaseInstanceState> children)
        {
            if (m_treatUncertainAsBad != null)
            {
                children.Add(m_treatUncertainAsBad);
            }

            if (m_percentDataBad != null)
            {
                children.Add(m_percentDataBad);
            }

            if (m_percentDataGood != null)
            {
                children.Add(m_percentDataGood);
            }

            if (m_useSlopedExtrapolation != null)
            {
                children.Add(m_useSlopedExtrapolation);
            }

            base.GetChildren(context, children);
        }

        /// <summary>
        /// Finds the child with the specified browse name.
        /// </summary>
        protected override BaseInstanceState FindChild(
            ISystemContext context,
            QualifiedName browseName,
            bool createOrReplace,
            BaseInstanceState replacement)
        {
            if (QualifiedName.IsNull(browseName))
            {
                return null;
            }

            BaseInstanceState instance = null;

            switch (browseName.Name)
            {
                case Opc.Ua.BrowseNames.TreatUncertainAsBad:
                {
                    if (createOrReplace)
                    {
                        if (TreatUncertainAsBad == null)
                        {
                            if (replacement == null)
                            {
                                TreatUncertainAsBad = new PropertyState<bool>(this);
                            }
                            else
                            {
                                TreatUncertainAsBad = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = TreatUncertainAsBad;
                    break;
                }

                case Opc.Ua.BrowseNames.PercentDataBad:
                {
                    if (createOrReplace)
                    {
                        if (PercentDataBad == null)
                        {
                            if (replacement == null)
                            {
                                PercentDataBad = new PropertyState<byte>(this);
                            }
                            else
                            {
                                PercentDataBad = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = PercentDataBad;
                    break;
                }

                case Opc.Ua.BrowseNames.PercentDataGood:
                {
                    if (createOrReplace)
                    {
                        if (PercentDataGood == null)
                        {
                            if (replacement == null)
                            {
                                PercentDataGood = new PropertyState<byte>(this);
                            }
                            else
                            {
                                PercentDataGood = (PropertyState<byte>)replacement;
                            }
                        }
                    }

                    instance = PercentDataGood;
                    break;
                }

                case Opc.Ua.BrowseNames.UseSlopedExtrapolation:
                {
                    if (createOrReplace)
                    {
                        if (UseSlopedExtrapolation == null)
                        {
                            if (replacement == null)
                            {
                                UseSlopedExtrapolation = new PropertyState<bool>(this);
                            }
                            else
                            {
                                UseSlopedExtrapolation = (PropertyState<bool>)replacement;
                            }
                        }
                    }

                    instance = UseSlopedExtrapolation;
                    break;
                }
            }

            if (instance != null)
            {
                return instance;
            }

            return base.FindChild(context, browseName, createOrReplace, replacement);
        }
        #endregion

        #region Private Fields
        private PropertyState<bool> m_treatUncertainAsBad;
        private PropertyState<byte> m_percentDataBad;
        private PropertyState<byte> m_percentDataGood;
        private PropertyState<bool> m_useSlopedExtrapolation;
        #endregion
    }
    #endif
    #endregion
}
